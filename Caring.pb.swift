// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Caring.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///手机信息下发给手表    
struct Caring_set_device_info_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///手机型号。0：ios，1:android  
  var mPhonemodel: UInt32 {
    get {return _mPhonemodel ?? 0}
    set {_mPhonemodel = newValue}
  }
  /// Returns true if `mPhonemodel` has been explicitly set.
  var hasMPhonemodel: Bool {return self._mPhonemodel != nil}
  /// Clears the value of `mPhonemodel`. Subsequent reads from it will return its default value.
  mutating func clearMPhonemodel() {self._mPhonemodel = nil}

  ///app版本//YJ:       
  var mSystemversion: String {
    get {return _mSystemversion ?? String()}
    set {_mSystemversion = newValue}
  }
  /// Returns true if `mSystemversion` has been explicitly set.
  var hasMSystemversion: Bool {return self._mSystemversion != nil}
  /// Clears the value of `mSystemversion`. Subsequent reads from it will return its default value.
  mutating func clearMSystemversion() {self._mSystemversion = nil}

  ///手机的系统版本//YJ:
  var mAppversion: String {
    get {return _mAppversion ?? String()}
    set {_mAppversion = newValue}
  }
  /// Returns true if `mAppversion` has been explicitly set.
  var hasMAppversion: Bool {return self._mAppversion != nil}
  /// Clears the value of `mAppversion`. Subsequent reads from it will return its default value.
  mutating func clearMAppversion() {self._mAppversion = nil}

  ///语言。1:英文，2:中文
  var mLanguage: UInt32 {
    get {return _mLanguage ?? 0}
    set {_mLanguage = newValue}
  }
  /// Returns true if `mLanguage` has been explicitly set.
  var hasMLanguage: Bool {return self._mLanguage != nil}
  /// Clears the value of `mLanguage`. Subsequent reads from it will return its default value.
  mutating func clearMLanguage() {self._mLanguage = nil}

  ///用户uid
  var mUid: UInt32 {
    get {return _mUid ?? 0}
    set {_mUid = newValue}
  }
  /// Returns true if `mUid` has been explicitly set.
  var hasMUid: Bool {return self._mUid != nil}
  /// Clears the value of `mUid`. Subsequent reads from it will return its default value.
  mutating func clearMUid() {self._mUid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mPhonemodel: UInt32? = nil
  fileprivate var _mSystemversion: String? = nil
  fileprivate var _mAppversion: String? = nil
  fileprivate var _mLanguage: UInt32? = nil
  fileprivate var _mUid: UInt32? = nil
}

///设备信息
struct Caring_r_bind_device_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mProjno: Data {
    get {return _mProjno ?? Data()}
    set {_mProjno = newValue}
  }
  /// Returns true if `mProjno` has been explicitly set.
  var hasMProjno: Bool {return self._mProjno != nil}
  /// Clears the value of `mProjno`. Subsequent reads from it will return its default value.
  mutating func clearMProjno() {self._mProjno = nil}

  var mFwversion: Data {
    get {return _mFwversion ?? Data()}
    set {_mFwversion = newValue}
  }
  /// Returns true if `mFwversion` has been explicitly set.
  var hasMFwversion: Bool {return self._mFwversion != nil}
  /// Clears the value of `mFwversion`. Subsequent reads from it will return its default value.
  mutating func clearMFwversion() {self._mFwversion = nil}

  var mFontversion: UInt32 {
    get {return _mFontversion ?? 0}
    set {_mFontversion = newValue}
  }
  /// Returns true if `mFontversion` has been explicitly set.
  var hasMFontversion: Bool {return self._mFontversion != nil}
  /// Clears the value of `mFontversion`. Subsequent reads from it will return its default value.
  mutating func clearMFontversion() {self._mFontversion = nil}

  var mSdversion: UInt32 {
    get {return _mSdversion ?? 0}
    set {_mSdversion = newValue}
  }
  /// Returns true if `mSdversion` has been explicitly set.
  var hasMSdversion: Bool {return self._mSdversion != nil}
  /// Clears the value of `mSdversion`. Subsequent reads from it will return its default value.
  mutating func clearMSdversion() {self._mSdversion = nil}

  var mUiversion: UInt32 {
    get {return _mUiversion ?? 0}
    set {_mUiversion = newValue}
  }
  /// Returns true if `mUiversion` has been explicitly set.
  var hasMUiversion: Bool {return self._mUiversion != nil}
  /// Clears the value of `mUiversion`. Subsequent reads from it will return its default value.
  mutating func clearMUiversion() {self._mUiversion = nil}

  var mDevicesn: UInt32 {
    get {return _mDevicesn ?? 0}
    set {_mDevicesn = newValue}
  }
  /// Returns true if `mDevicesn` has been explicitly set.
  var hasMDevicesn: Bool {return self._mDevicesn != nil}
  /// Clears the value of `mDevicesn`. Subsequent reads from it will return its default value.
  mutating func clearMDevicesn() {self._mDevicesn = nil}

  var mDevicename: UInt32 {
    get {return _mDevicename ?? 0}
    set {_mDevicename = newValue}
  }
  /// Returns true if `mDevicename` has been explicitly set.
  var hasMDevicename: Bool {return self._mDevicename != nil}
  /// Clears the value of `mDevicename`. Subsequent reads from it will return its default value.
  mutating func clearMDevicename() {self._mDevicename = nil}

  var mBattvalue: UInt32 {
    get {return _mBattvalue ?? 0}
    set {_mBattvalue = newValue}
  }
  /// Returns true if `mBattvalue` has been explicitly set.
  var hasMBattvalue: Bool {return self._mBattvalue != nil}
  /// Clears the value of `mBattvalue`. Subsequent reads from it will return its default value.
  mutating func clearMBattvalue() {self._mBattvalue = nil}

  var mDevicemac: UInt32 {
    get {return _mDevicemac ?? 0}
    set {_mDevicemac = newValue}
  }
  /// Returns true if `mDevicemac` has been explicitly set.
  var hasMDevicemac: Bool {return self._mDevicemac != nil}
  /// Clears the value of `mDevicemac`. Subsequent reads from it will return its default value.
  mutating func clearMDevicemac() {self._mDevicemac = nil}

  var mBindOperate: UInt32 {
    get {return _mBindOperate ?? 0}
    set {_mBindOperate = newValue}
  }
  /// Returns true if `mBindOperate` has been explicitly set.
  var hasMBindOperate: Bool {return self._mBindOperate != nil}
  /// Clears the value of `mBindOperate`. Subsequent reads from it will return its default value.
  mutating func clearMBindOperate() {self._mBindOperate = nil}

  var mPower: UInt32 {
    get {return _mPower ?? 0}
    set {_mPower = newValue}
  }
  /// Returns true if `mPower` has been explicitly set.
  var hasMPower: Bool {return self._mPower != nil}
  /// Clears the value of `mPower`. Subsequent reads from it will return its default value.
  mutating func clearMPower() {self._mPower = nil}

  var mDeviceimei: UInt32 {
    get {return _mDeviceimei ?? 0}
    set {_mDeviceimei = newValue}
  }
  /// Returns true if `mDeviceimei` has been explicitly set.
  var hasMDeviceimei: Bool {return self._mDeviceimei != nil}
  /// Clears the value of `mDeviceimei`. Subsequent reads from it will return its default value.
  mutating func clearMDeviceimei() {self._mDeviceimei = nil}

  var mDeviceid: UInt32 {
    get {return _mDeviceid ?? 0}
    set {_mDeviceid = newValue}
  }
  /// Returns true if `mDeviceid` has been explicitly set.
  var hasMDeviceid: Bool {return self._mDeviceid != nil}
  /// Clears the value of `mDeviceid`. Subsequent reads from it will return its default value.
  mutating func clearMDeviceid() {self._mDeviceid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mProjno: Data? = nil
  fileprivate var _mFwversion: Data? = nil
  fileprivate var _mFontversion: UInt32? = nil
  fileprivate var _mSdversion: UInt32? = nil
  fileprivate var _mUiversion: UInt32? = nil
  fileprivate var _mDevicesn: UInt32? = nil
  fileprivate var _mDevicename: UInt32? = nil
  fileprivate var _mBattvalue: UInt32? = nil
  fileprivate var _mDevicemac: UInt32? = nil
  fileprivate var _mBindOperate: UInt32? = nil
  fileprivate var _mPower: UInt32? = nil
  fileprivate var _mDeviceimei: UInt32? = nil
  fileprivate var _mDeviceid: UInt32? = nil
}

///获取推送设备信息
struct Caring_get_device_info_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mProjno: Data {
    get {return _mProjno ?? Data()}
    set {_mProjno = newValue}
  }
  /// Returns true if `mProjno` has been explicitly set.
  var hasMProjno: Bool {return self._mProjno != nil}
  /// Clears the value of `mProjno`. Subsequent reads from it will return its default value.
  mutating func clearMProjno() {self._mProjno = nil}

  var mUiversion: Data {
    get {return _mUiversion ?? Data()}
    set {_mUiversion = newValue}
  }
  /// Returns true if `mUiversion` has been explicitly set.
  var hasMUiversion: Bool {return self._mUiversion != nil}
  /// Clears the value of `mUiversion`. Subsequent reads from it will return its default value.
  mutating func clearMUiversion() {self._mUiversion = nil}

  var mFwversion: Data {
    get {return _mFwversion ?? Data()}
    set {_mFwversion = newValue}
  }
  /// Returns true if `mFwversion` has been explicitly set.
  var hasMFwversion: Bool {return self._mFwversion != nil}
  /// Clears the value of `mFwversion`. Subsequent reads from it will return its default value.
  mutating func clearMFwversion() {self._mFwversion = nil}

  var mDevicesn: UInt32 {
    get {return _mDevicesn ?? 0}
    set {_mDevicesn = newValue}
  }
  /// Returns true if `mDevicesn` has been explicitly set.
  var hasMDevicesn: Bool {return self._mDevicesn != nil}
  /// Clears the value of `mDevicesn`. Subsequent reads from it will return its default value.
  mutating func clearMDevicesn() {self._mDevicesn = nil}

  var mDevicemac: UInt32 {
    get {return _mDevicemac ?? 0}
    set {_mDevicemac = newValue}
  }
  /// Returns true if `mDevicemac` has been explicitly set.
  var hasMDevicemac: Bool {return self._mDevicemac != nil}
  /// Clears the value of `mDevicemac`. Subsequent reads from it will return its default value.
  mutating func clearMDevicemac() {self._mDevicemac = nil}

  var mPower: UInt32 {
    get {return _mPower ?? 0}
    set {_mPower = newValue}
  }
  /// Returns true if `mPower` has been explicitly set.
  var hasMPower: Bool {return self._mPower != nil}
  /// Clears the value of `mPower`. Subsequent reads from it will return its default value.
  mutating func clearMPower() {self._mPower = nil}

  var mDeviceimei: UInt32 {
    get {return _mDeviceimei ?? 0}
    set {_mDeviceimei = newValue}
  }
  /// Returns true if `mDeviceimei` has been explicitly set.
  var hasMDeviceimei: Bool {return self._mDeviceimei != nil}
  /// Clears the value of `mDeviceimei`. Subsequent reads from it will return its default value.
  mutating func clearMDeviceimei() {self._mDeviceimei = nil}

  var mDeviceid: UInt32 {
    get {return _mDeviceid ?? 0}
    set {_mDeviceid = newValue}
  }
  /// Returns true if `mDeviceid` has been explicitly set.
  var hasMDeviceid: Bool {return self._mDeviceid != nil}
  /// Clears the value of `mDeviceid`. Subsequent reads from it will return its default value.
  mutating func clearMDeviceid() {self._mDeviceid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mProjno: Data? = nil
  fileprivate var _mUiversion: Data? = nil
  fileprivate var _mFwversion: Data? = nil
  fileprivate var _mDevicesn: UInt32? = nil
  fileprivate var _mDevicemac: UInt32? = nil
  fileprivate var _mPower: UInt32? = nil
  fileprivate var _mDeviceimei: UInt32? = nil
  fileprivate var _mDeviceid: UInt32? = nil
}

///set 鉴权值
struct Caring_set_auth_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mValue: UInt32 {
    get {return _mValue ?? 0}
    set {_mValue = newValue}
  }
  /// Returns true if `mValue` has been explicitly set.
  var hasMValue: Bool {return self._mValue != nil}
  /// Clears the value of `mValue`. Subsequent reads from it will return its default value.
  mutating func clearMValue() {self._mValue = nil}

  ///YJ： 40字节
  var mDomain: String {
    get {return _mDomain ?? String()}
    set {_mDomain = newValue}
  }
  /// Returns true if `mDomain` has been explicitly set.
  var hasMDomain: Bool {return self._mDomain != nil}
  /// Clears the value of `mDomain`. Subsequent reads from it will return its default value.
  mutating func clearMDomain() {self._mDomain = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mValue: UInt32? = nil
  fileprivate var _mDomain: String? = nil
}

///设置心率采样间隔
struct Caring_set_hr_sample_slot_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mHrSlot: UInt32 {
    get {return _mHrSlot ?? 0}
    set {_mHrSlot = newValue}
  }
  /// Returns true if `mHrSlot` has been explicitly set.
  var hasMHrSlot: Bool {return self._mHrSlot != nil}
  /// Clears the value of `mHrSlot`. Subsequent reads from it will return its default value.
  mutating func clearMHrSlot() {self._mHrSlot = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mHrSlot: UInt32? = nil
}

///手表设置
struct Caring_set_watch_setting_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///13800000000		设置久坐提醒判断的间隔 (单位：1min)
  var mLongsitDuration: UInt32 {
    get {return _mLongsitDuration ?? 0}
    set {_mLongsitDuration = newValue}
  }
  /// Returns true if `mLongsitDuration` has been explicitly set.
  var hasMLongsitDuration: Bool {return self._mLongsitDuration != nil}
  /// Clears the value of `mLongsitDuration`. Subsequent reads from it will return its default value.
  mutating func clearMLongsitDuration() {self._mLongsitDuration = nil}

  ///15:00	string	小时:高16bit 分钟：低16bit
  var mStartTime: UInt32 {
    get {return _mStartTime ?? 0}
    set {_mStartTime = newValue}
  }
  /// Returns true if `mStartTime` has been explicitly set.
  var hasMStartTime: Bool {return self._mStartTime != nil}
  /// Clears the value of `mStartTime`. Subsequent reads from it will return its default value.
  mutating func clearMStartTime() {self._mStartTime = nil}

  ///string	小时:高16bit 分钟：低16bit
  var mEndTime: UInt32 {
    get {return _mEndTime ?? 0}
    set {_mEndTime = newValue}
  }
  /// Returns true if `mEndTime` has been explicitly set.
  var hasMEndTime: Bool {return self._mEndTime != nil}
  /// Clears the value of `mEndTime`. Subsequent reads from it will return its default value.
  mutating func clearMEndTime() {self._mEndTime = nil}

  ///	勿扰模式开关
  var mNodisturbState: UInt32 {
    get {return _mNodisturbState ?? 0}
    set {_mNodisturbState = newValue}
  }
  /// Returns true if `mNodisturbState` has been explicitly set.
  var hasMNodisturbState: Bool {return self._mNodisturbState != nil}
  /// Clears the value of `mNodisturbState`. Subsequent reads from it will return its default value.
  mutating func clearMNodisturbState() {self._mNodisturbState = nil}

  ///久坐提醒开关
  var mLongsitState: UInt32 {
    get {return _mLongsitState ?? 0}
    set {_mLongsitState = newValue}
  }
  /// Returns true if `mLongsitState` has been explicitly set.
  var hasMLongsitState: Bool {return self._mLongsitState != nil}
  /// Clears the value of `mLongsitState`. Subsequent reads from it will return its default value.
  mutating func clearMLongsitState() {self._mLongsitState = nil}

  ///抬腕亮屏状态
  var mFlipWristState: UInt32 {
    get {return _mFlipWristState ?? 0}
    set {_mFlipWristState = newValue}
  }
  /// Returns true if `mFlipWristState` has been explicitly set.
  var hasMFlipWristState: Bool {return self._mFlipWristState != nil}
  /// Clears the value of `mFlipWristState`. Subsequent reads from it will return its default value.
  mutating func clearMFlipWristState() {self._mFlipWristState = nil}

  ///亮屏时长
  var mBrightScreenTime: UInt32 {
    get {return _mBrightScreenTime ?? 0}
    set {_mBrightScreenTime = newValue}
  }
  /// Returns true if `mBrightScreenTime` has been explicitly set.
  var hasMBrightScreenTime: Bool {return self._mBrightScreenTime != nil}
  /// Clears the value of `mBrightScreenTime`. Subsequent reads from it will return its default value.
  mutating func clearMBrightScreenTime() {self._mBrightScreenTime = nil}

  ///中午休息免打扰状态
  var mNoonNodisturbState: UInt32 {
    get {return _mNoonNodisturbState ?? 0}
    set {_mNoonNodisturbState = newValue}
  }
  /// Returns true if `mNoonNodisturbState` has been explicitly set.
  var hasMNoonNodisturbState: Bool {return self._mNoonNodisturbState != nil}
  /// Clears the value of `mNoonNodisturbState`. Subsequent reads from it will return its default value.
  mutating func clearMNoonNodisturbState() {self._mNoonNodisturbState = nil}

  ///勿扰模式开始时间
  var mNodisturbTimeStart: UInt32 {
    get {return _mNodisturbTimeStart ?? 0}
    set {_mNodisturbTimeStart = newValue}
  }
  /// Returns true if `mNodisturbTimeStart` has been explicitly set.
  var hasMNodisturbTimeStart: Bool {return self._mNodisturbTimeStart != nil}
  /// Clears the value of `mNodisturbTimeStart`. Subsequent reads from it will return its default value.
  mutating func clearMNodisturbTimeStart() {self._mNodisturbTimeStart = nil}

  ///勿扰模式结束时间
  var mNodisturbTimeEnd: UInt32 {
    get {return _mNodisturbTimeEnd ?? 0}
    set {_mNodisturbTimeEnd = newValue}
  }
  /// Returns true if `mNodisturbTimeEnd` has been explicitly set.
  var hasMNodisturbTimeEnd: Bool {return self._mNodisturbTimeEnd != nil}
  /// Clears the value of `mNodisturbTimeEnd`. Subsequent reads from it will return its default value.
  mutating func clearMNodisturbTimeEnd() {self._mNodisturbTimeEnd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mLongsitDuration: UInt32? = nil
  fileprivate var _mStartTime: UInt32? = nil
  fileprivate var _mEndTime: UInt32? = nil
  fileprivate var _mNodisturbState: UInt32? = nil
  fileprivate var _mLongsitState: UInt32? = nil
  fileprivate var _mFlipWristState: UInt32? = nil
  fileprivate var _mBrightScreenTime: UInt32? = nil
  fileprivate var _mNoonNodisturbState: UInt32? = nil
  fileprivate var _mNodisturbTimeStart: UInt32? = nil
  fileprivate var _mNodisturbTimeEnd: UInt32? = nil
}

///闹钟List
struct Caring_set_alarms_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var alarms: [Caring_alarm_t] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///闹钟
struct Caring_alarm_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///YJ：一个byte就可以了，不需要bytes？
  var mAlarm1Cfg: Data {
    get {return _mAlarm1Cfg ?? Data()}
    set {_mAlarm1Cfg = newValue}
  }
  /// Returns true if `mAlarm1Cfg` has been explicitly set.
  var hasMAlarm1Cfg: Bool {return self._mAlarm1Cfg != nil}
  /// Clears the value of `mAlarm1Cfg`. Subsequent reads from it will return its default value.
  mutating func clearMAlarm1Cfg() {self._mAlarm1Cfg = nil}

  var mAlarm1Hour: UInt32 {
    get {return _mAlarm1Hour ?? 0}
    set {_mAlarm1Hour = newValue}
  }
  /// Returns true if `mAlarm1Hour` has been explicitly set.
  var hasMAlarm1Hour: Bool {return self._mAlarm1Hour != nil}
  /// Clears the value of `mAlarm1Hour`. Subsequent reads from it will return its default value.
  mutating func clearMAlarm1Hour() {self._mAlarm1Hour = nil}

  var mAlarm1Min: UInt32 {
    get {return _mAlarm1Min ?? 0}
    set {_mAlarm1Min = newValue}
  }
  /// Returns true if `mAlarm1Min` has been explicitly set.
  var hasMAlarm1Min: Bool {return self._mAlarm1Min != nil}
  /// Clears the value of `mAlarm1Min`. Subsequent reads from it will return its default value.
  mutating func clearMAlarm1Min() {self._mAlarm1Min = nil}

  ///YJ:最长长度
  var mAlarm1Name: String {
    get {return _mAlarm1Name ?? String()}
    set {_mAlarm1Name = newValue}
  }
  /// Returns true if `mAlarm1Name` has been explicitly set.
  var hasMAlarm1Name: Bool {return self._mAlarm1Name != nil}
  /// Clears the value of `mAlarm1Name`. Subsequent reads from it will return its default value.
  mutating func clearMAlarm1Name() {self._mAlarm1Name = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mAlarm1Cfg: Data? = nil
  fileprivate var _mAlarm1Hour: UInt32? = nil
  fileprivate var _mAlarm1Min: UInt32? = nil
  fileprivate var _mAlarm1Name: String? = nil
}

///国家信息
struct Caring_set_country_info_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///国家码。86
  var mCountryCode: UInt32 {
    get {return _mCountryCode ?? 0}
    set {_mCountryCode = newValue}
  }
  /// Returns true if `mCountryCode` has been explicitly set.
  var hasMCountryCode: Bool {return self._mCountryCode != nil}
  /// Clears the value of `mCountryCode`. Subsequent reads from it will return its default value.
  mutating func clearMCountryCode() {self._mCountryCode = nil}

  ///时区 8，最高为0代表正时区。1代表负时区
  var mCountryTimezone: UInt32 {
    get {return _mCountryTimezone ?? 0}
    set {_mCountryTimezone = newValue}
  }
  /// Returns true if `mCountryTimezone` has been explicitly set.
  var hasMCountryTimezone: Bool {return self._mCountryTimezone != nil}
  /// Clears the value of `mCountryTimezone`. Subsequent reads from it will return its default value.
  mutating func clearMCountryTimezone() {self._mCountryTimezone = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mCountryCode: UInt32? = nil
  fileprivate var _mCountryTimezone: UInt32? = nil
}

///内置表盘设置
struct Caring_set_ui_style_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mUiStyle: UInt32 {
    get {return _mUiStyle ?? 0}
    set {_mUiStyle = newValue}
  }
  /// Returns true if `mUiStyle` has been explicitly set.
  var hasMUiStyle: Bool {return self._mUiStyle != nil}
  /// Clears the value of `mUiStyle`. Subsequent reads from it will return its default value.
  mutating func clearMUiStyle() {self._mUiStyle = nil}

  var mDialClock: UInt32 {
    get {return _mDialClock ?? 0}
    set {_mDialClock = newValue}
  }
  /// Returns true if `mDialClock` has been explicitly set.
  var hasMDialClock: Bool {return self._mDialClock != nil}
  /// Clears the value of `mDialClock`. Subsequent reads from it will return its default value.
  mutating func clearMDialClock() {self._mDialClock = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mUiStyle: UInt32? = nil
  fileprivate var _mDialClock: UInt32? = nil
}

///设置时间制式
struct Caring_set_time_format_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mTimeFormat: UInt32 {
    get {return _mTimeFormat ?? 0}
    set {_mTimeFormat = newValue}
  }
  /// Returns true if `mTimeFormat` has been explicitly set.
  var hasMTimeFormat: Bool {return self._mTimeFormat != nil}
  /// Clears the value of `mTimeFormat`. Subsequent reads from it will return its default value.
  mutating func clearMTimeFormat() {self._mTimeFormat = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mTimeFormat: UInt32? = nil
}

///设置公英制
struct Caring_set_metric_inch_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mMetricInch: UInt32 {
    get {return _mMetricInch ?? 0}
    set {_mMetricInch = newValue}
  }
  /// Returns true if `mMetricInch` has been explicitly set.
  var hasMMetricInch: Bool {return self._mMetricInch != nil}
  /// Clears the value of `mMetricInch`. Subsequent reads from it will return its default value.
  mutating func clearMMetricInch() {self._mMetricInch = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mMetricInch: UInt32? = nil
}

///设置心率预警值
struct Caring_set_hr_warning_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mHrUpper: UInt32 {
    get {return _mHrUpper ?? 0}
    set {_mHrUpper = newValue}
  }
  /// Returns true if `mHrUpper` has been explicitly set.
  var hasMHrUpper: Bool {return self._mHrUpper != nil}
  /// Clears the value of `mHrUpper`. Subsequent reads from it will return its default value.
  mutating func clearMHrUpper() {self._mHrUpper = nil}

  var mHrLower: UInt32 {
    get {return _mHrLower ?? 0}
    set {_mHrLower = newValue}
  }
  /// Returns true if `mHrLower` has been explicitly set.
  var hasMHrLower: Bool {return self._mHrLower != nil}
  /// Clears the value of `mHrLower`. Subsequent reads from it will return its default value.
  mutating func clearMHrLower() {self._mHrLower = nil}

  var mBpUpper: UInt32 {
    get {return _mBpUpper ?? 0}
    set {_mBpUpper = newValue}
  }
  /// Returns true if `mBpUpper` has been explicitly set.
  var hasMBpUpper: Bool {return self._mBpUpper != nil}
  /// Clears the value of `mBpUpper`. Subsequent reads from it will return its default value.
  mutating func clearMBpUpper() {self._mBpUpper = nil}

  var mBpLower: UInt32 {
    get {return _mBpLower ?? 0}
    set {_mBpLower = newValue}
  }
  /// Returns true if `mBpLower` has been explicitly set.
  var hasMBpLower: Bool {return self._mBpLower != nil}
  /// Clears the value of `mBpLower`. Subsequent reads from it will return its default value.
  mutating func clearMBpLower() {self._mBpLower = nil}

  var mDetectState: UInt32 {
    get {return _mDetectState ?? 0}
    set {_mDetectState = newValue}
  }
  /// Returns true if `mDetectState` has been explicitly set.
  var hasMDetectState: Bool {return self._mDetectState != nil}
  /// Clears the value of `mDetectState`. Subsequent reads from it will return its default value.
  mutating func clearMDetectState() {self._mDetectState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mHrUpper: UInt32? = nil
  fileprivate var _mHrLower: UInt32? = nil
  fileprivate var _mBpUpper: UInt32? = nil
  fileprivate var _mBpLower: UInt32? = nil
  fileprivate var _mDetectState: UInt32? = nil
}

///异常提醒
struct Caring_set_abnormal_warning_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1 心率预警，2:跌倒预警
  var mWarningType: UInt32 {
    get {return _mWarningType ?? 0}
    set {_mWarningType = newValue}
  }
  /// Returns true if `mWarningType` has been explicitly set.
  var hasMWarningType: Bool {return self._mWarningType != nil}
  /// Clears the value of `mWarningType`. Subsequent reads from it will return its default value.
  mutating func clearMWarningType() {self._mWarningType = nil}

  var mTimeSecond: UInt32 {
    get {return _mTimeSecond ?? 0}
    set {_mTimeSecond = newValue}
  }
  /// Returns true if `mTimeSecond` has been explicitly set.
  var hasMTimeSecond: Bool {return self._mTimeSecond != nil}
  /// Clears the value of `mTimeSecond`. Subsequent reads from it will return its default value.
  mutating func clearMTimeSecond() {self._mTimeSecond = nil}

  var mWarningLongitude: UInt32 {
    get {return _mWarningLongitude ?? 0}
    set {_mWarningLongitude = newValue}
  }
  /// Returns true if `mWarningLongitude` has been explicitly set.
  var hasMWarningLongitude: Bool {return self._mWarningLongitude != nil}
  /// Clears the value of `mWarningLongitude`. Subsequent reads from it will return its default value.
  mutating func clearMWarningLongitude() {self._mWarningLongitude = nil}

  var mWarningLatitude: Data {
    get {return _mWarningLatitude ?? Data()}
    set {_mWarningLatitude = newValue}
  }
  /// Returns true if `mWarningLatitude` has been explicitly set.
  var hasMWarningLatitude: Bool {return self._mWarningLatitude != nil}
  /// Clears the value of `mWarningLatitude`. Subsequent reads from it will return its default value.
  mutating func clearMWarningLatitude() {self._mWarningLatitude = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mWarningType: UInt32? = nil
  fileprivate var _mTimeSecond: UInt32? = nil
  fileprivate var _mWarningLongitude: UInt32? = nil
  fileprivate var _mWarningLatitude: Data? = nil
}

///----------------------------------------------
///
///上传健康数据
struct Caring_r_get_health_data_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mErrCode: UInt32 {
    get {return _storage._mErrCode ?? 0}
    set {_uniqueStorage()._mErrCode = newValue}
  }
  /// Returns true if `mErrCode` has been explicitly set.
  var hasMErrCode: Bool {return _storage._mErrCode != nil}
  /// Clears the value of `mErrCode`. Subsequent reads from it will return its default value.
  mutating func clearMErrCode() {_uniqueStorage()._mErrCode = nil}

  ///YJ:放什么数据？   长度1   sn = ffff 就是结束 65535
  var mSn: UInt32 {
    get {return _storage._mSn ?? 0}
    set {_uniqueStorage()._mSn = newValue}
  }
  /// Returns true if `mSn` has been explicitly set.
  var hasMSn: Bool {return _storage._mSn != nil}
  /// Clears the value of `mSn`. Subsequent reads from it will return its default value.
  mutating func clearMSn() {_uniqueStorage()._mSn = nil}

  ///YJ:放什么数据？   在4G 上没有用。在蓝牙上 根据DN 标识做data拼接 
  var mData: Data {
    get {return _storage._mData ?? Data()}
    set {_uniqueStorage()._mData = newValue}
  }
  /// Returns true if `mData` has been explicitly set.
  var hasMData: Bool {return _storage._mData != nil}
  /// Clears the value of `mData`. Subsequent reads from it will return its default value.
  mutating func clearMData() {_uniqueStorage()._mData = nil}

  ///步数
  var step: Caring_r_get_health_step_t {
    get {return _storage._step ?? Caring_r_get_health_step_t()}
    set {_uniqueStorage()._step = newValue}
  }
  /// Returns true if `step` has been explicitly set.
  var hasStep: Bool {return _storage._step != nil}
  /// Clears the value of `step`. Subsequent reads from it will return its default value.
  mutating func clearStep() {_uniqueStorage()._step = nil}

  ///心率
  var hrm: Caring_r_get_health_hrm_t {
    get {return _storage._hrm ?? Caring_r_get_health_hrm_t()}
    set {_uniqueStorage()._hrm = newValue}
  }
  /// Returns true if `hrm` has been explicitly set.
  var hasHrm: Bool {return _storage._hrm != nil}
  /// Clears the value of `hrm`. Subsequent reads from it will return its default value.
  mutating func clearHrm() {_uniqueStorage()._hrm = nil}

  ///血压
  var bp: Caring_r_get_health_bp_t {
    get {return _storage._bp ?? Caring_r_get_health_bp_t()}
    set {_uniqueStorage()._bp = newValue}
  }
  /// Returns true if `bp` has been explicitly set.
  var hasBp: Bool {return _storage._bp != nil}
  /// Clears the value of `bp`. Subsequent reads from it will return its default value.
  mutating func clearBp() {_uniqueStorage()._bp = nil}

  ///睡眠
  var sleep: Caring_r_get_health_sleep_t {
    get {return _storage._sleep ?? Caring_r_get_health_sleep_t()}
    set {_uniqueStorage()._sleep = newValue}
  }
  /// Returns true if `sleep` has been explicitly set.
  var hasSleep: Bool {return _storage._sleep != nil}
  /// Clears the value of `sleep`. Subsequent reads from it will return its default value.
  mutating func clearSleep() {_uniqueStorage()._sleep = nil}

  ///血氧
  var spo2: Caring_r_get_health_spo2_t {
    get {return _storage._spo2 ?? Caring_r_get_health_spo2_t()}
    set {_uniqueStorage()._spo2 = newValue}
  }
  /// Returns true if `spo2` has been explicitly set.
  var hasSpo2: Bool {return _storage._spo2 != nil}
  /// Clears the value of `spo2`. Subsequent reads from it will return its default value.
  mutating func clearSpo2() {_uniqueStorage()._spo2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 历史步数
struct Caring_r_get_health_step_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///该天0时的时间戳
  var timeStamp: UInt32 {
    get {return _timeStamp ?? 0}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  var totalSteps: UInt32 {
    get {return _totalSteps ?? 0}
    set {_totalSteps = newValue}
  }
  /// Returns true if `totalSteps` has been explicitly set.
  var hasTotalSteps: Bool {return self._totalSteps != nil}
  /// Clears the value of `totalSteps`. Subsequent reads from it will return its default value.
  mutating func clearTotalSteps() {self._totalSteps = nil}

  var totalDistance: UInt64 {
    get {return _totalDistance ?? 0}
    set {_totalDistance = newValue}
  }
  /// Returns true if `totalDistance` has been explicitly set.
  var hasTotalDistance: Bool {return self._totalDistance != nil}
  /// Clears the value of `totalDistance`. Subsequent reads from it will return its default value.
  mutating func clearTotalDistance() {self._totalDistance = nil}

  var totalKcal: UInt32 {
    get {return _totalKcal ?? 0}
    set {_totalKcal = newValue}
  }
  /// Returns true if `totalKcal` has been explicitly set.
  var hasTotalKcal: Bool {return self._totalKcal != nil}
  /// Clears the value of `totalKcal`. Subsequent reads from it will return its default value.
  mutating func clearTotalKcal() {self._totalKcal = nil}

  var duration: UInt32 {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var stepDetails: [UInt32] = []

  var recordDate: UInt32 {
    get {return _recordDate ?? 0}
    set {_recordDate = newValue}
  }
  /// Returns true if `recordDate` has been explicitly set.
  var hasRecordDate: Bool {return self._recordDate != nil}
  /// Clears the value of `recordDate`. Subsequent reads from it will return its default value.
  mutating func clearRecordDate() {self._recordDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: UInt32? = nil
  fileprivate var _totalSteps: UInt32? = nil
  fileprivate var _totalDistance: UInt64? = nil
  fileprivate var _totalKcal: UInt32? = nil
  fileprivate var _duration: UInt32? = nil
  fileprivate var _recordDate: UInt32? = nil
}

/// 历史心率
struct Caring_r_get_health_hrm_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///该天0时的时间戳
  var timeStamp: UInt32 {
    get {return _timeStamp ?? 0}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  var maxHeartRate: UInt32 {
    get {return _maxHeartRate ?? 0}
    set {_maxHeartRate = newValue}
  }
  /// Returns true if `maxHeartRate` has been explicitly set.
  var hasMaxHeartRate: Bool {return self._maxHeartRate != nil}
  /// Clears the value of `maxHeartRate`. Subsequent reads from it will return its default value.
  mutating func clearMaxHeartRate() {self._maxHeartRate = nil}

  var minHeartRate: UInt32 {
    get {return _minHeartRate ?? 0}
    set {_minHeartRate = newValue}
  }
  /// Returns true if `minHeartRate` has been explicitly set.
  var hasMinHeartRate: Bool {return self._minHeartRate != nil}
  /// Clears the value of `minHeartRate`. Subsequent reads from it will return its default value.
  mutating func clearMinHeartRate() {self._minHeartRate = nil}

  var averageHeartRate: UInt32 {
    get {return _averageHeartRate ?? 0}
    set {_averageHeartRate = newValue}
  }
  /// Returns true if `averageHeartRate` has been explicitly set.
  var hasAverageHeartRate: Bool {return self._averageHeartRate != nil}
  /// Clears the value of `averageHeartRate`. Subsequent reads from it will return its default value.
  mutating func clearAverageHeartRate() {self._averageHeartRate = nil}

  var hrsDetails: [UInt32] = []

  var recordDate: UInt32 {
    get {return _recordDate ?? 0}
    set {_recordDate = newValue}
  }
  /// Returns true if `recordDate` has been explicitly set.
  var hasRecordDate: Bool {return self._recordDate != nil}
  /// Clears the value of `recordDate`. Subsequent reads from it will return its default value.
  mutating func clearRecordDate() {self._recordDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: UInt32? = nil
  fileprivate var _maxHeartRate: UInt32? = nil
  fileprivate var _minHeartRate: UInt32? = nil
  fileprivate var _averageHeartRate: UInt32? = nil
  fileprivate var _recordDate: UInt32? = nil
}

///历史血压
struct Caring_r_get_health_bp_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///该天0时的时间戳
  var timeStamp: UInt32 {
    get {return _timeStamp ?? 0}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  ///最高血压//YJ：有舒张压和收缩压，如何定义最高最低？
  var maxBp: Caring_r_get_bp {
    get {return _maxBp ?? Caring_r_get_bp()}
    set {_maxBp = newValue}
  }
  /// Returns true if `maxBp` has been explicitly set.
  var hasMaxBp: Bool {return self._maxBp != nil}
  /// Clears the value of `maxBp`. Subsequent reads from it will return its default value.
  mutating func clearMaxBp() {self._maxBp = nil}

  ///最低血压
  var minBp: Caring_r_get_bp {
    get {return _minBp ?? Caring_r_get_bp()}
    set {_minBp = newValue}
  }
  /// Returns true if `minBp` has been explicitly set.
  var hasMinBp: Bool {return self._minBp != nil}
  /// Clears the value of `minBp`. Subsequent reads from it will return its default value.
  mutating func clearMinBp() {self._minBp = nil}

  ///平均血压
  var avgBp: Caring_r_get_bp {
    get {return _avgBp ?? Caring_r_get_bp()}
    set {_avgBp = newValue}
  }
  /// Returns true if `avgBp` has been explicitly set.
  var hasAvgBp: Bool {return self._avgBp != nil}
  /// Clears the value of `avgBp`. Subsequent reads from it will return its default value.
  mutating func clearAvgBp() {self._avgBp = nil}

  ///血压明细
  var bpDetails: [Caring_r_get_bp] = []

  /// 记录日期
  var recordDate: UInt32 {
    get {return _recordDate ?? 0}
    set {_recordDate = newValue}
  }
  /// Returns true if `recordDate` has been explicitly set.
  var hasRecordDate: Bool {return self._recordDate != nil}
  /// Clears the value of `recordDate`. Subsequent reads from it will return its default value.
  mutating func clearRecordDate() {self._recordDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: UInt32? = nil
  fileprivate var _maxBp: Caring_r_get_bp? = nil
  fileprivate var _minBp: Caring_r_get_bp? = nil
  fileprivate var _avgBp: Caring_r_get_bp? = nil
  fileprivate var _recordDate: UInt32? = nil
}

/// 历史睡眠
struct Caring_r_get_health_sleep_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///该天0时的时间戳
  var timeStamp: UInt32 {
    get {return _timeStamp ?? 0}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  ///睡眠开始时间
  var startTime: UInt32 {
    get {return _startTime ?? 0}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  ///睡眠结束时间
  var endTime: UInt32 {
    get {return _endTime ?? 0}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {self._endTime = nil}

  ///睡眠总时长
  var totalMinutes: UInt32 {
    get {return _totalMinutes ?? 0}
    set {_totalMinutes = newValue}
  }
  /// Returns true if `totalMinutes` has been explicitly set.
  var hasTotalMinutes: Bool {return self._totalMinutes != nil}
  /// Clears the value of `totalMinutes`. Subsequent reads from it will return its default value.
  mutating func clearTotalMinutes() {self._totalMinutes = nil}

  ///浅睡时长
  var lightSleepMinutes: UInt32 {
    get {return _lightSleepMinutes ?? 0}
    set {_lightSleepMinutes = newValue}
  }
  /// Returns true if `lightSleepMinutes` has been explicitly set.
  var hasLightSleepMinutes: Bool {return self._lightSleepMinutes != nil}
  /// Clears the value of `lightSleepMinutes`. Subsequent reads from it will return its default value.
  mutating func clearLightSleepMinutes() {self._lightSleepMinutes = nil}

  /// 深睡时长
  var deepSleepMinutes: UInt32 {
    get {return _deepSleepMinutes ?? 0}
    set {_deepSleepMinutes = newValue}
  }
  /// Returns true if `deepSleepMinutes` has been explicitly set.
  var hasDeepSleepMinutes: Bool {return self._deepSleepMinutes != nil}
  /// Clears the value of `deepSleepMinutes`. Subsequent reads from it will return its default value.
  mutating func clearDeepSleepMinutes() {self._deepSleepMinutes = nil}

  /// 清醒时长
  var awakeSleepMinutes: UInt32 {
    get {return _awakeSleepMinutes ?? 0}
    set {_awakeSleepMinutes = newValue}
  }
  /// Returns true if `awakeSleepMinutes` has been explicitly set.
  var hasAwakeSleepMinutes: Bool {return self._awakeSleepMinutes != nil}
  /// Clears the value of `awakeSleepMinutes`. Subsequent reads from it will return its default value.
  mutating func clearAwakeSleepMinutes() {self._awakeSleepMinutes = nil}

  /// 清醒次数
  var awakeTimes: UInt32 {
    get {return _awakeTimes ?? 0}
    set {_awakeTimes = newValue}
  }
  /// Returns true if `awakeTimes` has been explicitly set.
  var hasAwakeTimes: Bool {return self._awakeTimes != nil}
  /// Clears the value of `awakeTimes`. Subsequent reads from it will return its default value.
  mutating func clearAwakeTimes() {self._awakeTimes = nil}

  /// 睡眠状态明细
  var sleepDetails: [Caring_r_sleep_detail_t] = []

  /// 记录日期
  var recordDate: UInt32 {
    get {return _recordDate ?? 0}
    set {_recordDate = newValue}
  }
  /// Returns true if `recordDate` has been explicitly set.
  var hasRecordDate: Bool {return self._recordDate != nil}
  /// Clears the value of `recordDate`. Subsequent reads from it will return its default value.
  mutating func clearRecordDate() {self._recordDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: UInt32? = nil
  fileprivate var _startTime: UInt32? = nil
  fileprivate var _endTime: UInt32? = nil
  fileprivate var _totalMinutes: UInt32? = nil
  fileprivate var _lightSleepMinutes: UInt32? = nil
  fileprivate var _deepSleepMinutes: UInt32? = nil
  fileprivate var _awakeSleepMinutes: UInt32? = nil
  fileprivate var _awakeTimes: UInt32? = nil
  fileprivate var _recordDate: UInt32? = nil
}

/// 历史血氧
struct Caring_r_get_health_spo2_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///该天0时的时间戳
  var timeStamp: UInt32 {
    get {return _timeStamp ?? 0}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  ///最大血氧度
  var maxSpo2: UInt32 {
    get {return _maxSpo2 ?? 0}
    set {_maxSpo2 = newValue}
  }
  /// Returns true if `maxSpo2` has been explicitly set.
  var hasMaxSpo2: Bool {return self._maxSpo2 != nil}
  /// Clears the value of `maxSpo2`. Subsequent reads from it will return its default value.
  mutating func clearMaxSpo2() {self._maxSpo2 = nil}

  ///最小血氧度
  var minSpo2: UInt32 {
    get {return _minSpo2 ?? 0}
    set {_minSpo2 = newValue}
  }
  /// Returns true if `minSpo2` has been explicitly set.
  var hasMinSpo2: Bool {return self._minSpo2 != nil}
  /// Clears the value of `minSpo2`. Subsequent reads from it will return its default value.
  mutating func clearMinSpo2() {self._minSpo2 = nil}

  ///血氧度明细
  var spo2Details: [Caring_r_get_spo2] = []

  /// 记录日期
  var recordDate: UInt32 {
    get {return _recordDate ?? 0}
    set {_recordDate = newValue}
  }
  /// Returns true if `recordDate` has been explicitly set.
  var hasRecordDate: Bool {return self._recordDate != nil}
  /// Clears the value of `recordDate`. Subsequent reads from it will return its default value.
  mutating func clearRecordDate() {self._recordDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: UInt32? = nil
  fileprivate var _maxSpo2: UInt32? = nil
  fileprivate var _minSpo2: UInt32? = nil
  fileprivate var _recordDate: UInt32? = nil
}

///设置天气
struct Caring_set_weather_info_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var weathers: [Caring_weather_t] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///天气
struct Caring_weather_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mWeatherNum: UInt32 {
    get {return _mWeatherNum ?? 0}
    set {_mWeatherNum = newValue}
  }
  /// Returns true if `mWeatherNum` has been explicitly set.
  var hasMWeatherNum: Bool {return self._mWeatherNum != nil}
  /// Clears the value of `mWeatherNum`. Subsequent reads from it will return its default value.
  mutating func clearMWeatherNum() {self._mWeatherNum = nil}

  var mClimate: UInt32 {
    get {return _mClimate ?? 0}
    set {_mClimate = newValue}
  }
  /// Returns true if `mClimate` has been explicitly set.
  var hasMClimate: Bool {return self._mClimate != nil}
  /// Clears the value of `mClimate`. Subsequent reads from it will return its default value.
  mutating func clearMClimate() {self._mClimate = nil}

  var mTemperature: UInt32 {
    get {return _mTemperature ?? 0}
    set {_mTemperature = newValue}
  }
  /// Returns true if `mTemperature` has been explicitly set.
  var hasMTemperature: Bool {return self._mTemperature != nil}
  /// Clears the value of `mTemperature`. Subsequent reads from it will return its default value.
  mutating func clearMTemperature() {self._mTemperature = nil}

  var mPm25: UInt32 {
    get {return _mPm25 ?? 0}
    set {_mPm25 = newValue}
  }
  /// Returns true if `mPm25` has been explicitly set.
  var hasMPm25: Bool {return self._mPm25 != nil}
  /// Clears the value of `mPm25`. Subsequent reads from it will return its default value.
  mutating func clearMPm25() {self._mPm25 = nil}

  var mAqi: UInt32 {
    get {return _mAqi ?? 0}
    set {_mAqi = newValue}
  }
  /// Returns true if `mAqi` has been explicitly set.
  var hasMAqi: Bool {return self._mAqi != nil}
  /// Clears the value of `mAqi`. Subsequent reads from it will return its default value.
  mutating func clearMAqi() {self._mAqi = nil}

  var mCity: UInt32 {
    get {return _mCity ?? 0}
    set {_mCity = newValue}
  }
  /// Returns true if `mCity` has been explicitly set.
  var hasMCity: Bool {return self._mCity != nil}
  /// Clears the value of `mCity`. Subsequent reads from it will return its default value.
  mutating func clearMCity() {self._mCity = nil}

  var mMaxTemp: UInt32 {
    get {return _mMaxTemp ?? 0}
    set {_mMaxTemp = newValue}
  }
  /// Returns true if `mMaxTemp` has been explicitly set.
  var hasMMaxTemp: Bool {return self._mMaxTemp != nil}
  /// Clears the value of `mMaxTemp`. Subsequent reads from it will return its default value.
  mutating func clearMMaxTemp() {self._mMaxTemp = nil}

  var mMinTemp: UInt32 {
    get {return _mMinTemp ?? 0}
    set {_mMinTemp = newValue}
  }
  /// Returns true if `mMinTemp` has been explicitly set.
  var hasMMinTemp: Bool {return self._mMinTemp != nil}
  /// Clears the value of `mMinTemp`. Subsequent reads from it will return its default value.
  mutating func clearMMinTemp() {self._mMinTemp = nil}

  var mSeconds: UInt32 {
    get {return _mSeconds ?? 0}
    set {_mSeconds = newValue}
  }
  /// Returns true if `mSeconds` has been explicitly set.
  var hasMSeconds: Bool {return self._mSeconds != nil}
  /// Clears the value of `mSeconds`. Subsequent reads from it will return its default value.
  mutating func clearMSeconds() {self._mSeconds = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mWeatherNum: UInt32? = nil
  fileprivate var _mClimate: UInt32? = nil
  fileprivate var _mTemperature: UInt32? = nil
  fileprivate var _mPm25: UInt32? = nil
  fileprivate var _mAqi: UInt32? = nil
  fileprivate var _mCity: UInt32? = nil
  fileprivate var _mMaxTemp: UInt32? = nil
  fileprivate var _mMinTemp: UInt32? = nil
  fileprivate var _mSeconds: UInt32? = nil
}

///恢复出厂设置
struct Caring_set_reset_machine_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mAuth: UInt32 {
    get {return _mAuth ?? 0}
    set {_mAuth = newValue}
  }
  /// Returns true if `mAuth` has been explicitly set.
  var hasMAuth: Bool {return self._mAuth != nil}
  /// Clears the value of `mAuth`. Subsequent reads from it will return its default value.
  mutating func clearMAuth() {self._mAuth = nil}

  var mFactoryMode: UInt32 {
    get {return _mFactoryMode ?? 0}
    set {_mFactoryMode = newValue}
  }
  /// Returns true if `mFactoryMode` has been explicitly set.
  var hasMFactoryMode: Bool {return self._mFactoryMode != nil}
  /// Clears the value of `mFactoryMode`. Subsequent reads from it will return its default value.
  mutating func clearMFactoryMode() {self._mFactoryMode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mAuth: UInt32? = nil
  fileprivate var _mFactoryMode: UInt32? = nil
}

///联系人信息
struct Caring_sync_contacts_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///YJ：最长长度20汉字
  var mContactsNum: Data {
    get {return _mContactsNum ?? Data()}
    set {_mContactsNum = newValue}
  }
  /// Returns true if `mContactsNum` has been explicitly set.
  var hasMContactsNum: Bool {return self._mContactsNum != nil}
  /// Clears the value of `mContactsNum`. Subsequent reads from it will return its default value.
  mutating func clearMContactsNum() {self._mContactsNum = nil}

  ///YJ：最长长度30汉字
  var mContactsName: String {
    get {return _mContactsName ?? String()}
    set {_mContactsName = newValue}
  }
  /// Returns true if `mContactsName` has been explicitly set.
  var hasMContactsName: Bool {return self._mContactsName != nil}
  /// Clears the value of `mContactsName`. Subsequent reads from it will return its default value.
  mutating func clearMContactsName() {self._mContactsName = nil}

  var mContactsSos: UInt32 {
    get {return _mContactsSos ?? 0}
    set {_mContactsSos = newValue}
  }
  /// Returns true if `mContactsSos` has been explicitly set.
  var hasMContactsSos: Bool {return self._mContactsSos != nil}
  /// Clears the value of `mContactsSos`. Subsequent reads from it will return its default value.
  mutating func clearMContactsSos() {self._mContactsSos = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mContactsNum: Data? = nil
  fileprivate var _mContactsName: String? = nil
  fileprivate var _mContactsSos: UInt32? = nil
}

///通讯录
struct Caring_set_contacts_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contacts: [Caring_sync_contacts_t] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///设置记步目标
struct Caring_set_sport_target_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mTargetCal: UInt32 {
    get {return _mTargetCal ?? 0}
    set {_mTargetCal = newValue}
  }
  /// Returns true if `mTargetCal` has been explicitly set.
  var hasMTargetCal: Bool {return self._mTargetCal != nil}
  /// Clears the value of `mTargetCal`. Subsequent reads from it will return its default value.
  mutating func clearMTargetCal() {self._mTargetCal = nil}

  var mTargetDis: UInt32 {
    get {return _mTargetDis ?? 0}
    set {_mTargetDis = newValue}
  }
  /// Returns true if `mTargetDis` has been explicitly set.
  var hasMTargetDis: Bool {return self._mTargetDis != nil}
  /// Clears the value of `mTargetDis`. Subsequent reads from it will return its default value.
  mutating func clearMTargetDis() {self._mTargetDis = nil}

  var mTargetStep: UInt32 {
    get {return _mTargetStep ?? 0}
    set {_mTargetStep = newValue}
  }
  /// Returns true if `mTargetStep` has been explicitly set.
  var hasMTargetStep: Bool {return self._mTargetStep != nil}
  /// Clears the value of `mTargetStep`. Subsequent reads from it will return its default value.
  mutating func clearMTargetStep() {self._mTargetStep = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mTargetCal: UInt32? = nil
  fileprivate var _mTargetDis: UInt32? = nil
  fileprivate var _mTargetStep: UInt32? = nil
}

///开关设置
struct Caring_sync_switch_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mSwitchs: Data {
    get {return _mSwitchs ?? Data()}
    set {_mSwitchs = newValue}
  }
  /// Returns true if `mSwitchs` has been explicitly set.
  var hasMSwitchs: Bool {return self._mSwitchs != nil}
  /// Clears the value of `mSwitchs`. Subsequent reads from it will return its default value.
  mutating func clearMSwitchs() {self._mSwitchs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mSwitchs: Data? = nil
}

///设置一级页面的顺序
struct Caring_get_menu_sequence_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mType: UInt32 {
    get {return _mType ?? 0}
    set {_mType = newValue}
  }
  /// Returns true if `mType` has been explicitly set.
  var hasMType: Bool {return self._mType != nil}
  /// Clears the value of `mType`. Subsequent reads from it will return its default value.
  mutating func clearMType() {self._mType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mType: UInt32? = nil
}

///发布4G在线下线状态通知
struct Caring_r_get_4G_online_off_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mOnline: UInt32 {
    get {return _mOnline ?? 0}
    set {_mOnline = newValue}
  }
  /// Returns true if `mOnline` has been explicitly set.
  var hasMOnline: Bool {return self._mOnline != nil}
  /// Clears the value of `mOnline`. Subsequent reads from it will return its default value.
  mutating func clearMOnline() {self._mOnline = nil}

  var mTimeSecond: UInt32 {
    get {return _mTimeSecond ?? 0}
    set {_mTimeSecond = newValue}
  }
  /// Returns true if `mTimeSecond` has been explicitly set.
  var hasMTimeSecond: Bool {return self._mTimeSecond != nil}
  /// Clears the value of `mTimeSecond`. Subsequent reads from it will return its default value.
  mutating func clearMTimeSecond() {self._mTimeSecond = nil}

  var clientID: UInt32 {
    get {return _clientID ?? 0}
    set {_clientID = newValue}
  }
  /// Returns true if `clientID` has been explicitly set.
  var hasClientID: Bool {return self._clientID != nil}
  /// Clears the value of `clientID`. Subsequent reads from it will return its default value.
  mutating func clearClientID() {self._clientID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mOnline: UInt32? = nil
  fileprivate var _mTimeSecond: UInt32? = nil
  fileprivate var _clientID: UInt32? = nil
}

///发布4G在线下线状态通知
struct Caring_r_get_4G_online_or_not_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mOnline: UInt32 {
    get {return _mOnline ?? 0}
    set {_mOnline = newValue}
  }
  /// Returns true if `mOnline` has been explicitly set.
  var hasMOnline: Bool {return self._mOnline != nil}
  /// Clears the value of `mOnline`. Subsequent reads from it will return its default value.
  mutating func clearMOnline() {self._mOnline = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mOnline: UInt32? = nil
}

///跌倒          暂无需求
struct Caring_r_set_caring_reminder_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///跌倒提醒
  var fallReminder: UInt32 {
    get {return _fallReminder ?? 0}
    set {_fallReminder = newValue}
  }
  /// Returns true if `fallReminder` has been explicitly set.
  var hasFallReminder: Bool {return self._fallReminder != nil}
  /// Clears the value of `fallReminder`. Subsequent reads from it will return its default value.
  mutating func clearFallReminder() {self._fallReminder = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fallReminder: UInt32? = nil
}

///血压            暂无需求
struct Caring_r_get_bp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///收缩压
  var sbp: UInt32 {
    get {return _sbp ?? 0}
    set {_sbp = newValue}
  }
  /// Returns true if `sbp` has been explicitly set.
  var hasSbp: Bool {return self._sbp != nil}
  /// Clears the value of `sbp`. Subsequent reads from it will return its default value.
  mutating func clearSbp() {self._sbp = nil}

  ///舒张压
  var dbp: UInt32 {
    get {return _dbp ?? 0}
    set {_dbp = newValue}
  }
  /// Returns true if `dbp` has been explicitly set.
  var hasDbp: Bool {return self._dbp != nil}
  /// Clears the value of `dbp`. Subsequent reads from it will return its default value.
  mutating func clearDbp() {self._dbp = nil}

  ///测量时间
  var measureTime: UInt32 {
    get {return _measureTime ?? 0}
    set {_measureTime = newValue}
  }
  /// Returns true if `measureTime` has been explicitly set.
  var hasMeasureTime: Bool {return self._measureTime != nil}
  /// Clears the value of `measureTime`. Subsequent reads from it will return its default value.
  mutating func clearMeasureTime() {self._measureTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sbp: UInt32? = nil
  fileprivate var _dbp: UInt32? = nil
  fileprivate var _measureTime: UInt32? = nil
}

/// 通知发布健康数据。 
struct Caring_set_sync_health_data_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///同步的数据类型。 步数(0)睡眠(1)心率(2)多运动记录(3)血氧(4)血压(5)
  var mSyncType: UInt32 {
    get {return _mSyncType ?? 0}
    set {_mSyncType = newValue}
  }
  /// Returns true if `mSyncType` has been explicitly set.
  var hasMSyncType: Bool {return self._mSyncType != nil}
  /// Clears the value of `mSyncType`. Subsequent reads from it will return its default value.
  mutating func clearMSyncType() {self._mSyncType = nil}

  ///指定距离今天天数的数据。0代表是今天， 1代表昨天 2代表大前天
  var mDistanceToday: UInt32 {
    get {return _mDistanceToday ?? 0}
    set {_mDistanceToday = newValue}
  }
  /// Returns true if `mDistanceToday` has been explicitly set.
  var hasMDistanceToday: Bool {return self._mDistanceToday != nil}
  /// Clears the value of `mDistanceToday`. Subsequent reads from it will return its default value.
  mutating func clearMDistanceToday() {self._mDistanceToday = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mSyncType: UInt32? = nil
  fileprivate var _mDistanceToday: UInt32? = nil
}

///设置来电转移模式和号码   
struct Caring_set_transfer_phone_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1 开启 0 关闭
  var mPhone: UInt32 {
    get {return _mPhone ?? 0}
    set {_mPhone = newValue}
  }
  /// Returns true if `mPhone` has been explicitly set.
  var hasMPhone: Bool {return self._mPhone != nil}
  /// Clears the value of `mPhone`. Subsequent reads from it will return its default value.
  mutating func clearMPhone() {self._mPhone = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mPhone: UInt32? = nil
}

///查询是否可以发送该表盘。
struct Caring_set_check_dail_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mType: UInt32 {
    get {return _mType ?? 0}
    set {_mType = newValue}
  }
  /// Returns true if `mType` has been explicitly set.
  var hasMType: Bool {return self._mType != nil}
  /// Clears the value of `mType`. Subsequent reads from it will return its default value.
  mutating func clearMType() {self._mType = nil}

  var mDataLength: UInt32 {
    get {return _mDataLength ?? 0}
    set {_mDataLength = newValue}
  }
  /// Returns true if `mDataLength` has been explicitly set.
  var hasMDataLength: Bool {return self._mDataLength != nil}
  /// Clears the value of `mDataLength`. Subsequent reads from it will return its default value.
  mutating func clearMDataLength() {self._mDataLength = nil}

  var mCrcCode: UInt32 {
    get {return _mCrcCode ?? 0}
    set {_mCrcCode = newValue}
  }
  /// Returns true if `mCrcCode` has been explicitly set.
  var hasMCrcCode: Bool {return self._mCrcCode != nil}
  /// Clears the value of `mCrcCode`. Subsequent reads from it will return its default value.
  mutating func clearMCrcCode() {self._mCrcCode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mType: UInt32? = nil
  fileprivate var _mDataLength: UInt32? = nil
  fileprivate var _mCrcCode: UInt32? = nil
}

///发送表盘数据。
struct Caring_set_bin_data_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mSn: UInt32 {
    get {return _mSn ?? 0}
    set {_mSn = newValue}
  }
  /// Returns true if `mSn` has been explicitly set.
  var hasMSn: Bool {return self._mSn != nil}
  /// Clears the value of `mSn`. Subsequent reads from it will return its default value.
  mutating func clearMSn() {self._mSn = nil}

  var mData: Data {
    get {return _mData ?? Data()}
    set {_mData = newValue}
  }
  /// Returns true if `mData` has been explicitly set.
  var hasMData: Bool {return self._mData != nil}
  /// Clears the value of `mData`. Subsequent reads from it will return its default value.
  mutating func clearMData() {self._mData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mSn: UInt32? = nil
  fileprivate var _mData: Data? = nil
}

struct Caring_set_update_spo2_data_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mSpo2Value: UInt32 {
    get {return _mSpo2Value ?? 0}
    set {_mSpo2Value = newValue}
  }
  /// Returns true if `mSpo2Value` has been explicitly set.
  var hasMSpo2Value: Bool {return self._mSpo2Value != nil}
  /// Clears the value of `mSpo2Value`. Subsequent reads from it will return its default value.
  mutating func clearMSpo2Value() {self._mSpo2Value = nil}

  var mSeconds: UInt32 {
    get {return _mSeconds ?? 0}
    set {_mSeconds = newValue}
  }
  /// Returns true if `mSeconds` has been explicitly set.
  var hasMSeconds: Bool {return self._mSeconds != nil}
  /// Clears the value of `mSeconds`. Subsequent reads from it will return its default value.
  mutating func clearMSeconds() {self._mSeconds = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mSpo2Value: UInt32? = nil
  fileprivate var _mSeconds: UInt32? = nil
}

struct Caring_r_sleep_detail_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 1深睡   2 浅睡  3 清醒
  var sleepState: UInt32 {
    get {return _sleepState ?? 0}
    set {_sleepState = newValue}
  }
  /// Returns true if `sleepState` has been explicitly set.
  var hasSleepState: Bool {return self._sleepState != nil}
  /// Clears the value of `sleepState`. Subsequent reads from it will return its default value.
  mutating func clearSleepState() {self._sleepState = nil}

  ///睡眠时间，单位分钟
  var sleepTime: UInt32 {
    get {return _sleepTime ?? 0}
    set {_sleepTime = newValue}
  }
  /// Returns true if `sleepTime` has been explicitly set.
  var hasSleepTime: Bool {return self._sleepTime != nil}
  /// Clears the value of `sleepTime`. Subsequent reads from it will return its default value.
  mutating func clearSleepTime() {self._sleepTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sleepState: UInt32? = nil
  fileprivate var _sleepTime: UInt32? = nil
}

/// 血氧
struct Caring_r_get_spo2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///血氧度
  var spo2: UInt32 {
    get {return _spo2 ?? 0}
    set {_spo2 = newValue}
  }
  /// Returns true if `spo2` has been explicitly set.
  var hasSpo2: Bool {return self._spo2 != nil}
  /// Clears the value of `spo2`. Subsequent reads from it will return its default value.
  mutating func clearSpo2() {self._spo2 = nil}

  ///测量时间
  var measureTime: UInt32 {
    get {return _measureTime ?? 0}
    set {_measureTime = newValue}
  }
  /// Returns true if `measureTime` has been explicitly set.
  var hasMeasureTime: Bool {return self._measureTime != nil}
  /// Clears the value of `measureTime`. Subsequent reads from it will return its default value.
  mutating func clearMeasureTime() {self._measureTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _spo2: UInt32? = nil
  fileprivate var _measureTime: UInt32? = nil
}

///喝水提醒
struct Caring_set_drink_slot_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mDrinkSlot: UInt32 {
    get {return _mDrinkSlot ?? 0}
    set {_mDrinkSlot = newValue}
  }
  /// Returns true if `mDrinkSlot` has been explicitly set.
  var hasMDrinkSlot: Bool {return self._mDrinkSlot != nil}
  /// Clears the value of `mDrinkSlot`. Subsequent reads from it will return its default value.
  mutating func clearMDrinkSlot() {self._mDrinkSlot = nil}

  var mStartTime: UInt32 {
    get {return _mStartTime ?? 0}
    set {_mStartTime = newValue}
  }
  /// Returns true if `mStartTime` has been explicitly set.
  var hasMStartTime: Bool {return self._mStartTime != nil}
  /// Clears the value of `mStartTime`. Subsequent reads from it will return its default value.
  mutating func clearMStartTime() {self._mStartTime = nil}

  var mEndTime: UInt32 {
    get {return _mEndTime ?? 0}
    set {_mEndTime = newValue}
  }
  /// Returns true if `mEndTime` has been explicitly set.
  var hasMEndTime: Bool {return self._mEndTime != nil}
  /// Clears the value of `mEndTime`. Subsequent reads from it will return its default value.
  mutating func clearMEndTime() {self._mEndTime = nil}

  var mNodisturbStartTime: UInt32 {
    get {return _mNodisturbStartTime ?? 0}
    set {_mNodisturbStartTime = newValue}
  }
  /// Returns true if `mNodisturbStartTime` has been explicitly set.
  var hasMNodisturbStartTime: Bool {return self._mNodisturbStartTime != nil}
  /// Clears the value of `mNodisturbStartTime`. Subsequent reads from it will return its default value.
  mutating func clearMNodisturbStartTime() {self._mNodisturbStartTime = nil}

  var mNodisturbEndTime: UInt32 {
    get {return _mNodisturbEndTime ?? 0}
    set {_mNodisturbEndTime = newValue}
  }
  /// Returns true if `mNodisturbEndTime` has been explicitly set.
  var hasMNodisturbEndTime: Bool {return self._mNodisturbEndTime != nil}
  /// Clears the value of `mNodisturbEndTime`. Subsequent reads from it will return its default value.
  mutating func clearMNodisturbEndTime() {self._mNodisturbEndTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mDrinkSlot: UInt32? = nil
  fileprivate var _mStartTime: UInt32? = nil
  fileprivate var _mEndTime: UInt32? = nil
  fileprivate var _mNodisturbStartTime: UInt32? = nil
  fileprivate var _mNodisturbEndTime: UInt32? = nil
}

///免打扰
struct Caring_set_notdisturb_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///YJ：类型是否正常？
  var mNotdisturbTime1: Data {
    get {return _mNotdisturbTime1 ?? Data()}
    set {_mNotdisturbTime1 = newValue}
  }
  /// Returns true if `mNotdisturbTime1` has been explicitly set.
  var hasMNotdisturbTime1: Bool {return self._mNotdisturbTime1 != nil}
  /// Clears the value of `mNotdisturbTime1`. Subsequent reads from it will return its default value.
  mutating func clearMNotdisturbTime1() {self._mNotdisturbTime1 = nil}

  ///YJ：类型是否正常？
  var mNotdisturbTime2: Data {
    get {return _mNotdisturbTime2 ?? Data()}
    set {_mNotdisturbTime2 = newValue}
  }
  /// Returns true if `mNotdisturbTime2` has been explicitly set.
  var hasMNotdisturbTime2: Bool {return self._mNotdisturbTime2 != nil}
  /// Clears the value of `mNotdisturbTime2`. Subsequent reads from it will return its default value.
  mutating func clearMNotdisturbTime2() {self._mNotdisturbTime2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mNotdisturbTime1: Data? = nil
  fileprivate var _mNotdisturbTime2: Data? = nil
}

struct Caring_set_bright_times_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mBrightTime: UInt32 {
    get {return _mBrightTime ?? 0}
    set {_mBrightTime = newValue}
  }
  /// Returns true if `mBrightTime` has been explicitly set.
  var hasMBrightTime: Bool {return self._mBrightTime != nil}
  /// Clears the value of `mBrightTime`. Subsequent reads from it will return its default value.
  mutating func clearMBrightTime() {self._mBrightTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mBrightTime: UInt32? = nil
}

struct Caring_r_get_hr_value_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mHrValue: UInt32 {
    get {return _mHrValue ?? 0}
    set {_mHrValue = newValue}
  }
  /// Returns true if `mHrValue` has been explicitly set.
  var hasMHrValue: Bool {return self._mHrValue != nil}
  /// Clears the value of `mHrValue`. Subsequent reads from it will return its default value.
  mutating func clearMHrValue() {self._mHrValue = nil}

  var mErrCode: UInt32 {
    get {return _mErrCode ?? 0}
    set {_mErrCode = newValue}
  }
  /// Returns true if `mErrCode` has been explicitly set.
  var hasMErrCode: Bool {return self._mErrCode != nil}
  /// Clears the value of `mErrCode`. Subsequent reads from it will return its default value.
  mutating func clearMErrCode() {self._mErrCode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mHrValue: UInt32? = nil
  fileprivate var _mErrCode: UInt32? = nil
}

struct Caring_set_notify_warning_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mNotifyType: UInt32 {
    get {return _mNotifyType ?? 0}
    set {_mNotifyType = newValue}
  }
  /// Returns true if `mNotifyType` has been explicitly set.
  var hasMNotifyType: Bool {return self._mNotifyType != nil}
  /// Clears the value of `mNotifyType`. Subsequent reads from it will return its default value.
  mutating func clearMNotifyType() {self._mNotifyType = nil}

  var mTitleLen: UInt32 {
    get {return _mTitleLen ?? 0}
    set {_mTitleLen = newValue}
  }
  /// Returns true if `mTitleLen` has been explicitly set.
  var hasMTitleLen: Bool {return self._mTitleLen != nil}
  /// Clears the value of `mTitleLen`. Subsequent reads from it will return its default value.
  mutating func clearMTitleLen() {self._mTitleLen = nil}

  var mMsgLen: UInt32 {
    get {return _mMsgLen ?? 0}
    set {_mMsgLen = newValue}
  }
  /// Returns true if `mMsgLen` has been explicitly set.
  var hasMMsgLen: Bool {return self._mMsgLen != nil}
  /// Clears the value of `mMsgLen`. Subsequent reads from it will return its default value.
  mutating func clearMMsgLen() {self._mMsgLen = nil}

  var mReserved: Data {
    get {return _mReserved ?? Data()}
    set {_mReserved = newValue}
  }
  /// Returns true if `mReserved` has been explicitly set.
  var hasMReserved: Bool {return self._mReserved != nil}
  /// Clears the value of `mReserved`. Subsequent reads from it will return its default value.
  mutating func clearMReserved() {self._mReserved = nil}

  var mTitle: Data {
    get {return _mTitle ?? Data()}
    set {_mTitle = newValue}
  }
  /// Returns true if `mTitle` has been explicitly set.
  var hasMTitle: Bool {return self._mTitle != nil}
  /// Clears the value of `mTitle`. Subsequent reads from it will return its default value.
  mutating func clearMTitle() {self._mTitle = nil}

  var mMsg: Data {
    get {return _mMsg ?? Data()}
    set {_mMsg = newValue}
  }
  /// Returns true if `mMsg` has been explicitly set.
  var hasMMsg: Bool {return self._mMsg != nil}
  /// Clears the value of `mMsg`. Subsequent reads from it will return its default value.
  mutating func clearMMsg() {self._mMsg = nil}

  var mUtc: UInt32 {
    get {return _mUtc ?? 0}
    set {_mUtc = newValue}
  }
  /// Returns true if `mUtc` has been explicitly set.
  var hasMUtc: Bool {return self._mUtc != nil}
  /// Clears the value of `mUtc`. Subsequent reads from it will return its default value.
  mutating func clearMUtc() {self._mUtc = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mNotifyType: UInt32? = nil
  fileprivate var _mTitleLen: UInt32? = nil
  fileprivate var _mMsgLen: UInt32? = nil
  fileprivate var _mReserved: Data? = nil
  fileprivate var _mTitle: Data? = nil
  fileprivate var _mMsg: Data? = nil
  fileprivate var _mUtc: UInt32? = nil
}

///同步用户信息
struct Caring_sync_user_info_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mUserid: UInt32 {
    get {return _mUserid ?? 0}
    set {_mUserid = newValue}
  }
  /// Returns true if `mUserid` has been explicitly set.
  var hasMUserid: Bool {return self._mUserid != nil}
  /// Clears the value of `mUserid`. Subsequent reads from it will return its default value.
  mutating func clearMUserid() {self._mUserid = nil}

  var mGender: UInt32 {
    get {return _mGender ?? 0}
    set {_mGender = newValue}
  }
  /// Returns true if `mGender` has been explicitly set.
  var hasMGender: Bool {return self._mGender != nil}
  /// Clears the value of `mGender`. Subsequent reads from it will return its default value.
  mutating func clearMGender() {self._mGender = nil}

  var mAge: UInt32 {
    get {return _mAge ?? 0}
    set {_mAge = newValue}
  }
  /// Returns true if `mAge` has been explicitly set.
  var hasMAge: Bool {return self._mAge != nil}
  /// Clears the value of `mAge`. Subsequent reads from it will return its default value.
  mutating func clearMAge() {self._mAge = nil}

  var mHeight: UInt32 {
    get {return _mHeight ?? 0}
    set {_mHeight = newValue}
  }
  /// Returns true if `mHeight` has been explicitly set.
  var hasMHeight: Bool {return self._mHeight != nil}
  /// Clears the value of `mHeight`. Subsequent reads from it will return its default value.
  mutating func clearMHeight() {self._mHeight = nil}

  var mWeight: UInt32 {
    get {return _mWeight ?? 0}
    set {_mWeight = newValue}
  }
  /// Returns true if `mWeight` has been explicitly set.
  var hasMWeight: Bool {return self._mWeight != nil}
  /// Clears the value of `mWeight`. Subsequent reads from it will return its default value.
  mutating func clearMWeight() {self._mWeight = nil}

  var mWearstyle: UInt32 {
    get {return _mWearstyle ?? 0}
    set {_mWearstyle = newValue}
  }
  /// Returns true if `mWearstyle` has been explicitly set.
  var hasMWearstyle: Bool {return self._mWearstyle != nil}
  /// Clears the value of `mWearstyle`. Subsequent reads from it will return its default value.
  mutating func clearMWearstyle() {self._mWearstyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mUserid: UInt32? = nil
  fileprivate var _mGender: UInt32? = nil
  fileprivate var _mAge: UInt32? = nil
  fileprivate var _mHeight: UInt32? = nil
  fileprivate var _mWeight: UInt32? = nil
  fileprivate var _mWearstyle: UInt32? = nil
}

struct Caring_r_get_power_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mErrCode: UInt32 {
    get {return _mErrCode ?? 0}
    set {_mErrCode = newValue}
  }
  /// Returns true if `mErrCode` has been explicitly set.
  var hasMErrCode: Bool {return self._mErrCode != nil}
  /// Clears the value of `mErrCode`. Subsequent reads from it will return its default value.
  mutating func clearMErrCode() {self._mErrCode = nil}

  var mPower: UInt32 {
    get {return _mPower ?? 0}
    set {_mPower = newValue}
  }
  /// Returns true if `mPower` has been explicitly set.
  var hasMPower: Bool {return self._mPower != nil}
  /// Clears the value of `mPower`. Subsequent reads from it will return its default value.
  mutating func clearMPower() {self._mPower = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mErrCode: UInt32? = nil
  fileprivate var _mPower: UInt32? = nil
}

struct Caring_set_updata_fw_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mNewVersion: UInt32 {
    get {return _mNewVersion ?? 0}
    set {_mNewVersion = newValue}
  }
  /// Returns true if `mNewVersion` has been explicitly set.
  var hasMNewVersion: Bool {return self._mNewVersion != nil}
  /// Clears the value of `mNewVersion`. Subsequent reads from it will return its default value.
  mutating func clearMNewVersion() {self._mNewVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mNewVersion: UInt32? = nil
}

struct Caring_r_get_weather_info_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mLat: UInt32 {
    get {return _mLat ?? 0}
    set {_mLat = newValue}
  }
  /// Returns true if `mLat` has been explicitly set.
  var hasMLat: Bool {return self._mLat != nil}
  /// Clears the value of `mLat`. Subsequent reads from it will return its default value.
  mutating func clearMLat() {self._mLat = nil}

  var mLng: UInt32 {
    get {return _mLng ?? 0}
    set {_mLng = newValue}
  }
  /// Returns true if `mLng` has been explicitly set.
  var hasMLng: Bool {return self._mLng != nil}
  /// Clears the value of `mLng`. Subsequent reads from it will return its default value.
  mutating func clearMLng() {self._mLng = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mLat: UInt32? = nil
  fileprivate var _mLng: UInt32? = nil
}

struct Caring_set_sport_status_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mSportMode: UInt32 {
    get {return _mSportMode ?? 0}
    set {_mSportMode = newValue}
  }
  /// Returns true if `mSportMode` has been explicitly set.
  var hasMSportMode: Bool {return self._mSportMode != nil}
  /// Clears the value of `mSportMode`. Subsequent reads from it will return its default value.
  mutating func clearMSportMode() {self._mSportMode = nil}

  var mSportStatus: UInt32 {
    get {return _mSportStatus ?? 0}
    set {_mSportStatus = newValue}
  }
  /// Returns true if `mSportStatus` has been explicitly set.
  var hasMSportStatus: Bool {return self._mSportStatus != nil}
  /// Clears the value of `mSportStatus`. Subsequent reads from it will return its default value.
  mutating func clearMSportStatus() {self._mSportStatus = nil}

  var mSportSpeed: UInt32 {
    get {return _mSportSpeed ?? 0}
    set {_mSportSpeed = newValue}
  }
  /// Returns true if `mSportSpeed` has been explicitly set.
  var hasMSportSpeed: Bool {return self._mSportSpeed != nil}
  /// Clears the value of `mSportSpeed`. Subsequent reads from it will return its default value.
  mutating func clearMSportSpeed() {self._mSportSpeed = nil}

  var mSportDistance: Float {
    get {return _mSportDistance ?? 0}
    set {_mSportDistance = newValue}
  }
  /// Returns true if `mSportDistance` has been explicitly set.
  var hasMSportDistance: Bool {return self._mSportDistance != nil}
  /// Clears the value of `mSportDistance`. Subsequent reads from it will return its default value.
  mutating func clearMSportDistance() {self._mSportDistance = nil}

  var mSportCalorie: UInt32 {
    get {return _mSportCalorie ?? 0}
    set {_mSportCalorie = newValue}
  }
  /// Returns true if `mSportCalorie` has been explicitly set.
  var hasMSportCalorie: Bool {return self._mSportCalorie != nil}
  /// Clears the value of `mSportCalorie`. Subsequent reads from it will return its default value.
  mutating func clearMSportCalorie() {self._mSportCalorie = nil}

  var mSportFlag: UInt32 {
    get {return _mSportFlag ?? 0}
    set {_mSportFlag = newValue}
  }
  /// Returns true if `mSportFlag` has been explicitly set.
  var hasMSportFlag: Bool {return self._mSportFlag != nil}
  /// Clears the value of `mSportFlag`. Subsequent reads from it will return its default value.
  mutating func clearMSportFlag() {self._mSportFlag = nil}

  var mSportDuration: UInt32 {
    get {return _mSportDuration ?? 0}
    set {_mSportDuration = newValue}
  }
  /// Returns true if `mSportDuration` has been explicitly set.
  var hasMSportDuration: Bool {return self._mSportDuration != nil}
  /// Clears the value of `mSportDuration`. Subsequent reads from it will return its default value.
  mutating func clearMSportDuration() {self._mSportDuration = nil}

  var mSportSecond: UInt32 {
    get {return _mSportSecond ?? 0}
    set {_mSportSecond = newValue}
  }
  /// Returns true if `mSportSecond` has been explicitly set.
  var hasMSportSecond: Bool {return self._mSportSecond != nil}
  /// Clears the value of `mSportSecond`. Subsequent reads from it will return its default value.
  mutating func clearMSportSecond() {self._mSportSecond = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mSportMode: UInt32? = nil
  fileprivate var _mSportStatus: UInt32? = nil
  fileprivate var _mSportSpeed: UInt32? = nil
  fileprivate var _mSportDistance: Float? = nil
  fileprivate var _mSportCalorie: UInt32? = nil
  fileprivate var _mSportFlag: UInt32? = nil
  fileprivate var _mSportDuration: UInt32? = nil
  fileprivate var _mSportSecond: UInt32? = nil
}

struct Caring_r_get_sport_data_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mSportMode: UInt32 {
    get {return _mSportMode ?? 0}
    set {_mSportMode = newValue}
  }
  /// Returns true if `mSportMode` has been explicitly set.
  var hasMSportMode: Bool {return self._mSportMode != nil}
  /// Clears the value of `mSportMode`. Subsequent reads from it will return its default value.
  mutating func clearMSportMode() {self._mSportMode = nil}

  var mSportStatus: UInt32 {
    get {return _mSportStatus ?? 0}
    set {_mSportStatus = newValue}
  }
  /// Returns true if `mSportStatus` has been explicitly set.
  var hasMSportStatus: Bool {return self._mSportStatus != nil}
  /// Clears the value of `mSportStatus`. Subsequent reads from it will return its default value.
  mutating func clearMSportStatus() {self._mSportStatus = nil}

  var mSportStep: UInt32 {
    get {return _mSportStep ?? 0}
    set {_mSportStep = newValue}
  }
  /// Returns true if `mSportStep` has been explicitly set.
  var hasMSportStep: Bool {return self._mSportStep != nil}
  /// Clears the value of `mSportStep`. Subsequent reads from it will return its default value.
  mutating func clearMSportStep() {self._mSportStep = nil}

  var mSportCalorie: UInt32 {
    get {return _mSportCalorie ?? 0}
    set {_mSportCalorie = newValue}
  }
  /// Returns true if `mSportCalorie` has been explicitly set.
  var hasMSportCalorie: Bool {return self._mSportCalorie != nil}
  /// Clears the value of `mSportCalorie`. Subsequent reads from it will return its default value.
  mutating func clearMSportCalorie() {self._mSportCalorie = nil}

  var mSportHeart: UInt32 {
    get {return _mSportHeart ?? 0}
    set {_mSportHeart = newValue}
  }
  /// Returns true if `mSportHeart` has been explicitly set.
  var hasMSportHeart: Bool {return self._mSportHeart != nil}
  /// Clears the value of `mSportHeart`. Subsequent reads from it will return its default value.
  mutating func clearMSportHeart() {self._mSportHeart = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mSportMode: UInt32? = nil
  fileprivate var _mSportStatus: UInt32? = nil
  fileprivate var _mSportStep: UInt32? = nil
  fileprivate var _mSportCalorie: UInt32? = nil
  fileprivate var _mSportHeart: UInt32? = nil
}

struct Caring_set_music_info_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mMusicCtrCode: UInt32 {
    get {return _mMusicCtrCode ?? 0}
    set {_mMusicCtrCode = newValue}
  }
  /// Returns true if `mMusicCtrCode` has been explicitly set.
  var hasMMusicCtrCode: Bool {return self._mMusicCtrCode != nil}
  /// Clears the value of `mMusicCtrCode`. Subsequent reads from it will return its default value.
  mutating func clearMMusicCtrCode() {self._mMusicCtrCode = nil}

  var mMusicVolume: UInt32 {
    get {return _mMusicVolume ?? 0}
    set {_mMusicVolume = newValue}
  }
  /// Returns true if `mMusicVolume` has been explicitly set.
  var hasMMusicVolume: Bool {return self._mMusicVolume != nil}
  /// Clears the value of `mMusicVolume`. Subsequent reads from it will return its default value.
  mutating func clearMMusicVolume() {self._mMusicVolume = nil}

  var mMusicTitle: Data {
    get {return _mMusicTitle ?? Data()}
    set {_mMusicTitle = newValue}
  }
  /// Returns true if `mMusicTitle` has been explicitly set.
  var hasMMusicTitle: Bool {return self._mMusicTitle != nil}
  /// Clears the value of `mMusicTitle`. Subsequent reads from it will return its default value.
  mutating func clearMMusicTitle() {self._mMusicTitle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mMusicCtrCode: UInt32? = nil
  fileprivate var _mMusicVolume: UInt32? = nil
  fileprivate var _mMusicTitle: Data? = nil
}

struct Caring_r_get_mtu_size_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mErrCode: UInt32 {
    get {return _mErrCode ?? 0}
    set {_mErrCode = newValue}
  }
  /// Returns true if `mErrCode` has been explicitly set.
  var hasMErrCode: Bool {return self._mErrCode != nil}
  /// Clears the value of `mErrCode`. Subsequent reads from it will return its default value.
  mutating func clearMErrCode() {self._mErrCode = nil}

  var mMtu: UInt32 {
    get {return _mMtu ?? 0}
    set {_mMtu = newValue}
  }
  /// Returns true if `mMtu` has been explicitly set.
  var hasMMtu: Bool {return self._mMtu != nil}
  /// Clears the value of `mMtu`. Subsequent reads from it will return its default value.
  mutating func clearMMtu() {self._mMtu = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mErrCode: UInt32? = nil
  fileprivate var _mMtu: UInt32? = nil
}

struct Caring_r_get_watch_info_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mErrCode: UInt32 {
    get {return _mErrCode ?? 0}
    set {_mErrCode = newValue}
  }
  /// Returns true if `mErrCode` has been explicitly set.
  var hasMErrCode: Bool {return self._mErrCode != nil}
  /// Clears the value of `mErrCode`. Subsequent reads from it will return its default value.
  mutating func clearMErrCode() {self._mErrCode = nil}

  var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mErrCode: UInt32? = nil
  fileprivate var _id: UInt32? = nil
}

struct Caring_set_rtimehr_dur_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mHrDuration: UInt32 {
    get {return _mHrDuration ?? 0}
    set {_mHrDuration = newValue}
  }
  /// Returns true if `mHrDuration` has been explicitly set.
  var hasMHrDuration: Bool {return self._mHrDuration != nil}
  /// Clears the value of `mHrDuration`. Subsequent reads from it will return its default value.
  mutating func clearMHrDuration() {self._mHrDuration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mHrDuration: UInt32? = nil
}

struct Caring_r_rtimehr_value_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mHrValue: UInt32 {
    get {return _mHrValue ?? 0}
    set {_mHrValue = newValue}
  }
  /// Returns true if `mHrValue` has been explicitly set.
  var hasMHrValue: Bool {return self._mHrValue != nil}
  /// Clears the value of `mHrValue`. Subsequent reads from it will return its default value.
  mutating func clearMHrValue() {self._mHrValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mHrValue: UInt32? = nil
}

struct Caring_r_error_code_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var err: UInt32 {
    get {return _err ?? 0}
    set {_err = newValue}
  }
  /// Returns true if `err` has been explicitly set.
  var hasErr: Bool {return self._err != nil}
  /// Clears the value of `err`. Subsequent reads from it will return its default value.
  mutating func clearErr() {self._err = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _err: UInt32? = nil
}

struct Caring_r_find_phone_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mRingStatus: UInt32 {
    get {return _mRingStatus ?? 0}
    set {_mRingStatus = newValue}
  }
  /// Returns true if `mRingStatus` has been explicitly set.
  var hasMRingStatus: Bool {return self._mRingStatus != nil}
  /// Clears the value of `mRingStatus`. Subsequent reads from it will return its default value.
  mutating func clearMRingStatus() {self._mRingStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mRingStatus: UInt32? = nil
}

struct Caring_r_get_disturb_en_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mDisturbEn: UInt32 {
    get {return _mDisturbEn ?? 0}
    set {_mDisturbEn = newValue}
  }
  /// Returns true if `mDisturbEn` has been explicitly set.
  var hasMDisturbEn: Bool {return self._mDisturbEn != nil}
  /// Clears the value of `mDisturbEn`. Subsequent reads from it will return its default value.
  mutating func clearMDisturbEn() {self._mDisturbEn = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mDisturbEn: UInt32? = nil
}

struct Caring_r_get_step_count_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mStepCount: UInt32 {
    get {return _mStepCount ?? 0}
    set {_mStepCount = newValue}
  }
  /// Returns true if `mStepCount` has been explicitly set.
  var hasMStepCount: Bool {return self._mStepCount != nil}
  /// Clears the value of `mStepCount`. Subsequent reads from it will return its default value.
  mutating func clearMStepCount() {self._mStepCount = nil}

  var mTimeSecond: UInt32 {
    get {return _mTimeSecond ?? 0}
    set {_mTimeSecond = newValue}
  }
  /// Returns true if `mTimeSecond` has been explicitly set.
  var hasMTimeSecond: Bool {return self._mTimeSecond != nil}
  /// Clears the value of `mTimeSecond`. Subsequent reads from it will return its default value.
  mutating func clearMTimeSecond() {self._mTimeSecond = nil}

  var mStepCalorie: UInt32 {
    get {return _mStepCalorie ?? 0}
    set {_mStepCalorie = newValue}
  }
  /// Returns true if `mStepCalorie` has been explicitly set.
  var hasMStepCalorie: Bool {return self._mStepCalorie != nil}
  /// Clears the value of `mStepCalorie`. Subsequent reads from it will return its default value.
  mutating func clearMStepCalorie() {self._mStepCalorie = nil}

  var mStepDistance: UInt32 {
    get {return _mStepDistance ?? 0}
    set {_mStepDistance = newValue}
  }
  /// Returns true if `mStepDistance` has been explicitly set.
  var hasMStepDistance: Bool {return self._mStepDistance != nil}
  /// Clears the value of `mStepDistance`. Subsequent reads from it will return its default value.
  mutating func clearMStepDistance() {self._mStepDistance = nil}

  var mActiveduration: UInt32 {
    get {return _mActiveduration ?? 0}
    set {_mActiveduration = newValue}
  }
  /// Returns true if `mActiveduration` has been explicitly set.
  var hasMActiveduration: Bool {return self._mActiveduration != nil}
  /// Clears the value of `mActiveduration`. Subsequent reads from it will return its default value.
  mutating func clearMActiveduration() {self._mActiveduration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mStepCount: UInt32? = nil
  fileprivate var _mTimeSecond: UInt32? = nil
  fileprivate var _mStepCalorie: UInt32? = nil
  fileprivate var _mStepDistance: UInt32? = nil
  fileprivate var _mActiveduration: UInt32? = nil
}

struct Caring_r_get_current_hr_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mCurrentHr: UInt32 {
    get {return _mCurrentHr ?? 0}
    set {_mCurrentHr = newValue}
  }
  /// Returns true if `mCurrentHr` has been explicitly set.
  var hasMCurrentHr: Bool {return self._mCurrentHr != nil}
  /// Clears the value of `mCurrentHr`. Subsequent reads from it will return its default value.
  mutating func clearMCurrentHr() {self._mCurrentHr = nil}

  var mCurSportStatus: UInt32 {
    get {return _mCurSportStatus ?? 0}
    set {_mCurSportStatus = newValue}
  }
  /// Returns true if `mCurSportStatus` has been explicitly set.
  var hasMCurSportStatus: Bool {return self._mCurSportStatus != nil}
  /// Clears the value of `mCurSportStatus`. Subsequent reads from it will return its default value.
  mutating func clearMCurSportStatus() {self._mCurSportStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mCurrentHr: UInt32? = nil
  fileprivate var _mCurSportStatus: UInt32? = nil
}

struct Caring_r_set_light_leak_result_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mCheckResult: UInt32 {
    get {return _mCheckResult ?? 0}
    set {_mCheckResult = newValue}
  }
  /// Returns true if `mCheckResult` has been explicitly set.
  var hasMCheckResult: Bool {return self._mCheckResult != nil}
  /// Clears the value of `mCheckResult`. Subsequent reads from it will return its default value.
  mutating func clearMCheckResult() {self._mCheckResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mCheckResult: UInt32? = nil
}

struct Caring_r_get_log_info_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mLogLength: UInt32 {
    get {return _mLogLength ?? 0}
    set {_mLogLength = newValue}
  }
  /// Returns true if `mLogLength` has been explicitly set.
  var hasMLogLength: Bool {return self._mLogLength != nil}
  /// Clears the value of `mLogLength`. Subsequent reads from it will return its default value.
  mutating func clearMLogLength() {self._mLogLength = nil}

  var mLogSn: UInt32 {
    get {return _mLogSn ?? 0}
    set {_mLogSn = newValue}
  }
  /// Returns true if `mLogSn` has been explicitly set.
  var hasMLogSn: Bool {return self._mLogSn != nil}
  /// Clears the value of `mLogSn`. Subsequent reads from it will return its default value.
  mutating func clearMLogSn() {self._mLogSn = nil}

  var mLogData: Data {
    get {return _mLogData ?? Data()}
    set {_mLogData = newValue}
  }
  /// Returns true if `mLogData` has been explicitly set.
  var hasMLogData: Bool {return self._mLogData != nil}
  /// Clears the value of `mLogData`. Subsequent reads from it will return its default value.
  mutating func clearMLogData() {self._mLogData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mLogLength: UInt32? = nil
  fileprivate var _mLogSn: UInt32? = nil
  fileprivate var _mLogData: Data? = nil
}

struct Caring_r_set_active_info_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mActStartTime: UInt32 {
    get {return _mActStartTime ?? 0}
    set {_mActStartTime = newValue}
  }
  /// Returns true if `mActStartTime` has been explicitly set.
  var hasMActStartTime: Bool {return self._mActStartTime != nil}
  /// Clears the value of `mActStartTime`. Subsequent reads from it will return its default value.
  mutating func clearMActStartTime() {self._mActStartTime = nil}

  var mActEndTime: UInt32 {
    get {return _mActEndTime ?? 0}
    set {_mActEndTime = newValue}
  }
  /// Returns true if `mActEndTime` has been explicitly set.
  var hasMActEndTime: Bool {return self._mActEndTime != nil}
  /// Clears the value of `mActEndTime`. Subsequent reads from it will return its default value.
  mutating func clearMActEndTime() {self._mActEndTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mActStartTime: UInt32? = nil
  fileprivate var _mActEndTime: UInt32? = nil
}

struct Caring_r_get_active_record_data_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mCountNum: UInt32 {
    get {return _storage._mCountNum ?? 0}
    set {_uniqueStorage()._mCountNum = newValue}
  }
  /// Returns true if `mCountNum` has been explicitly set.
  var hasMCountNum: Bool {return _storage._mCountNum != nil}
  /// Clears the value of `mCountNum`. Subsequent reads from it will return its default value.
  mutating func clearMCountNum() {_uniqueStorage()._mCountNum = nil}

  var mTotalLength: UInt32 {
    get {return _storage._mTotalLength ?? 0}
    set {_uniqueStorage()._mTotalLength = newValue}
  }
  /// Returns true if `mTotalLength` has been explicitly set.
  var hasMTotalLength: Bool {return _storage._mTotalLength != nil}
  /// Clears the value of `mTotalLength`. Subsequent reads from it will return its default value.
  mutating func clearMTotalLength() {_uniqueStorage()._mTotalLength = nil}

  var mActiveStartSecond: UInt32 {
    get {return _storage._mActiveStartSecond ?? 0}
    set {_uniqueStorage()._mActiveStartSecond = newValue}
  }
  /// Returns true if `mActiveStartSecond` has been explicitly set.
  var hasMActiveStartSecond: Bool {return _storage._mActiveStartSecond != nil}
  /// Clears the value of `mActiveStartSecond`. Subsequent reads from it will return its default value.
  mutating func clearMActiveStartSecond() {_uniqueStorage()._mActiveStartSecond = nil}

  var mActiveHrCount: UInt32 {
    get {return _storage._mActiveHrCount ?? 0}
    set {_uniqueStorage()._mActiveHrCount = newValue}
  }
  /// Returns true if `mActiveHrCount` has been explicitly set.
  var hasMActiveHrCount: Bool {return _storage._mActiveHrCount != nil}
  /// Clears the value of `mActiveHrCount`. Subsequent reads from it will return its default value.
  mutating func clearMActiveHrCount() {_uniqueStorage()._mActiveHrCount = nil}

  var mActiveType: UInt32 {
    get {return _storage._mActiveType ?? 0}
    set {_uniqueStorage()._mActiveType = newValue}
  }
  /// Returns true if `mActiveType` has been explicitly set.
  var hasMActiveType: Bool {return _storage._mActiveType != nil}
  /// Clears the value of `mActiveType`. Subsequent reads from it will return its default value.
  mutating func clearMActiveType() {_uniqueStorage()._mActiveType = nil}

  var mActiveStep: UInt32 {
    get {return _storage._mActiveStep ?? 0}
    set {_uniqueStorage()._mActiveStep = newValue}
  }
  /// Returns true if `mActiveStep` has been explicitly set.
  var hasMActiveStep: Bool {return _storage._mActiveStep != nil}
  /// Clears the value of `mActiveStep`. Subsequent reads from it will return its default value.
  mutating func clearMActiveStep() {_uniqueStorage()._mActiveStep = nil}

  var mActiveDurations: UInt32 {
    get {return _storage._mActiveDurations ?? 0}
    set {_uniqueStorage()._mActiveDurations = newValue}
  }
  /// Returns true if `mActiveDurations` has been explicitly set.
  var hasMActiveDurations: Bool {return _storage._mActiveDurations != nil}
  /// Clears the value of `mActiveDurations`. Subsequent reads from it will return its default value.
  mutating func clearMActiveDurations() {_uniqueStorage()._mActiveDurations = nil}

  var mActiveCalories: UInt32 {
    get {return _storage._mActiveCalories ?? 0}
    set {_uniqueStorage()._mActiveCalories = newValue}
  }
  /// Returns true if `mActiveCalories` has been explicitly set.
  var hasMActiveCalories: Bool {return _storage._mActiveCalories != nil}
  /// Clears the value of `mActiveCalories`. Subsequent reads from it will return its default value.
  mutating func clearMActiveCalories() {_uniqueStorage()._mActiveCalories = nil}

  var mActiveDistance: UInt32 {
    get {return _storage._mActiveDistance ?? 0}
    set {_uniqueStorage()._mActiveDistance = newValue}
  }
  /// Returns true if `mActiveDistance` has been explicitly set.
  var hasMActiveDistance: Bool {return _storage._mActiveDistance != nil}
  /// Clears the value of `mActiveDistance`. Subsequent reads from it will return its default value.
  mutating func clearMActiveDistance() {_uniqueStorage()._mActiveDistance = nil}

  var mActiveAvgHr: UInt32 {
    get {return _storage._mActiveAvgHr ?? 0}
    set {_uniqueStorage()._mActiveAvgHr = newValue}
  }
  /// Returns true if `mActiveAvgHr` has been explicitly set.
  var hasMActiveAvgHr: Bool {return _storage._mActiveAvgHr != nil}
  /// Clears the value of `mActiveAvgHr`. Subsequent reads from it will return its default value.
  mutating func clearMActiveAvgHr() {_uniqueStorage()._mActiveAvgHr = nil}

  var mActiveMaxHr: UInt32 {
    get {return _storage._mActiveMaxHr ?? 0}
    set {_uniqueStorage()._mActiveMaxHr = newValue}
  }
  /// Returns true if `mActiveMaxHr` has been explicitly set.
  var hasMActiveMaxHr: Bool {return _storage._mActiveMaxHr != nil}
  /// Clears the value of `mActiveMaxHr`. Subsequent reads from it will return its default value.
  mutating func clearMActiveMaxHr() {_uniqueStorage()._mActiveMaxHr = nil}

  var mBurnFatMins: UInt32 {
    get {return _storage._mBurnFatMins ?? 0}
    set {_uniqueStorage()._mBurnFatMins = newValue}
  }
  /// Returns true if `mBurnFatMins` has been explicitly set.
  var hasMBurnFatMins: Bool {return _storage._mBurnFatMins != nil}
  /// Clears the value of `mBurnFatMins`. Subsequent reads from it will return its default value.
  mutating func clearMBurnFatMins() {_uniqueStorage()._mBurnFatMins = nil}

  var mAerobicMins: UInt32 {
    get {return _storage._mAerobicMins ?? 0}
    set {_uniqueStorage()._mAerobicMins = newValue}
  }
  /// Returns true if `mAerobicMins` has been explicitly set.
  var hasMAerobicMins: Bool {return _storage._mAerobicMins != nil}
  /// Clears the value of `mAerobicMins`. Subsequent reads from it will return its default value.
  mutating func clearMAerobicMins() {_uniqueStorage()._mAerobicMins = nil}

  var mLimitMins: UInt32 {
    get {return _storage._mLimitMins ?? 0}
    set {_uniqueStorage()._mLimitMins = newValue}
  }
  /// Returns true if `mLimitMins` has been explicitly set.
  var hasMLimitMins: Bool {return _storage._mLimitMins != nil}
  /// Clears the value of `mLimitMins`. Subsequent reads from it will return its default value.
  mutating func clearMLimitMins() {_uniqueStorage()._mLimitMins = nil}

  var mIsEffective: UInt32 {
    get {return _storage._mIsEffective ?? 0}
    set {_uniqueStorage()._mIsEffective = newValue}
  }
  /// Returns true if `mIsEffective` has been explicitly set.
  var hasMIsEffective: Bool {return _storage._mIsEffective != nil}
  /// Clears the value of `mIsEffective`. Subsequent reads from it will return its default value.
  mutating func clearMIsEffective() {_uniqueStorage()._mIsEffective = nil}

  var mMagicNum: UInt32 {
    get {return _storage._mMagicNum ?? 0}
    set {_uniqueStorage()._mMagicNum = newValue}
  }
  /// Returns true if `mMagicNum` has been explicitly set.
  var hasMMagicNum: Bool {return _storage._mMagicNum != nil}
  /// Clears the value of `mMagicNum`. Subsequent reads from it will return its default value.
  mutating func clearMMagicNum() {_uniqueStorage()._mMagicNum = nil}

  var mSn: UInt32 {
    get {return _storage._mSn ?? 0}
    set {_uniqueStorage()._mSn = newValue}
  }
  /// Returns true if `mSn` has been explicitly set.
  var hasMSn: Bool {return _storage._mSn != nil}
  /// Clears the value of `mSn`. Subsequent reads from it will return its default value.
  mutating func clearMSn() {_uniqueStorage()._mSn = nil}

  var mHrData: Data {
    get {return _storage._mHrData ?? Data()}
    set {_uniqueStorage()._mHrData = newValue}
  }
  /// Returns true if `mHrData` has been explicitly set.
  var hasMHrData: Bool {return _storage._mHrData != nil}
  /// Clears the value of `mHrData`. Subsequent reads from it will return its default value.
  mutating func clearMHrData() {_uniqueStorage()._mHrData = nil}

  var mActiveSpeed: UInt32 {
    get {return _storage._mActiveSpeed ?? 0}
    set {_uniqueStorage()._mActiveSpeed = newValue}
  }
  /// Returns true if `mActiveSpeed` has been explicitly set.
  var hasMActiveSpeed: Bool {return _storage._mActiveSpeed != nil}
  /// Clears the value of `mActiveSpeed`. Subsequent reads from it will return its default value.
  mutating func clearMActiveSpeed() {_uniqueStorage()._mActiveSpeed = nil}

  var mActiveSwing: UInt32 {
    get {return _storage._mActiveSwing ?? 0}
    set {_uniqueStorage()._mActiveSwing = newValue}
  }
  /// Returns true if `mActiveSwing` has been explicitly set.
  var hasMActiveSwing: Bool {return _storage._mActiveSwing != nil}
  /// Clears the value of `mActiveSwing`. Subsequent reads from it will return its default value.
  mutating func clearMActiveSwing() {_uniqueStorage()._mActiveSwing = nil}

  var mActiveMinHr: UInt32 {
    get {return _storage._mActiveMinHr ?? 0}
    set {_uniqueStorage()._mActiveMinHr = newValue}
  }
  /// Returns true if `mActiveMinHr` has been explicitly set.
  var hasMActiveMinHr: Bool {return _storage._mActiveMinHr != nil}
  /// Clears the value of `mActiveMinHr`. Subsequent reads from it will return its default value.
  mutating func clearMActiveMinHr() {_uniqueStorage()._mActiveMinHr = nil}

  var mActiveSkipTimes: UInt32 {
    get {return _storage._mActiveSkipTimes ?? 0}
    set {_uniqueStorage()._mActiveSkipTimes = newValue}
  }
  /// Returns true if `mActiveSkipTimes` has been explicitly set.
  var hasMActiveSkipTimes: Bool {return _storage._mActiveSkipTimes != nil}
  /// Clears the value of `mActiveSkipTimes`. Subsequent reads from it will return its default value.
  mutating func clearMActiveSkipTimes() {_uniqueStorage()._mActiveSkipTimes = nil}

  var mActiveGpsCount: UInt32 {
    get {return _storage._mActiveGpsCount ?? 0}
    set {_uniqueStorage()._mActiveGpsCount = newValue}
  }
  /// Returns true if `mActiveGpsCount` has been explicitly set.
  var hasMActiveGpsCount: Bool {return _storage._mActiveGpsCount != nil}
  /// Clears the value of `mActiveGpsCount`. Subsequent reads from it will return its default value.
  mutating func clearMActiveGpsCount() {_uniqueStorage()._mActiveGpsCount = nil}

  var mTotalGpsNum: UInt32 {
    get {return _storage._mTotalGpsNum ?? 0}
    set {_uniqueStorage()._mTotalGpsNum = newValue}
  }
  /// Returns true if `mTotalGpsNum` has been explicitly set.
  var hasMTotalGpsNum: Bool {return _storage._mTotalGpsNum != nil}
  /// Clears the value of `mTotalGpsNum`. Subsequent reads from it will return its default value.
  mutating func clearMTotalGpsNum() {_uniqueStorage()._mTotalGpsNum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Caring_r_get_ui_hrs_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mUiActHr: UInt32 {
    get {return _mUiActHr ?? 0}
    set {_mUiActHr = newValue}
  }
  /// Returns true if `mUiActHr` has been explicitly set.
  var hasMUiActHr: Bool {return self._mUiActHr != nil}
  /// Clears the value of `mUiActHr`. Subsequent reads from it will return its default value.
  mutating func clearMUiActHr() {self._mUiActHr = nil}

  var mUiMaxHr: UInt32 {
    get {return _mUiMaxHr ?? 0}
    set {_mUiMaxHr = newValue}
  }
  /// Returns true if `mUiMaxHr` has been explicitly set.
  var hasMUiMaxHr: Bool {return self._mUiMaxHr != nil}
  /// Clears the value of `mUiMaxHr`. Subsequent reads from it will return its default value.
  mutating func clearMUiMaxHr() {self._mUiMaxHr = nil}

  var mUiMinHr: UInt32 {
    get {return _mUiMinHr ?? 0}
    set {_mUiMinHr = newValue}
  }
  /// Returns true if `mUiMinHr` has been explicitly set.
  var hasMUiMinHr: Bool {return self._mUiMinHr != nil}
  /// Clears the value of `mUiMinHr`. Subsequent reads from it will return its default value.
  mutating func clearMUiMinHr() {self._mUiMinHr = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mUiActHr: UInt32? = nil
  fileprivate var _mUiMaxHr: UInt32? = nil
  fileprivate var _mUiMinHr: UInt32? = nil
}

struct Caring_set_nfc_operate_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mNfcOperateCode: UInt32 {
    get {return _mNfcOperateCode ?? 0}
    set {_mNfcOperateCode = newValue}
  }
  /// Returns true if `mNfcOperateCode` has been explicitly set.
  var hasMNfcOperateCode: Bool {return self._mNfcOperateCode != nil}
  /// Clears the value of `mNfcOperateCode`. Subsequent reads from it will return its default value.
  mutating func clearMNfcOperateCode() {self._mNfcOperateCode = nil}

  var mNfcData: Data {
    get {return _mNfcData ?? Data()}
    set {_mNfcData = newValue}
  }
  /// Returns true if `mNfcData` has been explicitly set.
  var hasMNfcData: Bool {return self._mNfcData != nil}
  /// Clears the value of `mNfcData`. Subsequent reads from it will return its default value.
  mutating func clearMNfcData() {self._mNfcData = nil}

  var mNfcErrCode: UInt32 {
    get {return _mNfcErrCode ?? 0}
    set {_mNfcErrCode = newValue}
  }
  /// Returns true if `mNfcErrCode` has been explicitly set.
  var hasMNfcErrCode: Bool {return self._mNfcErrCode != nil}
  /// Clears the value of `mNfcErrCode`. Subsequent reads from it will return its default value.
  mutating func clearMNfcErrCode() {self._mNfcErrCode = nil}

  var mNfcSubOperateCode: UInt32 {
    get {return _mNfcSubOperateCode ?? 0}
    set {_mNfcSubOperateCode = newValue}
  }
  /// Returns true if `mNfcSubOperateCode` has been explicitly set.
  var hasMNfcSubOperateCode: Bool {return self._mNfcSubOperateCode != nil}
  /// Clears the value of `mNfcSubOperateCode`. Subsequent reads from it will return its default value.
  mutating func clearMNfcSubOperateCode() {self._mNfcSubOperateCode = nil}

  var mNfcCity: UInt32 {
    get {return _mNfcCity ?? 0}
    set {_mNfcCity = newValue}
  }
  /// Returns true if `mNfcCity` has been explicitly set.
  var hasMNfcCity: Bool {return self._mNfcCity != nil}
  /// Clears the value of `mNfcCity`. Subsequent reads from it will return its default value.
  mutating func clearMNfcCity() {self._mNfcCity = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mNfcOperateCode: UInt32? = nil
  fileprivate var _mNfcData: Data? = nil
  fileprivate var _mNfcErrCode: UInt32? = nil
  fileprivate var _mNfcSubOperateCode: UInt32? = nil
  fileprivate var _mNfcCity: UInt32? = nil
}

struct Caring_set_page_switch_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mOperateType: UInt32 {
    get {return _mOperateType ?? 0}
    set {_mOperateType = newValue}
  }
  /// Returns true if `mOperateType` has been explicitly set.
  var hasMOperateType: Bool {return self._mOperateType != nil}
  /// Clears the value of `mOperateType`. Subsequent reads from it will return its default value.
  mutating func clearMOperateType() {self._mOperateType = nil}

  var mPageSwitch: UInt32 {
    get {return _mPageSwitch ?? 0}
    set {_mPageSwitch = newValue}
  }
  /// Returns true if `mPageSwitch` has been explicitly set.
  var hasMPageSwitch: Bool {return self._mPageSwitch != nil}
  /// Clears the value of `mPageSwitch`. Subsequent reads from it will return its default value.
  mutating func clearMPageSwitch() {self._mPageSwitch = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mOperateType: UInt32? = nil
  fileprivate var _mPageSwitch: UInt32? = nil
}

struct Caring_set_check_gps_info_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mCheckType: UInt32 {
    get {return _mCheckType ?? 0}
    set {_mCheckType = newValue}
  }
  /// Returns true if `mCheckType` has been explicitly set.
  var hasMCheckType: Bool {return self._mCheckType != nil}
  /// Clears the value of `mCheckType`. Subsequent reads from it will return its default value.
  mutating func clearMCheckType() {self._mCheckType = nil}

  var mFileNum: UInt32 {
    get {return _mFileNum ?? 0}
    set {_mFileNum = newValue}
  }
  /// Returns true if `mFileNum` has been explicitly set.
  var hasMFileNum: Bool {return self._mFileNum != nil}
  /// Clears the value of `mFileNum`. Subsequent reads from it will return its default value.
  mutating func clearMFileNum() {self._mFileNum = nil}

  var mSecond: UInt32 {
    get {return _mSecond ?? 0}
    set {_mSecond = newValue}
  }
  /// Returns true if `mSecond` has been explicitly set.
  var hasMSecond: Bool {return self._mSecond != nil}
  /// Clears the value of `mSecond`. Subsequent reads from it will return its default value.
  mutating func clearMSecond() {self._mSecond = nil}

  var mNewVersion: UInt32 {
    get {return _mNewVersion ?? 0}
    set {_mNewVersion = newValue}
  }
  /// Returns true if `mNewVersion` has been explicitly set.
  var hasMNewVersion: Bool {return self._mNewVersion != nil}
  /// Clears the value of `mNewVersion`. Subsequent reads from it will return its default value.
  mutating func clearMNewVersion() {self._mNewVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mCheckType: UInt32? = nil
  fileprivate var _mFileNum: UInt32? = nil
  fileprivate var _mSecond: UInt32? = nil
  fileprivate var _mNewVersion: UInt32? = nil
}

struct Caring_set_update_gps_data_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mFileName: UInt32 {
    get {return _mFileName ?? 0}
    set {_mFileName = newValue}
  }
  /// Returns true if `mFileName` has been explicitly set.
  var hasMFileName: Bool {return self._mFileName != nil}
  /// Clears the value of `mFileName`. Subsequent reads from it will return its default value.
  mutating func clearMFileName() {self._mFileName = nil}

  var mFileLength: UInt32 {
    get {return _mFileLength ?? 0}
    set {_mFileLength = newValue}
  }
  /// Returns true if `mFileLength` has been explicitly set.
  var hasMFileLength: Bool {return self._mFileLength != nil}
  /// Clears the value of `mFileLength`. Subsequent reads from it will return its default value.
  mutating func clearMFileLength() {self._mFileLength = nil}

  var mSn: UInt32 {
    get {return _mSn ?? 0}
    set {_mSn = newValue}
  }
  /// Returns true if `mSn` has been explicitly set.
  var hasMSn: Bool {return self._mSn != nil}
  /// Clears the value of `mSn`. Subsequent reads from it will return its default value.
  mutating func clearMSn() {self._mSn = nil}

  var mData: Data {
    get {return _mData ?? Data()}
    set {_mData = newValue}
  }
  /// Returns true if `mData` has been explicitly set.
  var hasMData: Bool {return self._mData != nil}
  /// Clears the value of `mData`. Subsequent reads from it will return its default value.
  mutating func clearMData() {self._mData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mFileName: UInt32? = nil
  fileprivate var _mFileLength: UInt32? = nil
  fileprivate var _mSn: UInt32? = nil
  fileprivate var _mData: Data? = nil
}

struct Caring_get_dial_config_data_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mDialID: UInt32 {
    get {return _mDialID ?? 0}
    set {_mDialID = newValue}
  }
  /// Returns true if `mDialID` has been explicitly set.
  var hasMDialID: Bool {return self._mDialID != nil}
  /// Clears the value of `mDialID`. Subsequent reads from it will return its default value.
  mutating func clearMDialID() {self._mDialID = nil}

  var mDialWidth: UInt32 {
    get {return _mDialWidth ?? 0}
    set {_mDialWidth = newValue}
  }
  /// Returns true if `mDialWidth` has been explicitly set.
  var hasMDialWidth: Bool {return self._mDialWidth != nil}
  /// Clears the value of `mDialWidth`. Subsequent reads from it will return its default value.
  mutating func clearMDialWidth() {self._mDialWidth = nil}

  var mDialHeight: UInt32 {
    get {return _mDialHeight ?? 0}
    set {_mDialHeight = newValue}
  }
  /// Returns true if `mDialHeight` has been explicitly set.
  var hasMDialHeight: Bool {return self._mDialHeight != nil}
  /// Clears the value of `mDialHeight`. Subsequent reads from it will return its default value.
  mutating func clearMDialHeight() {self._mDialHeight = nil}

  var mDialForm: UInt32 {
    get {return _mDialForm ?? 0}
    set {_mDialForm = newValue}
  }
  /// Returns true if `mDialForm` has been explicitly set.
  var hasMDialForm: Bool {return self._mDialForm != nil}
  /// Clears the value of `mDialForm`. Subsequent reads from it will return its default value.
  mutating func clearMDialForm() {self._mDialForm = nil}

  var mDialMaxSize: UInt32 {
    get {return _mDialMaxSize ?? 0}
    set {_mDialMaxSize = newValue}
  }
  /// Returns true if `mDialMaxSize` has been explicitly set.
  var hasMDialMaxSize: Bool {return self._mDialMaxSize != nil}
  /// Clears the value of `mDialMaxSize`. Subsequent reads from it will return its default value.
  mutating func clearMDialMaxSize() {self._mDialMaxSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mDialID: UInt32? = nil
  fileprivate var _mDialWidth: UInt32? = nil
  fileprivate var _mDialHeight: UInt32? = nil
  fileprivate var _mDialForm: UInt32? = nil
  fileprivate var _mDialMaxSize: UInt32? = nil
}

struct Caring_set_warming_data_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mType: UInt32 {
    get {return _mType ?? 0}
    set {_mType = newValue}
  }
  /// Returns true if `mType` has been explicitly set.
  var hasMType: Bool {return self._mType != nil}
  /// Clears the value of `mType`. Subsequent reads from it will return its default value.
  mutating func clearMType() {self._mType = nil}

  var mMin: UInt32 {
    get {return _mMin ?? 0}
    set {_mMin = newValue}
  }
  /// Returns true if `mMin` has been explicitly set.
  var hasMMin: Bool {return self._mMin != nil}
  /// Clears the value of `mMin`. Subsequent reads from it will return its default value.
  mutating func clearMMin() {self._mMin = nil}

  var mMax: UInt32 {
    get {return _mMax ?? 0}
    set {_mMax = newValue}
  }
  /// Returns true if `mMax` has been explicitly set.
  var hasMMax: Bool {return self._mMax != nil}
  /// Clears the value of `mMax`. Subsequent reads from it will return its default value.
  mutating func clearMMax() {self._mMax = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mType: UInt32? = nil
  fileprivate var _mMin: UInt32? = nil
  fileprivate var _mMax: UInt32? = nil
}

struct Caring_set_menu_sequence_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mType: UInt32 {
    get {return _mType ?? 0}
    set {_mType = newValue}
  }
  /// Returns true if `mType` has been explicitly set.
  var hasMType: Bool {return self._mType != nil}
  /// Clears the value of `mType`. Subsequent reads from it will return its default value.
  mutating func clearMType() {self._mType = nil}

  var mCount: UInt32 {
    get {return _mCount ?? 0}
    set {_mCount = newValue}
  }
  /// Returns true if `mCount` has been explicitly set.
  var hasMCount: Bool {return self._mCount != nil}
  /// Clears the value of `mCount`. Subsequent reads from it will return its default value.
  mutating func clearMCount() {self._mCount = nil}

  ///YJ：最长长度
  var mData: Data {
    get {return _mData ?? Data()}
    set {_mData = newValue}
  }
  /// Returns true if `mData` has been explicitly set.
  var hasMData: Bool {return self._mData != nil}
  /// Clears the value of `mData`. Subsequent reads from it will return its default value.
  mutating func clearMData() {self._mData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mType: UInt32? = nil
  fileprivate var _mCount: UInt32? = nil
  fileprivate var _mData: Data? = nil
}

struct Caring_r_get_menu_sequence_t {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mType: UInt32 {
    get {return _mType ?? 0}
    set {_mType = newValue}
  }
  /// Returns true if `mType` has been explicitly set.
  var hasMType: Bool {return self._mType != nil}
  /// Clears the value of `mType`. Subsequent reads from it will return its default value.
  mutating func clearMType() {self._mType = nil}

  var mSupport: UInt32 {
    get {return _mSupport ?? 0}
    set {_mSupport = newValue}
  }
  /// Returns true if `mSupport` has been explicitly set.
  var hasMSupport: Bool {return self._mSupport != nil}
  /// Clears the value of `mSupport`. Subsequent reads from it will return its default value.
  mutating func clearMSupport() {self._mSupport = nil}

  var mCount: UInt32 {
    get {return _mCount ?? 0}
    set {_mCount = newValue}
  }
  /// Returns true if `mCount` has been explicitly set.
  var hasMCount: Bool {return self._mCount != nil}
  /// Clears the value of `mCount`. Subsequent reads from it will return its default value.
  mutating func clearMCount() {self._mCount = nil}

  var mData: Data {
    get {return _mData ?? Data()}
    set {_mData = newValue}
  }
  /// Returns true if `mData` has been explicitly set.
  var hasMData: Bool {return self._mData != nil}
  /// Clears the value of `mData`. Subsequent reads from it will return its default value.
  mutating func clearMData() {self._mData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mType: UInt32? = nil
  fileprivate var _mSupport: UInt32? = nil
  fileprivate var _mCount: UInt32? = nil
  fileprivate var _mData: Data? = nil
}

///***********************app or fw send cmd****************
struct Caring_hl_cmds {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///cmd  
  var cmd: Caring_hl_cmds.cmd_t {
    get {return _storage._cmd ?? .cmdBindDevice}
    set {_uniqueStorage()._cmd = newValue}
  }
  /// Returns true if `cmd` has been explicitly set.
  var hasCmd: Bool {return _storage._cmd != nil}
  /// Clears the value of `cmd`. Subsequent reads from it will return its default value.
  mutating func clearCmd() {_uniqueStorage()._cmd = nil}

  var response: Bool {
    get {return _storage._response ?? false}
    set {_uniqueStorage()._response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  var hasResponse: Bool {return _storage._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  mutating func clearResponse() {_uniqueStorage()._response = nil}

  var seconds: UInt32 {
    get {return _storage._seconds ?? 0}
    set {_uniqueStorage()._seconds = newValue}
  }
  /// Returns true if `seconds` has been explicitly set.
  var hasSeconds: Bool {return _storage._seconds != nil}
  /// Clears the value of `seconds`. Subsequent reads from it will return its default value.
  mutating func clearSeconds() {_uniqueStorage()._seconds = nil}

  var timezone: Int32 {
    get {return _storage._timezone ?? 0}
    set {_uniqueStorage()._timezone = newValue}
  }
  /// Returns true if `timezone` has been explicitly set.
  var hasTimezone: Bool {return _storage._timezone != nil}
  /// Clears the value of `timezone`. Subsequent reads from it will return its default value.
  mutating func clearTimezone() {_uniqueStorage()._timezone = nil}

  ///YJ：最长长度
  var clientID: Data {
    get {return _storage._clientID ?? Data()}
    set {_uniqueStorage()._clientID = newValue}
  }
  /// Returns true if `clientID` has been explicitly set.
  var hasClientID: Bool {return _storage._clientID != nil}
  /// Clears the value of `clientID`. Subsequent reads from it will return its default value.
  mutating func clearClientID() {_uniqueStorage()._clientID = nil}

  /// optional set_user_info_t		set_app_info			= 4;
  var rBindDevice: Caring_r_bind_device_t {
    get {return _storage._rBindDevice ?? Caring_r_bind_device_t()}
    set {_uniqueStorage()._rBindDevice = newValue}
  }
  /// Returns true if `rBindDevice` has been explicitly set.
  var hasRBindDevice: Bool {return _storage._rBindDevice != nil}
  /// Clears the value of `rBindDevice`. Subsequent reads from it will return its default value.
  mutating func clearRBindDevice() {_uniqueStorage()._rBindDevice = nil}

  var rGetDeviceInfo: Caring_get_device_info_t {
    get {return _storage._rGetDeviceInfo ?? Caring_get_device_info_t()}
    set {_uniqueStorage()._rGetDeviceInfo = newValue}
  }
  /// Returns true if `rGetDeviceInfo` has been explicitly set.
  var hasRGetDeviceInfo: Bool {return _storage._rGetDeviceInfo != nil}
  /// Clears the value of `rGetDeviceInfo`. Subsequent reads from it will return its default value.
  mutating func clearRGetDeviceInfo() {_uniqueStorage()._rGetDeviceInfo = nil}

  var syncPhoneInfo: Caring_set_device_info_t {
    get {return _storage._syncPhoneInfo ?? Caring_set_device_info_t()}
    set {_uniqueStorage()._syncPhoneInfo = newValue}
  }
  /// Returns true if `syncPhoneInfo` has been explicitly set.
  var hasSyncPhoneInfo: Bool {return _storage._syncPhoneInfo != nil}
  /// Clears the value of `syncPhoneInfo`. Subsequent reads from it will return its default value.
  mutating func clearSyncPhoneInfo() {_uniqueStorage()._syncPhoneInfo = nil}

  var syncUserInfo: Caring_sync_user_info_t {
    get {return _storage._syncUserInfo ?? Caring_sync_user_info_t()}
    set {_uniqueStorage()._syncUserInfo = newValue}
  }
  /// Returns true if `syncUserInfo` has been explicitly set.
  var hasSyncUserInfo: Bool {return _storage._syncUserInfo != nil}
  /// Clears the value of `syncUserInfo`. Subsequent reads from it will return its default value.
  mutating func clearSyncUserInfo() {_uniqueStorage()._syncUserInfo = nil}

  var syncSwitch: Caring_sync_switch_t {
    get {return _storage._syncSwitch ?? Caring_sync_switch_t()}
    set {_uniqueStorage()._syncSwitch = newValue}
  }
  /// Returns true if `syncSwitch` has been explicitly set.
  var hasSyncSwitch: Bool {return _storage._syncSwitch != nil}
  /// Clears the value of `syncSwitch`. Subsequent reads from it will return its default value.
  mutating func clearSyncSwitch() {_uniqueStorage()._syncSwitch = nil}

  var setHrSampleSlot: Caring_set_hr_sample_slot_t {
    get {return _storage._setHrSampleSlot ?? Caring_set_hr_sample_slot_t()}
    set {_uniqueStorage()._setHrSampleSlot = newValue}
  }
  /// Returns true if `setHrSampleSlot` has been explicitly set.
  var hasSetHrSampleSlot: Bool {return _storage._setHrSampleSlot != nil}
  /// Clears the value of `setHrSampleSlot`. Subsequent reads from it will return its default value.
  mutating func clearSetHrSampleSlot() {_uniqueStorage()._setHrSampleSlot = nil}

  var setWatchSetting: Caring_set_watch_setting_t {
    get {return _storage._setWatchSetting ?? Caring_set_watch_setting_t()}
    set {_uniqueStorage()._setWatchSetting = newValue}
  }
  /// Returns true if `setWatchSetting` has been explicitly set.
  var hasSetWatchSetting: Bool {return _storage._setWatchSetting != nil}
  /// Clears the value of `setWatchSetting`. Subsequent reads from it will return its default value.
  mutating func clearSetWatchSetting() {_uniqueStorage()._setWatchSetting = nil}

  var setDrinkSlot: Caring_set_drink_slot_t {
    get {return _storage._setDrinkSlot ?? Caring_set_drink_slot_t()}
    set {_uniqueStorage()._setDrinkSlot = newValue}
  }
  /// Returns true if `setDrinkSlot` has been explicitly set.
  var hasSetDrinkSlot: Bool {return _storage._setDrinkSlot != nil}
  /// Clears the value of `setDrinkSlot`. Subsequent reads from it will return its default value.
  mutating func clearSetDrinkSlot() {_uniqueStorage()._setDrinkSlot = nil}

  var setAlarms: Caring_set_alarms_t {
    get {return _storage._setAlarms ?? Caring_set_alarms_t()}
    set {_uniqueStorage()._setAlarms = newValue}
  }
  /// Returns true if `setAlarms` has been explicitly set.
  var hasSetAlarms: Bool {return _storage._setAlarms != nil}
  /// Clears the value of `setAlarms`. Subsequent reads from it will return its default value.
  mutating func clearSetAlarms() {_uniqueStorage()._setAlarms = nil}

  var setNotdisturb: Caring_set_notdisturb_t {
    get {return _storage._setNotdisturb ?? Caring_set_notdisturb_t()}
    set {_uniqueStorage()._setNotdisturb = newValue}
  }
  /// Returns true if `setNotdisturb` has been explicitly set.
  var hasSetNotdisturb: Bool {return _storage._setNotdisturb != nil}
  /// Clears the value of `setNotdisturb`. Subsequent reads from it will return its default value.
  mutating func clearSetNotdisturb() {_uniqueStorage()._setNotdisturb = nil}

  var setCountryInfo: Caring_set_country_info_t {
    get {return _storage._setCountryInfo ?? Caring_set_country_info_t()}
    set {_uniqueStorage()._setCountryInfo = newValue}
  }
  /// Returns true if `setCountryInfo` has been explicitly set.
  var hasSetCountryInfo: Bool {return _storage._setCountryInfo != nil}
  /// Clears the value of `setCountryInfo`. Subsequent reads from it will return its default value.
  mutating func clearSetCountryInfo() {_uniqueStorage()._setCountryInfo = nil}

  var setUiStyle: Caring_set_ui_style_t {
    get {return _storage._setUiStyle ?? Caring_set_ui_style_t()}
    set {_uniqueStorage()._setUiStyle = newValue}
  }
  /// Returns true if `setUiStyle` has been explicitly set.
  var hasSetUiStyle: Bool {return _storage._setUiStyle != nil}
  /// Clears the value of `setUiStyle`. Subsequent reads from it will return its default value.
  mutating func clearSetUiStyle() {_uniqueStorage()._setUiStyle = nil}

  var setSportTarget: Caring_set_sport_target_t {
    get {return _storage._setSportTarget ?? Caring_set_sport_target_t()}
    set {_uniqueStorage()._setSportTarget = newValue}
  }
  /// Returns true if `setSportTarget` has been explicitly set.
  var hasSetSportTarget: Bool {return _storage._setSportTarget != nil}
  /// Clears the value of `setSportTarget`. Subsequent reads from it will return its default value.
  mutating func clearSetSportTarget() {_uniqueStorage()._setSportTarget = nil}

  var setTimeFormat: Caring_set_time_format_t {
    get {return _storage._setTimeFormat ?? Caring_set_time_format_t()}
    set {_uniqueStorage()._setTimeFormat = newValue}
  }
  /// Returns true if `setTimeFormat` has been explicitly set.
  var hasSetTimeFormat: Bool {return _storage._setTimeFormat != nil}
  /// Clears the value of `setTimeFormat`. Subsequent reads from it will return its default value.
  mutating func clearSetTimeFormat() {_uniqueStorage()._setTimeFormat = nil}

  var setMetricInch: Caring_set_metric_inch_t {
    get {return _storage._setMetricInch ?? Caring_set_metric_inch_t()}
    set {_uniqueStorage()._setMetricInch = newValue}
  }
  /// Returns true if `setMetricInch` has been explicitly set.
  var hasSetMetricInch: Bool {return _storage._setMetricInch != nil}
  /// Clears the value of `setMetricInch`. Subsequent reads from it will return its default value.
  mutating func clearSetMetricInch() {_uniqueStorage()._setMetricInch = nil}

  var setBrightTimes: Caring_set_bright_times_t {
    get {return _storage._setBrightTimes ?? Caring_set_bright_times_t()}
    set {_uniqueStorage()._setBrightTimes = newValue}
  }
  /// Returns true if `setBrightTimes` has been explicitly set.
  var hasSetBrightTimes: Bool {return _storage._setBrightTimes != nil}
  /// Clears the value of `setBrightTimes`. Subsequent reads from it will return its default value.
  mutating func clearSetBrightTimes() {_uniqueStorage()._setBrightTimes = nil}

  var setSetHrWarning: Caring_set_hr_warning_t {
    get {return _storage._setSetHrWarning ?? Caring_set_hr_warning_t()}
    set {_uniqueStorage()._setSetHrWarning = newValue}
  }
  /// Returns true if `setSetHrWarning` has been explicitly set.
  var hasSetSetHrWarning: Bool {return _storage._setSetHrWarning != nil}
  /// Clears the value of `setSetHrWarning`. Subsequent reads from it will return its default value.
  mutating func clearSetSetHrWarning() {_uniqueStorage()._setSetHrWarning = nil}

  var rGetHrValue: Caring_r_get_hr_value_t {
    get {return _storage._rGetHrValue ?? Caring_r_get_hr_value_t()}
    set {_uniqueStorage()._rGetHrValue = newValue}
  }
  /// Returns true if `rGetHrValue` has been explicitly set.
  var hasRGetHrValue: Bool {return _storage._rGetHrValue != nil}
  /// Clears the value of `rGetHrValue`. Subsequent reads from it will return its default value.
  mutating func clearRGetHrValue() {_uniqueStorage()._rGetHrValue = nil}

  var setNotifyWarnInfo: Caring_set_notify_warning_t {
    get {return _storage._setNotifyWarnInfo ?? Caring_set_notify_warning_t()}
    set {_uniqueStorage()._setNotifyWarnInfo = newValue}
  }
  /// Returns true if `setNotifyWarnInfo` has been explicitly set.
  var hasSetNotifyWarnInfo: Bool {return _storage._setNotifyWarnInfo != nil}
  /// Clears the value of `setNotifyWarnInfo`. Subsequent reads from it will return its default value.
  mutating func clearSetNotifyWarnInfo() {_uniqueStorage()._setNotifyWarnInfo = nil}

  var setHealthDataInfo: Caring_set_sync_health_data_t {
    get {return _storage._setHealthDataInfo ?? Caring_set_sync_health_data_t()}
    set {_uniqueStorage()._setHealthDataInfo = newValue}
  }
  /// Returns true if `setHealthDataInfo` has been explicitly set.
  var hasSetHealthDataInfo: Bool {return _storage._setHealthDataInfo != nil}
  /// Clears the value of `setHealthDataInfo`. Subsequent reads from it will return its default value.
  mutating func clearSetHealthDataInfo() {_uniqueStorage()._setHealthDataInfo = nil}

  var rGetPowerValue: Caring_r_get_power_t {
    get {return _storage._rGetPowerValue ?? Caring_r_get_power_t()}
    set {_uniqueStorage()._rGetPowerValue = newValue}
  }
  /// Returns true if `rGetPowerValue` has been explicitly set.
  var hasRGetPowerValue: Bool {return _storage._rGetPowerValue != nil}
  /// Clears the value of `rGetPowerValue`. Subsequent reads from it will return its default value.
  mutating func clearRGetPowerValue() {_uniqueStorage()._rGetPowerValue = nil}

  var setUpdataFw: Caring_set_updata_fw_t {
    get {return _storage._setUpdataFw ?? Caring_set_updata_fw_t()}
    set {_uniqueStorage()._setUpdataFw = newValue}
  }
  /// Returns true if `setUpdataFw` has been explicitly set.
  var hasSetUpdataFw: Bool {return _storage._setUpdataFw != nil}
  /// Clears the value of `setUpdataFw`. Subsequent reads from it will return its default value.
  mutating func clearSetUpdataFw() {_uniqueStorage()._setUpdataFw = nil}

  var setWeatherInfo: Caring_set_weather_info_t {
    get {return _storage._setWeatherInfo ?? Caring_set_weather_info_t()}
    set {_uniqueStorage()._setWeatherInfo = newValue}
  }
  /// Returns true if `setWeatherInfo` has been explicitly set.
  var hasSetWeatherInfo: Bool {return _storage._setWeatherInfo != nil}
  /// Clears the value of `setWeatherInfo`. Subsequent reads from it will return its default value.
  mutating func clearSetWeatherInfo() {_uniqueStorage()._setWeatherInfo = nil}

  var setResetMachine: Caring_set_reset_machine_t {
    get {return _storage._setResetMachine ?? Caring_set_reset_machine_t()}
    set {_uniqueStorage()._setResetMachine = newValue}
  }
  /// Returns true if `setResetMachine` has been explicitly set.
  var hasSetResetMachine: Bool {return _storage._setResetMachine != nil}
  /// Clears the value of `setResetMachine`. Subsequent reads from it will return its default value.
  mutating func clearSetResetMachine() {_uniqueStorage()._setResetMachine = nil}

  var setSportStatus: Caring_set_sport_status_t {
    get {return _storage._setSportStatus ?? Caring_set_sport_status_t()}
    set {_uniqueStorage()._setSportStatus = newValue}
  }
  /// Returns true if `setSportStatus` has been explicitly set.
  var hasSetSportStatus: Bool {return _storage._setSportStatus != nil}
  /// Clears the value of `setSportStatus`. Subsequent reads from it will return its default value.
  mutating func clearSetSportStatus() {_uniqueStorage()._setSportStatus = nil}

  var rGetHealthData: Caring_r_get_health_data_t {
    get {return _storage._rGetHealthData ?? Caring_r_get_health_data_t()}
    set {_uniqueStorage()._rGetHealthData = newValue}
  }
  /// Returns true if `rGetHealthData` has been explicitly set.
  var hasRGetHealthData: Bool {return _storage._rGetHealthData != nil}
  /// Clears the value of `rGetHealthData`. Subsequent reads from it will return its default value.
  mutating func clearRGetHealthData() {_uniqueStorage()._rGetHealthData = nil}

  var setMusicInfo: Caring_set_music_info_t {
    get {return _storage._setMusicInfo ?? Caring_set_music_info_t()}
    set {_uniqueStorage()._setMusicInfo = newValue}
  }
  /// Returns true if `setMusicInfo` has been explicitly set.
  var hasSetMusicInfo: Bool {return _storage._setMusicInfo != nil}
  /// Clears the value of `setMusicInfo`. Subsequent reads from it will return its default value.
  mutating func clearSetMusicInfo() {_uniqueStorage()._setMusicInfo = nil}

  var rGetMtuSize: Caring_r_get_mtu_size_t {
    get {return _storage._rGetMtuSize ?? Caring_r_get_mtu_size_t()}
    set {_uniqueStorage()._rGetMtuSize = newValue}
  }
  /// Returns true if `rGetMtuSize` has been explicitly set.
  var hasRGetMtuSize: Bool {return _storage._rGetMtuSize != nil}
  /// Clears the value of `rGetMtuSize`. Subsequent reads from it will return its default value.
  mutating func clearRGetMtuSize() {_uniqueStorage()._rGetMtuSize = nil}

  ///正式发送表盘数据
  var setBinData: Caring_set_bin_data_t {
    get {return _storage._setBinData ?? Caring_set_bin_data_t()}
    set {_uniqueStorage()._setBinData = newValue}
  }
  /// Returns true if `setBinData` has been explicitly set.
  var hasSetBinData: Bool {return _storage._setBinData != nil}
  /// Clears the value of `setBinData`. Subsequent reads from it will return its default value.
  mutating func clearSetBinData() {_uniqueStorage()._setBinData = nil}

  ///询问是否可以发送表盘数据
  var setCheckDail: Caring_set_check_dail_t {
    get {return _storage._setCheckDail ?? Caring_set_check_dail_t()}
    set {_uniqueStorage()._setCheckDail = newValue}
  }
  /// Returns true if `setCheckDail` has been explicitly set.
  var hasSetCheckDail: Bool {return _storage._setCheckDail != nil}
  /// Clears the value of `setCheckDail`. Subsequent reads from it will return its default value.
  mutating func clearSetCheckDail() {_uniqueStorage()._setCheckDail = nil}

  var rFindPhone: Caring_r_find_phone_t {
    get {return _storage._rFindPhone ?? Caring_r_find_phone_t()}
    set {_uniqueStorage()._rFindPhone = newValue}
  }
  /// Returns true if `rFindPhone` has been explicitly set.
  var hasRFindPhone: Bool {return _storage._rFindPhone != nil}
  /// Clears the value of `rFindPhone`. Subsequent reads from it will return its default value.
  mutating func clearRFindPhone() {_uniqueStorage()._rFindPhone = nil}

  var setHrDur: Caring_set_rtimehr_dur_t {
    get {return _storage._setHrDur ?? Caring_set_rtimehr_dur_t()}
    set {_uniqueStorage()._setHrDur = newValue}
  }
  /// Returns true if `setHrDur` has been explicitly set.
  var hasSetHrDur: Bool {return _storage._setHrDur != nil}
  /// Clears the value of `setHrDur`. Subsequent reads from it will return its default value.
  mutating func clearSetHrDur() {_uniqueStorage()._setHrDur = nil}

  var rHrValue: Caring_r_rtimehr_value_t {
    get {return _storage._rHrValue ?? Caring_r_rtimehr_value_t()}
    set {_uniqueStorage()._rHrValue = newValue}
  }
  /// Returns true if `rHrValue` has been explicitly set.
  var hasRHrValue: Bool {return _storage._rHrValue != nil}
  /// Clears the value of `rHrValue`. Subsequent reads from it will return its default value.
  mutating func clearRHrValue() {_uniqueStorage()._rHrValue = nil}

  var rGetSprotData: Caring_r_get_sport_data_t {
    get {return _storage._rGetSprotData ?? Caring_r_get_sport_data_t()}
    set {_uniqueStorage()._rGetSprotData = newValue}
  }
  /// Returns true if `rGetSprotData` has been explicitly set.
  var hasRGetSprotData: Bool {return _storage._rGetSprotData != nil}
  /// Clears the value of `rGetSprotData`. Subsequent reads from it will return its default value.
  mutating func clearRGetSprotData() {_uniqueStorage()._rGetSprotData = nil}

  var rGetDisturbEn: Caring_r_get_disturb_en_t {
    get {return _storage._rGetDisturbEn ?? Caring_r_get_disturb_en_t()}
    set {_uniqueStorage()._rGetDisturbEn = newValue}
  }
  /// Returns true if `rGetDisturbEn` has been explicitly set.
  var hasRGetDisturbEn: Bool {return _storage._rGetDisturbEn != nil}
  /// Clears the value of `rGetDisturbEn`. Subsequent reads from it will return its default value.
  mutating func clearRGetDisturbEn() {_uniqueStorage()._rGetDisturbEn = nil}

  var rGetStepCount: Caring_r_get_step_count_t {
    get {return _storage._rGetStepCount ?? Caring_r_get_step_count_t()}
    set {_uniqueStorage()._rGetStepCount = newValue}
  }
  /// Returns true if `rGetStepCount` has been explicitly set.
  var hasRGetStepCount: Bool {return _storage._rGetStepCount != nil}
  /// Clears the value of `rGetStepCount`. Subsequent reads from it will return its default value.
  mutating func clearRGetStepCount() {_uniqueStorage()._rGetStepCount = nil}

  var rGetCurrentHr: Caring_r_get_current_hr_t {
    get {return _storage._rGetCurrentHr ?? Caring_r_get_current_hr_t()}
    set {_uniqueStorage()._rGetCurrentHr = newValue}
  }
  /// Returns true if `rGetCurrentHr` has been explicitly set.
  var hasRGetCurrentHr: Bool {return _storage._rGetCurrentHr != nil}
  /// Clears the value of `rGetCurrentHr`. Subsequent reads from it will return its default value.
  mutating func clearRGetCurrentHr() {_uniqueStorage()._rGetCurrentHr = nil}

  var rSetLightResult: Caring_r_set_light_leak_result_t {
    get {return _storage._rSetLightResult ?? Caring_r_set_light_leak_result_t()}
    set {_uniqueStorage()._rSetLightResult = newValue}
  }
  /// Returns true if `rSetLightResult` has been explicitly set.
  var hasRSetLightResult: Bool {return _storage._rSetLightResult != nil}
  /// Clears the value of `rSetLightResult`. Subsequent reads from it will return its default value.
  mutating func clearRSetLightResult() {_uniqueStorage()._rSetLightResult = nil}

  var rGetActiveRecord: Caring_r_get_active_record_data_t {
    get {return _storage._rGetActiveRecord ?? Caring_r_get_active_record_data_t()}
    set {_uniqueStorage()._rGetActiveRecord = newValue}
  }
  /// Returns true if `rGetActiveRecord` has been explicitly set.
  var hasRGetActiveRecord: Bool {return _storage._rGetActiveRecord != nil}
  /// Clears the value of `rGetActiveRecord`. Subsequent reads from it will return its default value.
  mutating func clearRGetActiveRecord() {_uniqueStorage()._rGetActiveRecord = nil}

  var rSetActiveInfo: Caring_r_set_active_info_t {
    get {return _storage._rSetActiveInfo ?? Caring_r_set_active_info_t()}
    set {_uniqueStorage()._rSetActiveInfo = newValue}
  }
  /// Returns true if `rSetActiveInfo` has been explicitly set.
  var hasRSetActiveInfo: Bool {return _storage._rSetActiveInfo != nil}
  /// Clears the value of `rSetActiveInfo`. Subsequent reads from it will return its default value.
  mutating func clearRSetActiveInfo() {_uniqueStorage()._rSetActiveInfo = nil}

  var rGetLogInfo: Caring_r_get_log_info_t {
    get {return _storage._rGetLogInfo ?? Caring_r_get_log_info_t()}
    set {_uniqueStorage()._rGetLogInfo = newValue}
  }
  /// Returns true if `rGetLogInfo` has been explicitly set.
  var hasRGetLogInfo: Bool {return _storage._rGetLogInfo != nil}
  /// Clears the value of `rGetLogInfo`. Subsequent reads from it will return its default value.
  mutating func clearRGetLogInfo() {_uniqueStorage()._rGetLogInfo = nil}

  var rGetUiHrs: Caring_r_get_ui_hrs_t {
    get {return _storage._rGetUiHrs ?? Caring_r_get_ui_hrs_t()}
    set {_uniqueStorage()._rGetUiHrs = newValue}
  }
  /// Returns true if `rGetUiHrs` has been explicitly set.
  var hasRGetUiHrs: Bool {return _storage._rGetUiHrs != nil}
  /// Clears the value of `rGetUiHrs`. Subsequent reads from it will return its default value.
  mutating func clearRGetUiHrs() {_uniqueStorage()._rGetUiHrs = nil}

  var rErrorCode: Caring_r_error_code_t {
    get {return _storage._rErrorCode ?? Caring_r_error_code_t()}
    set {_uniqueStorage()._rErrorCode = newValue}
  }
  /// Returns true if `rErrorCode` has been explicitly set.
  var hasRErrorCode: Bool {return _storage._rErrorCode != nil}
  /// Clears the value of `rErrorCode`. Subsequent reads from it will return its default value.
  mutating func clearRErrorCode() {_uniqueStorage()._rErrorCode = nil}

  var setNfcOperate: Caring_set_nfc_operate_t {
    get {return _storage._setNfcOperate ?? Caring_set_nfc_operate_t()}
    set {_uniqueStorage()._setNfcOperate = newValue}
  }
  /// Returns true if `setNfcOperate` has been explicitly set.
  var hasSetNfcOperate: Bool {return _storage._setNfcOperate != nil}
  /// Clears the value of `setNfcOperate`. Subsequent reads from it will return its default value.
  mutating func clearSetNfcOperate() {_uniqueStorage()._setNfcOperate = nil}

  var setPageSwitch: Caring_set_page_switch_t {
    get {return _storage._setPageSwitch ?? Caring_set_page_switch_t()}
    set {_uniqueStorage()._setPageSwitch = newValue}
  }
  /// Returns true if `setPageSwitch` has been explicitly set.
  var hasSetPageSwitch: Bool {return _storage._setPageSwitch != nil}
  /// Clears the value of `setPageSwitch`. Subsequent reads from it will return its default value.
  mutating func clearSetPageSwitch() {_uniqueStorage()._setPageSwitch = nil}

  var setCheckGpsInfo: Caring_set_check_gps_info_t {
    get {return _storage._setCheckGpsInfo ?? Caring_set_check_gps_info_t()}
    set {_uniqueStorage()._setCheckGpsInfo = newValue}
  }
  /// Returns true if `setCheckGpsInfo` has been explicitly set.
  var hasSetCheckGpsInfo: Bool {return _storage._setCheckGpsInfo != nil}
  /// Clears the value of `setCheckGpsInfo`. Subsequent reads from it will return its default value.
  mutating func clearSetCheckGpsInfo() {_uniqueStorage()._setCheckGpsInfo = nil}

  var setUpdateGpsData: Caring_set_update_gps_data_t {
    get {return _storage._setUpdateGpsData ?? Caring_set_update_gps_data_t()}
    set {_uniqueStorage()._setUpdateGpsData = newValue}
  }
  /// Returns true if `setUpdateGpsData` has been explicitly set.
  var hasSetUpdateGpsData: Bool {return _storage._setUpdateGpsData != nil}
  /// Clears the value of `setUpdateGpsData`. Subsequent reads from it will return its default value.
  mutating func clearSetUpdateGpsData() {_uniqueStorage()._setUpdateGpsData = nil}

  var setUpdateSpo2Data: Caring_set_update_spo2_data_t {
    get {return _storage._setUpdateSpo2Data ?? Caring_set_update_spo2_data_t()}
    set {_uniqueStorage()._setUpdateSpo2Data = newValue}
  }
  /// Returns true if `setUpdateSpo2Data` has been explicitly set.
  var hasSetUpdateSpo2Data: Bool {return _storage._setUpdateSpo2Data != nil}
  /// Clears the value of `setUpdateSpo2Data`. Subsequent reads from it will return its default value.
  mutating func clearSetUpdateSpo2Data() {_uniqueStorage()._setUpdateSpo2Data = nil}

  var getDialConfigData: Caring_get_dial_config_data_t {
    get {return _storage._getDialConfigData ?? Caring_get_dial_config_data_t()}
    set {_uniqueStorage()._getDialConfigData = newValue}
  }
  /// Returns true if `getDialConfigData` has been explicitly set.
  var hasGetDialConfigData: Bool {return _storage._getDialConfigData != nil}
  /// Clears the value of `getDialConfigData`. Subsequent reads from it will return its default value.
  mutating func clearGetDialConfigData() {_uniqueStorage()._getDialConfigData = nil}

  var setWarmingData: Caring_set_warming_data_t {
    get {return _storage._setWarmingData ?? Caring_set_warming_data_t()}
    set {_uniqueStorage()._setWarmingData = newValue}
  }
  /// Returns true if `setWarmingData` has been explicitly set.
  var hasSetWarmingData: Bool {return _storage._setWarmingData != nil}
  /// Clears the value of `setWarmingData`. Subsequent reads from it will return its default value.
  mutating func clearSetWarmingData() {_uniqueStorage()._setWarmingData = nil}

  var setMenuSeqData: Caring_set_menu_sequence_t {
    get {return _storage._setMenuSeqData ?? Caring_set_menu_sequence_t()}
    set {_uniqueStorage()._setMenuSeqData = newValue}
  }
  /// Returns true if `setMenuSeqData` has been explicitly set.
  var hasSetMenuSeqData: Bool {return _storage._setMenuSeqData != nil}
  /// Clears the value of `setMenuSeqData`. Subsequent reads from it will return its default value.
  mutating func clearSetMenuSeqData() {_uniqueStorage()._setMenuSeqData = nil}

  var getMenuSeqData: Caring_get_menu_sequence_t {
    get {return _storage._getMenuSeqData ?? Caring_get_menu_sequence_t()}
    set {_uniqueStorage()._getMenuSeqData = newValue}
  }
  /// Returns true if `getMenuSeqData` has been explicitly set.
  var hasGetMenuSeqData: Bool {return _storage._getMenuSeqData != nil}
  /// Clears the value of `getMenuSeqData`. Subsequent reads from it will return its default value.
  mutating func clearGetMenuSeqData() {_uniqueStorage()._getMenuSeqData = nil}

  var rGetMenuSeqData: Caring_r_get_menu_sequence_t {
    get {return _storage._rGetMenuSeqData ?? Caring_r_get_menu_sequence_t()}
    set {_uniqueStorage()._rGetMenuSeqData = newValue}
  }
  /// Returns true if `rGetMenuSeqData` has been explicitly set.
  var hasRGetMenuSeqData: Bool {return _storage._rGetMenuSeqData != nil}
  /// Clears the value of `rGetMenuSeqData`. Subsequent reads from it will return its default value.
  mutating func clearRGetMenuSeqData() {_uniqueStorage()._rGetMenuSeqData = nil}

  var rGetWeatherInfo: Caring_r_get_weather_info_t {
    get {return _storage._rGetWeatherInfo ?? Caring_r_get_weather_info_t()}
    set {_uniqueStorage()._rGetWeatherInfo = newValue}
  }
  /// Returns true if `rGetWeatherInfo` has been explicitly set.
  var hasRGetWeatherInfo: Bool {return _storage._rGetWeatherInfo != nil}
  /// Clears the value of `rGetWeatherInfo`. Subsequent reads from it will return its default value.
  mutating func clearRGetWeatherInfo() {_uniqueStorage()._rGetWeatherInfo = nil}

  var syncContactsInfo: Caring_set_contacts_t {
    get {return _storage._syncContactsInfo ?? Caring_set_contacts_t()}
    set {_uniqueStorage()._syncContactsInfo = newValue}
  }
  /// Returns true if `syncContactsInfo` has been explicitly set.
  var hasSyncContactsInfo: Bool {return _storage._syncContactsInfo != nil}
  /// Clears the value of `syncContactsInfo`. Subsequent reads from it will return its default value.
  mutating func clearSyncContactsInfo() {_uniqueStorage()._syncContactsInfo = nil}

  /// optional r_get_watch_info_t      r_get_watch_info       = 62; 
  var rSetCaringReminder: Caring_r_set_caring_reminder_t {
    get {return _storage._rSetCaringReminder ?? Caring_r_set_caring_reminder_t()}
    set {_uniqueStorage()._rSetCaringReminder = newValue}
  }
  /// Returns true if `rSetCaringReminder` has been explicitly set.
  var hasRSetCaringReminder: Bool {return _storage._rSetCaringReminder != nil}
  /// Clears the value of `rSetCaringReminder`. Subsequent reads from it will return its default value.
  mutating func clearRSetCaringReminder() {_uniqueStorage()._rSetCaringReminder = nil}

  var setAuth: Caring_set_auth_t {
    get {return _storage._setAuth ?? Caring_set_auth_t()}
    set {_uniqueStorage()._setAuth = newValue}
  }
  /// Returns true if `setAuth` has been explicitly set.
  var hasSetAuth: Bool {return _storage._setAuth != nil}
  /// Clears the value of `setAuth`. Subsequent reads from it will return its default value.
  mutating func clearSetAuth() {_uniqueStorage()._setAuth = nil}

  var setTransferPhone: Caring_set_transfer_phone_t {
    get {return _storage._setTransferPhone ?? Caring_set_transfer_phone_t()}
    set {_uniqueStorage()._setTransferPhone = newValue}
  }
  /// Returns true if `setTransferPhone` has been explicitly set.
  var hasSetTransferPhone: Bool {return _storage._setTransferPhone != nil}
  /// Clears the value of `setTransferPhone`. Subsequent reads from it will return its default value.
  mutating func clearSetTransferPhone() {_uniqueStorage()._setTransferPhone = nil}

  var setAbnormalWarning: Caring_set_abnormal_warning_t {
    get {return _storage._setAbnormalWarning ?? Caring_set_abnormal_warning_t()}
    set {_uniqueStorage()._setAbnormalWarning = newValue}
  }
  /// Returns true if `setAbnormalWarning` has been explicitly set.
  var hasSetAbnormalWarning: Bool {return _storage._setAbnormalWarning != nil}
  /// Clears the value of `setAbnormalWarning`. Subsequent reads from it will return its default value.
  mutating func clearSetAbnormalWarning() {_uniqueStorage()._setAbnormalWarning = nil}

  ///发布4G在线下线状态通知
  var rGet4GOnlineOff: Caring_r_get_4G_online_off_t {
    get {return _storage._rGet4GOnlineOff ?? Caring_r_get_4G_online_off_t()}
    set {_uniqueStorage()._rGet4GOnlineOff = newValue}
  }
  /// Returns true if `rGet4GOnlineOff` has been explicitly set.
  var hasRGet4GOnlineOff: Bool {return _storage._rGet4GOnlineOff != nil}
  /// Clears the value of `rGet4GOnlineOff`. Subsequent reads from it will return its default value.
  mutating func clearRGet4GOnlineOff() {_uniqueStorage()._rGet4GOnlineOff = nil}

  ///发布4G在线
  var rGet4GOnlineOrNot: Caring_r_get_4G_online_or_not_t {
    get {return _storage._rGet4GOnlineOrNot ?? Caring_r_get_4G_online_or_not_t()}
    set {_uniqueStorage()._rGet4GOnlineOrNot = newValue}
  }
  /// Returns true if `rGet4GOnlineOrNot` has been explicitly set.
  var hasRGet4GOnlineOrNot: Bool {return _storage._rGet4GOnlineOrNot != nil}
  /// Clears the value of `rGet4GOnlineOrNot`. Subsequent reads from it will return its default value.
  mutating func clearRGet4GOnlineOrNot() {_uniqueStorage()._rGet4GOnlineOrNot = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum cmd_t: SwiftProtobuf.Enum {
    typealias RawValue = Int

    ///绑定激活
    case cmdBindDevice // = 1

    ///获取设备信息
    case cmdGetDeviceInfo // = 2

    ///设置Auth
    case cmdSetAuthInfo // = 3

    ///同步用户信息
    case cmdSyncUserInfo // = 4
    case cmdSyncSwitch // = 5

    ///实时心率采集间隔
    case cmdSetHrSampleSlot // = 6

    ///设置手表设置      (0x07)
    case cmdSetWatchSetting // = 7
    case cmdSetDrinkSlot // = 8

    ///设置闹钟吃药提醒
    case cmdSetAlarms // = 9
    case cmdSetNotdisturb // = 10

    ///设置时区和国家  (0x0B)
    case cmdSetCountryInfo // = 11

    ///内置表盘设置    (0x0C)
    case cmdSetUiStyle // = 12

    ///设置记步目标    (0x0D)
    case cmdSetSportTarget // = 13

    ///设置时间制式    (0x0E)
    case cmdSetTimeFormat // = 14

    ///设置公英制      (0x0F)
    case cmdSetMetricInch // = 15

    ///异常提醒
    case cmdSetBrightTimes // = 16

    ///设置心率预警值  (0x11)
    case cmdSetHrWarning // = 17

    ///设置异常提醒
    case cmdSetAbnormalWarning // = 18
    case cmdSetNotifyWarn // = 19

    ///通知发布健康数据  (0x14)
    case cmdSetSyncHealthData // = 20
    case cmdGetPowerValue // = 21
    case cmdSetUpdataFw // = 22
    case cmdSetTakePic // = 23
    case cmdSetFindPhone // = 24
    case cmdSetFindDev // = 25

    ///设置天气    (0x1A)
    case cmdSetWeatherInfo // = 26

    ///恢复出厂设置  (0x1B)
    case cmdSetResetMachine // = 27
    case cmdSetSportStatus // = 28
    case cmdGetHealthData // = 29
    case cmdSetMusicInfo // = 30

    ///获取MTU
    case cmdGetSyncMtu // = 31

    ///设置表盘（正式升级表盘）
    case cmdSetBinDataUpdate // = 32

    ///进入厂测模式
    case cmdFactoryTestMode // = 33

    ///询问是否可以发送表盘
    case cmdSendCheckDail // = 34
    case cmdGetRealtimeHr // = 35
    case cmdSyncRealtimeHr // = 36
    case cmdHandUpPhone // = 37
    case cmdDisturbSwitch // = 38
    case cmdCtrAppSports // = 39
    case cmdSyncStepCount // = 40
    case cmdCheckSportStatus // = 41
    case cmdGetCurrentSportHr // = 42
    case cmdSetMakeTestData // = 43
    case cmdSetLightLeakResult // = 44
    case cmdGetActiveRecordData // = 45
    case cmdSetActiveRecordData // = 46
    case cmdSetLogInfoData // = 47
    case cmdGetLogInfoData // = 48
    case cmdGetUiHrsValue // = 49

    ///设置所有开关
    case cmdSetAllConfigParam // = 50
    case cmdSetNfcOperateCode // = 51
    case cmdSetPageSwitch // = 52
    case cmdSetCheckGpsInfo // = 53
    case cmdSetUpdateGpsData // = 54
    case cmdGetUpdateSpo2Data // = 55
    case cmdGetDialConfigData // = 56
    case cmdSetWarmingData // = 57

    ///	设置一级页面的顺序
    case cmdSetMenuSequenceData // = 58

    ///设置通讯录、紧急联系人 (0x3B)
    case cmdSyncContacts // = 59

    ///获取手表信息
    case cmdGetWatchinfo // = 60

    ///设置来电转移模式和号码 
    case cmdSetTransferPhone // = 61
    case cmdGet4GOnline // = 62
    case cmdSet4GOnlind // = 63
    case cmdSetTransfer // = 64
    case cmdAbnormalWarining // = 65

    ///发布4G在线下线状态通知(0x44)
    case cmdOnlineNotify // = 68

    ///发布4G在线 (0x45)
    case cmdOnlineOrNot // = 69

    /// 判断4G是否在线(0x46)
    case cmd4GIsItOnline // = 70

    ///推送设备信息 (0x47)
    case cmdSetWatchinfo // = 71

    init() {
      self = .cmdBindDevice
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .cmdBindDevice
      case 2: self = .cmdGetDeviceInfo
      case 3: self = .cmdSetAuthInfo
      case 4: self = .cmdSyncUserInfo
      case 5: self = .cmdSyncSwitch
      case 6: self = .cmdSetHrSampleSlot
      case 7: self = .cmdSetWatchSetting
      case 8: self = .cmdSetDrinkSlot
      case 9: self = .cmdSetAlarms
      case 10: self = .cmdSetNotdisturb
      case 11: self = .cmdSetCountryInfo
      case 12: self = .cmdSetUiStyle
      case 13: self = .cmdSetSportTarget
      case 14: self = .cmdSetTimeFormat
      case 15: self = .cmdSetMetricInch
      case 16: self = .cmdSetBrightTimes
      case 17: self = .cmdSetHrWarning
      case 18: self = .cmdSetAbnormalWarning
      case 19: self = .cmdSetNotifyWarn
      case 20: self = .cmdSetSyncHealthData
      case 21: self = .cmdGetPowerValue
      case 22: self = .cmdSetUpdataFw
      case 23: self = .cmdSetTakePic
      case 24: self = .cmdSetFindPhone
      case 25: self = .cmdSetFindDev
      case 26: self = .cmdSetWeatherInfo
      case 27: self = .cmdSetResetMachine
      case 28: self = .cmdSetSportStatus
      case 29: self = .cmdGetHealthData
      case 30: self = .cmdSetMusicInfo
      case 31: self = .cmdGetSyncMtu
      case 32: self = .cmdSetBinDataUpdate
      case 33: self = .cmdFactoryTestMode
      case 34: self = .cmdSendCheckDail
      case 35: self = .cmdGetRealtimeHr
      case 36: self = .cmdSyncRealtimeHr
      case 37: self = .cmdHandUpPhone
      case 38: self = .cmdDisturbSwitch
      case 39: self = .cmdCtrAppSports
      case 40: self = .cmdSyncStepCount
      case 41: self = .cmdCheckSportStatus
      case 42: self = .cmdGetCurrentSportHr
      case 43: self = .cmdSetMakeTestData
      case 44: self = .cmdSetLightLeakResult
      case 45: self = .cmdGetActiveRecordData
      case 46: self = .cmdSetActiveRecordData
      case 47: self = .cmdSetLogInfoData
      case 48: self = .cmdGetLogInfoData
      case 49: self = .cmdGetUiHrsValue
      case 50: self = .cmdSetAllConfigParam
      case 51: self = .cmdSetNfcOperateCode
      case 52: self = .cmdSetPageSwitch
      case 53: self = .cmdSetCheckGpsInfo
      case 54: self = .cmdSetUpdateGpsData
      case 55: self = .cmdGetUpdateSpo2Data
      case 56: self = .cmdGetDialConfigData
      case 57: self = .cmdSetWarmingData
      case 58: self = .cmdSetMenuSequenceData
      case 59: self = .cmdSyncContacts
      case 60: self = .cmdGetWatchinfo
      case 61: self = .cmdSetTransferPhone
      case 62: self = .cmdGet4GOnline
      case 63: self = .cmdSet4GOnlind
      case 64: self = .cmdSetTransfer
      case 65: self = .cmdAbnormalWarining
      case 68: self = .cmdOnlineNotify
      case 69: self = .cmdOnlineOrNot
      case 70: self = .cmd4GIsItOnline
      case 71: self = .cmdSetWatchinfo
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .cmdBindDevice: return 1
      case .cmdGetDeviceInfo: return 2
      case .cmdSetAuthInfo: return 3
      case .cmdSyncUserInfo: return 4
      case .cmdSyncSwitch: return 5
      case .cmdSetHrSampleSlot: return 6
      case .cmdSetWatchSetting: return 7
      case .cmdSetDrinkSlot: return 8
      case .cmdSetAlarms: return 9
      case .cmdSetNotdisturb: return 10
      case .cmdSetCountryInfo: return 11
      case .cmdSetUiStyle: return 12
      case .cmdSetSportTarget: return 13
      case .cmdSetTimeFormat: return 14
      case .cmdSetMetricInch: return 15
      case .cmdSetBrightTimes: return 16
      case .cmdSetHrWarning: return 17
      case .cmdSetAbnormalWarning: return 18
      case .cmdSetNotifyWarn: return 19
      case .cmdSetSyncHealthData: return 20
      case .cmdGetPowerValue: return 21
      case .cmdSetUpdataFw: return 22
      case .cmdSetTakePic: return 23
      case .cmdSetFindPhone: return 24
      case .cmdSetFindDev: return 25
      case .cmdSetWeatherInfo: return 26
      case .cmdSetResetMachine: return 27
      case .cmdSetSportStatus: return 28
      case .cmdGetHealthData: return 29
      case .cmdSetMusicInfo: return 30
      case .cmdGetSyncMtu: return 31
      case .cmdSetBinDataUpdate: return 32
      case .cmdFactoryTestMode: return 33
      case .cmdSendCheckDail: return 34
      case .cmdGetRealtimeHr: return 35
      case .cmdSyncRealtimeHr: return 36
      case .cmdHandUpPhone: return 37
      case .cmdDisturbSwitch: return 38
      case .cmdCtrAppSports: return 39
      case .cmdSyncStepCount: return 40
      case .cmdCheckSportStatus: return 41
      case .cmdGetCurrentSportHr: return 42
      case .cmdSetMakeTestData: return 43
      case .cmdSetLightLeakResult: return 44
      case .cmdGetActiveRecordData: return 45
      case .cmdSetActiveRecordData: return 46
      case .cmdSetLogInfoData: return 47
      case .cmdGetLogInfoData: return 48
      case .cmdGetUiHrsValue: return 49
      case .cmdSetAllConfigParam: return 50
      case .cmdSetNfcOperateCode: return 51
      case .cmdSetPageSwitch: return 52
      case .cmdSetCheckGpsInfo: return 53
      case .cmdSetUpdateGpsData: return 54
      case .cmdGetUpdateSpo2Data: return 55
      case .cmdGetDialConfigData: return 56
      case .cmdSetWarmingData: return 57
      case .cmdSetMenuSequenceData: return 58
      case .cmdSyncContacts: return 59
      case .cmdGetWatchinfo: return 60
      case .cmdSetTransferPhone: return 61
      case .cmdGet4GOnline: return 62
      case .cmdSet4GOnlind: return 63
      case .cmdSetTransfer: return 64
      case .cmdAbnormalWarining: return 65
      case .cmdOnlineNotify: return 68
      case .cmdOnlineOrNot: return 69
      case .cmd4GIsItOnline: return 70
      case .cmdSetWatchinfo: return 71
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Caring_hl_cmds.cmd_t: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "Caring"

extension Caring_set_device_info_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_device_info_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_phonemodel"),
    2: .standard(proto: "m_systemversion"),
    3: .standard(proto: "m_appversion"),
    4: .standard(proto: "m_language"),
    5: .standard(proto: "m_uid"),
  ]

  public var isInitialized: Bool {
    if self._mPhonemodel == nil {return false}
    if self._mSystemversion == nil {return false}
    if self._mAppversion == nil {return false}
    if self._mLanguage == nil {return false}
    if self._mUid == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mPhonemodel) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._mSystemversion) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._mAppversion) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mLanguage) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mUid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mPhonemodel {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mSystemversion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._mAppversion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._mLanguage {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mUid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_device_info_t, rhs: Caring_set_device_info_t) -> Bool {
    if lhs._mPhonemodel != rhs._mPhonemodel {return false}
    if lhs._mSystemversion != rhs._mSystemversion {return false}
    if lhs._mAppversion != rhs._mAppversion {return false}
    if lhs._mLanguage != rhs._mLanguage {return false}
    if lhs._mUid != rhs._mUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_bind_device_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_bind_device_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_projno"),
    3: .standard(proto: "m_fwversion"),
    4: .standard(proto: "m_fontversion"),
    5: .standard(proto: "m_sdversion"),
    6: .standard(proto: "m_uiversion"),
    7: .standard(proto: "m_devicesn"),
    8: .standard(proto: "m_devicename"),
    9: .standard(proto: "m_battvalue"),
    10: .standard(proto: "m_devicemac"),
    11: .standard(proto: "m_bind_operate"),
    12: .standard(proto: "m_power"),
    13: .standard(proto: "m_deviceimei"),
    14: .standard(proto: "m_deviceid"),
  ]

  public var isInitialized: Bool {
    if self._mProjno == nil {return false}
    if self._mFwversion == nil {return false}
    if self._mFontversion == nil {return false}
    if self._mSdversion == nil {return false}
    if self._mUiversion == nil {return false}
    if self._mDevicesn == nil {return false}
    if self._mDevicename == nil {return false}
    if self._mBattvalue == nil {return false}
    if self._mDevicemac == nil {return false}
    if self._mBindOperate == nil {return false}
    if self._mPower == nil {return false}
    if self._mDeviceimei == nil {return false}
    if self._mDeviceid == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._mProjno) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._mFwversion) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mFontversion) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mSdversion) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._mUiversion) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._mDevicesn) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._mDevicename) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._mBattvalue) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self._mDevicemac) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self._mBindOperate) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self._mPower) }()
      case 13: try { try decoder.decodeSingularUInt32Field(value: &self._mDeviceimei) }()
      case 14: try { try decoder.decodeSingularUInt32Field(value: &self._mDeviceid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mProjno {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._mFwversion {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    if let v = self._mFontversion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mSdversion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._mUiversion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._mDevicesn {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._mDevicename {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._mBattvalue {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._mDevicemac {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    }
    if let v = self._mBindOperate {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
    }
    if let v = self._mPower {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
    }
    if let v = self._mDeviceimei {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 13)
    }
    if let v = self._mDeviceid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_bind_device_t, rhs: Caring_r_bind_device_t) -> Bool {
    if lhs._mProjno != rhs._mProjno {return false}
    if lhs._mFwversion != rhs._mFwversion {return false}
    if lhs._mFontversion != rhs._mFontversion {return false}
    if lhs._mSdversion != rhs._mSdversion {return false}
    if lhs._mUiversion != rhs._mUiversion {return false}
    if lhs._mDevicesn != rhs._mDevicesn {return false}
    if lhs._mDevicename != rhs._mDevicename {return false}
    if lhs._mBattvalue != rhs._mBattvalue {return false}
    if lhs._mDevicemac != rhs._mDevicemac {return false}
    if lhs._mBindOperate != rhs._mBindOperate {return false}
    if lhs._mPower != rhs._mPower {return false}
    if lhs._mDeviceimei != rhs._mDeviceimei {return false}
    if lhs._mDeviceid != rhs._mDeviceid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_get_device_info_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_device_info_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_projno"),
    2: .standard(proto: "m_uiversion"),
    3: .standard(proto: "m_fwversion"),
    4: .standard(proto: "m_devicesn"),
    5: .standard(proto: "m_devicemac"),
    6: .standard(proto: "m_power"),
    7: .standard(proto: "m_deviceimei"),
    8: .standard(proto: "m_deviceid"),
  ]

  public var isInitialized: Bool {
    if self._mProjno == nil {return false}
    if self._mUiversion == nil {return false}
    if self._mFwversion == nil {return false}
    if self._mDevicesn == nil {return false}
    if self._mDevicemac == nil {return false}
    if self._mPower == nil {return false}
    if self._mDeviceimei == nil {return false}
    if self._mDeviceid == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._mProjno) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._mUiversion) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._mFwversion) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mDevicesn) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mDevicemac) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._mPower) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._mDeviceimei) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._mDeviceid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mProjno {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._mUiversion {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._mFwversion {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    if let v = self._mDevicesn {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mDevicemac {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._mPower {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._mDeviceimei {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._mDeviceid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_get_device_info_t, rhs: Caring_get_device_info_t) -> Bool {
    if lhs._mProjno != rhs._mProjno {return false}
    if lhs._mUiversion != rhs._mUiversion {return false}
    if lhs._mFwversion != rhs._mFwversion {return false}
    if lhs._mDevicesn != rhs._mDevicesn {return false}
    if lhs._mDevicemac != rhs._mDevicemac {return false}
    if lhs._mPower != rhs._mPower {return false}
    if lhs._mDeviceimei != rhs._mDeviceimei {return false}
    if lhs._mDeviceid != rhs._mDeviceid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_auth_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_auth_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_value"),
    2: .standard(proto: "m_domain"),
  ]

  public var isInitialized: Bool {
    if self._mValue == nil {return false}
    if self._mDomain == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mValue) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._mDomain) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mValue {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mDomain {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_auth_t, rhs: Caring_set_auth_t) -> Bool {
    if lhs._mValue != rhs._mValue {return false}
    if lhs._mDomain != rhs._mDomain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_hr_sample_slot_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_hr_sample_slot_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_hr_slot"),
  ]

  public var isInitialized: Bool {
    if self._mHrSlot == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mHrSlot) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mHrSlot {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_hr_sample_slot_t, rhs: Caring_set_hr_sample_slot_t) -> Bool {
    if lhs._mHrSlot != rhs._mHrSlot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_watch_setting_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_watch_setting_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_longsit_duration"),
    2: .standard(proto: "m_start_time"),
    3: .standard(proto: "m_end_time"),
    4: .standard(proto: "m_nodisturb_state"),
    5: .standard(proto: "m_longsit_state"),
    6: .standard(proto: "m_flip_wrist_state"),
    7: .standard(proto: "m_bright_screen_time"),
    8: .standard(proto: "m_noon_nodisturb_state"),
    9: .standard(proto: "m_nodisturb_time_start"),
    10: .standard(proto: "m_nodisturb_time_end"),
  ]

  public var isInitialized: Bool {
    if self._mLongsitDuration == nil {return false}
    if self._mStartTime == nil {return false}
    if self._mEndTime == nil {return false}
    if self._mNodisturbState == nil {return false}
    if self._mLongsitState == nil {return false}
    if self._mFlipWristState == nil {return false}
    if self._mBrightScreenTime == nil {return false}
    if self._mNoonNodisturbState == nil {return false}
    if self._mNodisturbTimeStart == nil {return false}
    if self._mNodisturbTimeEnd == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mLongsitDuration) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mStartTime) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mEndTime) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mNodisturbState) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mLongsitState) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._mFlipWristState) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._mBrightScreenTime) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._mNoonNodisturbState) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._mNodisturbTimeStart) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self._mNodisturbTimeEnd) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mLongsitDuration {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mStartTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mEndTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mNodisturbState {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mLongsitState {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._mFlipWristState {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._mBrightScreenTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._mNoonNodisturbState {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._mNodisturbTimeStart {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._mNodisturbTimeEnd {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_watch_setting_t, rhs: Caring_set_watch_setting_t) -> Bool {
    if lhs._mLongsitDuration != rhs._mLongsitDuration {return false}
    if lhs._mStartTime != rhs._mStartTime {return false}
    if lhs._mEndTime != rhs._mEndTime {return false}
    if lhs._mNodisturbState != rhs._mNodisturbState {return false}
    if lhs._mLongsitState != rhs._mLongsitState {return false}
    if lhs._mFlipWristState != rhs._mFlipWristState {return false}
    if lhs._mBrightScreenTime != rhs._mBrightScreenTime {return false}
    if lhs._mNoonNodisturbState != rhs._mNoonNodisturbState {return false}
    if lhs._mNodisturbTimeStart != rhs._mNodisturbTimeStart {return false}
    if lhs._mNodisturbTimeEnd != rhs._mNodisturbTimeEnd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_alarms_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_alarms_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "alarms"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.alarms) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.alarms) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.alarms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alarms, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_alarms_t, rhs: Caring_set_alarms_t) -> Bool {
    if lhs.alarms != rhs.alarms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_alarm_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".alarm_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_alarm1_cfg"),
    2: .standard(proto: "m_alarm1_hour"),
    3: .standard(proto: "m_alarm1_min"),
    4: .standard(proto: "m_alarm1_name"),
  ]

  public var isInitialized: Bool {
    if self._mAlarm1Cfg == nil {return false}
    if self._mAlarm1Hour == nil {return false}
    if self._mAlarm1Min == nil {return false}
    if self._mAlarm1Name == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._mAlarm1Cfg) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mAlarm1Hour) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mAlarm1Min) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._mAlarm1Name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mAlarm1Cfg {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._mAlarm1Hour {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mAlarm1Min {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mAlarm1Name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_alarm_t, rhs: Caring_alarm_t) -> Bool {
    if lhs._mAlarm1Cfg != rhs._mAlarm1Cfg {return false}
    if lhs._mAlarm1Hour != rhs._mAlarm1Hour {return false}
    if lhs._mAlarm1Min != rhs._mAlarm1Min {return false}
    if lhs._mAlarm1Name != rhs._mAlarm1Name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_country_info_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_country_info_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_country_code"),
    2: .standard(proto: "m_country_timezone"),
  ]

  public var isInitialized: Bool {
    if self._mCountryCode == nil {return false}
    if self._mCountryTimezone == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mCountryCode) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mCountryTimezone) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mCountryCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mCountryTimezone {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_country_info_t, rhs: Caring_set_country_info_t) -> Bool {
    if lhs._mCountryCode != rhs._mCountryCode {return false}
    if lhs._mCountryTimezone != rhs._mCountryTimezone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_ui_style_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_ui_style_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_ui_style"),
    2: .standard(proto: "m_dial_clock"),
  ]

  public var isInitialized: Bool {
    if self._mUiStyle == nil {return false}
    if self._mDialClock == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mUiStyle) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mDialClock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mUiStyle {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mDialClock {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_ui_style_t, rhs: Caring_set_ui_style_t) -> Bool {
    if lhs._mUiStyle != rhs._mUiStyle {return false}
    if lhs._mDialClock != rhs._mDialClock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_time_format_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_time_format_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_time_format"),
  ]

  public var isInitialized: Bool {
    if self._mTimeFormat == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mTimeFormat) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mTimeFormat {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_time_format_t, rhs: Caring_set_time_format_t) -> Bool {
    if lhs._mTimeFormat != rhs._mTimeFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_metric_inch_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_metric_inch_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_metric_inch"),
  ]

  public var isInitialized: Bool {
    if self._mMetricInch == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mMetricInch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mMetricInch {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_metric_inch_t, rhs: Caring_set_metric_inch_t) -> Bool {
    if lhs._mMetricInch != rhs._mMetricInch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_hr_warning_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_hr_warning_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_hr_upper"),
    2: .standard(proto: "m_hr_lower"),
    3: .standard(proto: "m_bp_upper"),
    4: .standard(proto: "m_bp_lower"),
    5: .standard(proto: "m_detect_state"),
  ]

  public var isInitialized: Bool {
    if self._mHrUpper == nil {return false}
    if self._mHrLower == nil {return false}
    if self._mBpUpper == nil {return false}
    if self._mBpLower == nil {return false}
    if self._mDetectState == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mHrUpper) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mHrLower) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mBpUpper) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mBpLower) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mDetectState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mHrUpper {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mHrLower {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mBpUpper {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mBpLower {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mDetectState {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_hr_warning_t, rhs: Caring_set_hr_warning_t) -> Bool {
    if lhs._mHrUpper != rhs._mHrUpper {return false}
    if lhs._mHrLower != rhs._mHrLower {return false}
    if lhs._mBpUpper != rhs._mBpUpper {return false}
    if lhs._mBpLower != rhs._mBpLower {return false}
    if lhs._mDetectState != rhs._mDetectState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_abnormal_warning_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_abnormal_warning_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_warning_type"),
    2: .standard(proto: "m_time_second"),
    3: .standard(proto: "m_warning_longitude"),
    4: .standard(proto: "m_warning_latitude"),
  ]

  public var isInitialized: Bool {
    if self._mWarningType == nil {return false}
    if self._mTimeSecond == nil {return false}
    if self._mWarningLongitude == nil {return false}
    if self._mWarningLatitude == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mWarningType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mTimeSecond) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mWarningLongitude) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._mWarningLatitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mWarningType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mTimeSecond {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mWarningLongitude {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mWarningLatitude {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_abnormal_warning_t, rhs: Caring_set_abnormal_warning_t) -> Bool {
    if lhs._mWarningType != rhs._mWarningType {return false}
    if lhs._mTimeSecond != rhs._mTimeSecond {return false}
    if lhs._mWarningLongitude != rhs._mWarningLongitude {return false}
    if lhs._mWarningLatitude != rhs._mWarningLatitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_health_data_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_health_data_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_err_code"),
    2: .standard(proto: "m_sn"),
    3: .standard(proto: "m_data"),
    4: .same(proto: "step"),
    5: .same(proto: "hrm"),
    6: .same(proto: "bp"),
    7: .same(proto: "sleep"),
    8: .same(proto: "spo2"),
  ]

  fileprivate class _StorageClass {
    var _mErrCode: UInt32? = nil
    var _mSn: UInt32? = nil
    var _mData: Data? = nil
    var _step: Caring_r_get_health_step_t? = nil
    var _hrm: Caring_r_get_health_hrm_t? = nil
    var _bp: Caring_r_get_health_bp_t? = nil
    var _sleep: Caring_r_get_health_sleep_t? = nil
    var _spo2: Caring_r_get_health_spo2_t? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mErrCode = source._mErrCode
      _mSn = source._mSn
      _mData = source._mData
      _step = source._step
      _hrm = source._hrm
      _bp = source._bp
      _sleep = source._sleep
      _spo2 = source._spo2
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._mErrCode == nil {return false}
      if _storage._mSn == nil {return false}
      if let v = _storage._step, !v.isInitialized {return false}
      if let v = _storage._hrm, !v.isInitialized {return false}
      if let v = _storage._bp, !v.isInitialized {return false}
      if let v = _storage._sleep, !v.isInitialized {return false}
      if let v = _storage._spo2, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._mErrCode) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._mSn) }()
        case 3: try { try decoder.decodeSingularBytesField(value: &_storage._mData) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._step) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._hrm) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._bp) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._sleep) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._spo2) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mErrCode {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._mSn {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._mData {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
      }
      if let v = _storage._step {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._hrm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._bp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._sleep {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._spo2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_health_data_t, rhs: Caring_r_get_health_data_t) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mErrCode != rhs_storage._mErrCode {return false}
        if _storage._mSn != rhs_storage._mSn {return false}
        if _storage._mData != rhs_storage._mData {return false}
        if _storage._step != rhs_storage._step {return false}
        if _storage._hrm != rhs_storage._hrm {return false}
        if _storage._bp != rhs_storage._bp {return false}
        if _storage._sleep != rhs_storage._sleep {return false}
        if _storage._spo2 != rhs_storage._spo2 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_health_step_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_health_step_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timeStamp"),
    2: .same(proto: "totalSteps"),
    3: .same(proto: "totalDistance"),
    4: .same(proto: "totalKcal"),
    5: .same(proto: "duration"),
    6: .same(proto: "stepDetails"),
    7: .same(proto: "recordDate"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._totalSteps == nil {return false}
    if self._totalDistance == nil {return false}
    if self._totalKcal == nil {return false}
    if self._duration == nil {return false}
    if self._recordDate == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._totalSteps) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._totalDistance) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._totalKcal) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._duration) }()
      case 6: try { try decoder.decodeRepeatedUInt32Field(value: &self.stepDetails) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._recordDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeStamp {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._totalSteps {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._totalDistance {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    }
    if let v = self._totalKcal {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._duration {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if !self.stepDetails.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.stepDetails, fieldNumber: 6)
    }
    if let v = self._recordDate {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_health_step_t, rhs: Caring_r_get_health_step_t) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._totalSteps != rhs._totalSteps {return false}
    if lhs._totalDistance != rhs._totalDistance {return false}
    if lhs._totalKcal != rhs._totalKcal {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.stepDetails != rhs.stepDetails {return false}
    if lhs._recordDate != rhs._recordDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_health_hrm_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_health_hrm_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timeStamp"),
    2: .same(proto: "maxHeartRate"),
    3: .same(proto: "minHeartRate"),
    4: .same(proto: "averageHeartRate"),
    5: .same(proto: "hrsDetails"),
    6: .same(proto: "recordDate"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._maxHeartRate == nil {return false}
    if self._minHeartRate == nil {return false}
    if self._averageHeartRate == nil {return false}
    if self._recordDate == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._maxHeartRate) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._minHeartRate) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._averageHeartRate) }()
      case 5: try { try decoder.decodeRepeatedUInt32Field(value: &self.hrsDetails) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._recordDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeStamp {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._maxHeartRate {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._minHeartRate {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._averageHeartRate {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if !self.hrsDetails.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.hrsDetails, fieldNumber: 5)
    }
    if let v = self._recordDate {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_health_hrm_t, rhs: Caring_r_get_health_hrm_t) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._maxHeartRate != rhs._maxHeartRate {return false}
    if lhs._minHeartRate != rhs._minHeartRate {return false}
    if lhs._averageHeartRate != rhs._averageHeartRate {return false}
    if lhs.hrsDetails != rhs.hrsDetails {return false}
    if lhs._recordDate != rhs._recordDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_health_bp_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_health_bp_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timeStamp"),
    2: .same(proto: "maxBp"),
    3: .same(proto: "minBp"),
    4: .same(proto: "avgBp"),
    5: .same(proto: "bpDetails"),
    6: .same(proto: "recordDate"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._maxBp == nil {return false}
    if self._minBp == nil {return false}
    if self._avgBp == nil {return false}
    if self._recordDate == nil {return false}
    if let v = self._maxBp, !v.isInitialized {return false}
    if let v = self._minBp, !v.isInitialized {return false}
    if let v = self._avgBp, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.bpDetails) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._maxBp) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._minBp) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._avgBp) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.bpDetails) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._recordDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeStamp {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._maxBp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._minBp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._avgBp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.bpDetails.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bpDetails, fieldNumber: 5)
    }
    if let v = self._recordDate {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_health_bp_t, rhs: Caring_r_get_health_bp_t) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._maxBp != rhs._maxBp {return false}
    if lhs._minBp != rhs._minBp {return false}
    if lhs._avgBp != rhs._avgBp {return false}
    if lhs.bpDetails != rhs.bpDetails {return false}
    if lhs._recordDate != rhs._recordDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_health_sleep_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_health_sleep_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timeStamp"),
    2: .same(proto: "startTime"),
    3: .same(proto: "endTime"),
    4: .same(proto: "totalMinutes"),
    5: .same(proto: "lightSleepMinutes"),
    6: .same(proto: "deepSleepMinutes"),
    7: .same(proto: "awakeSleepMinutes"),
    8: .same(proto: "awakeTimes"),
    9: .same(proto: "sleepDetails"),
    10: .same(proto: "recordDate"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._startTime == nil {return false}
    if self._endTime == nil {return false}
    if self._totalMinutes == nil {return false}
    if self._lightSleepMinutes == nil {return false}
    if self._deepSleepMinutes == nil {return false}
    if self._awakeSleepMinutes == nil {return false}
    if self._awakeTimes == nil {return false}
    if self._recordDate == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.sleepDetails) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._startTime) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._endTime) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._totalMinutes) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._lightSleepMinutes) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._deepSleepMinutes) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._awakeSleepMinutes) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._awakeTimes) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.sleepDetails) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self._recordDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeStamp {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._startTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._endTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._totalMinutes {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._lightSleepMinutes {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._deepSleepMinutes {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._awakeSleepMinutes {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._awakeTimes {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    if !self.sleepDetails.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sleepDetails, fieldNumber: 9)
    }
    if let v = self._recordDate {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_health_sleep_t, rhs: Caring_r_get_health_sleep_t) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs._totalMinutes != rhs._totalMinutes {return false}
    if lhs._lightSleepMinutes != rhs._lightSleepMinutes {return false}
    if lhs._deepSleepMinutes != rhs._deepSleepMinutes {return false}
    if lhs._awakeSleepMinutes != rhs._awakeSleepMinutes {return false}
    if lhs._awakeTimes != rhs._awakeTimes {return false}
    if lhs.sleepDetails != rhs.sleepDetails {return false}
    if lhs._recordDate != rhs._recordDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_health_spo2_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_health_spo2_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timeStamp"),
    2: .same(proto: "maxSpo2"),
    3: .same(proto: "minSpo2"),
    4: .same(proto: "spo2Details"),
    5: .same(proto: "recordDate"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._maxSpo2 == nil {return false}
    if self._minSpo2 == nil {return false}
    if self._recordDate == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.spo2Details) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._maxSpo2) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._minSpo2) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.spo2Details) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._recordDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeStamp {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._maxSpo2 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._minSpo2 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if !self.spo2Details.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.spo2Details, fieldNumber: 4)
    }
    if let v = self._recordDate {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_health_spo2_t, rhs: Caring_r_get_health_spo2_t) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._maxSpo2 != rhs._maxSpo2 {return false}
    if lhs._minSpo2 != rhs._minSpo2 {return false}
    if lhs.spo2Details != rhs.spo2Details {return false}
    if lhs._recordDate != rhs._recordDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_weather_info_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_weather_info_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "weathers"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.weathers) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.weathers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.weathers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.weathers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_weather_info_t, rhs: Caring_set_weather_info_t) -> Bool {
    if lhs.weathers != rhs.weathers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_weather_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".weather_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_weather_num"),
    2: .standard(proto: "m_climate"),
    3: .standard(proto: "m_temperature"),
    4: .standard(proto: "m_pm25"),
    5: .standard(proto: "m_aqi"),
    6: .standard(proto: "m_city"),
    7: .standard(proto: "m_max_temp"),
    8: .standard(proto: "m_min_temp"),
    9: .standard(proto: "m_seconds"),
  ]

  public var isInitialized: Bool {
    if self._mWeatherNum == nil {return false}
    if self._mClimate == nil {return false}
    if self._mTemperature == nil {return false}
    if self._mPm25 == nil {return false}
    if self._mAqi == nil {return false}
    if self._mCity == nil {return false}
    if self._mMaxTemp == nil {return false}
    if self._mMinTemp == nil {return false}
    if self._mSeconds == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mWeatherNum) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mClimate) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mTemperature) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mPm25) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mAqi) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._mCity) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._mMaxTemp) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._mMinTemp) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._mSeconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mWeatherNum {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mClimate {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mTemperature {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mPm25 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mAqi {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._mCity {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._mMaxTemp {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._mMinTemp {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._mSeconds {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_weather_t, rhs: Caring_weather_t) -> Bool {
    if lhs._mWeatherNum != rhs._mWeatherNum {return false}
    if lhs._mClimate != rhs._mClimate {return false}
    if lhs._mTemperature != rhs._mTemperature {return false}
    if lhs._mPm25 != rhs._mPm25 {return false}
    if lhs._mAqi != rhs._mAqi {return false}
    if lhs._mCity != rhs._mCity {return false}
    if lhs._mMaxTemp != rhs._mMaxTemp {return false}
    if lhs._mMinTemp != rhs._mMinTemp {return false}
    if lhs._mSeconds != rhs._mSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_reset_machine_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_reset_machine_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_auth"),
    2: .standard(proto: "m_factory_mode"),
  ]

  public var isInitialized: Bool {
    if self._mAuth == nil {return false}
    if self._mFactoryMode == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mAuth) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mFactoryMode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mAuth {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mFactoryMode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_reset_machine_t, rhs: Caring_set_reset_machine_t) -> Bool {
    if lhs._mAuth != rhs._mAuth {return false}
    if lhs._mFactoryMode != rhs._mFactoryMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_sync_contacts_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".sync_contacts_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_contacts_num"),
    2: .standard(proto: "m_contacts_name"),
    3: .standard(proto: "m_contacts_sos"),
  ]

  public var isInitialized: Bool {
    if self._mContactsNum == nil {return false}
    if self._mContactsName == nil {return false}
    if self._mContactsSos == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._mContactsNum) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._mContactsName) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mContactsSos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mContactsNum {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._mContactsName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._mContactsSos {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_sync_contacts_t, rhs: Caring_sync_contacts_t) -> Bool {
    if lhs._mContactsNum != rhs._mContactsNum {return false}
    if lhs._mContactsName != rhs._mContactsName {return false}
    if lhs._mContactsSos != rhs._mContactsSos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_contacts_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_contacts_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contacts"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.contacts) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.contacts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contacts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contacts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_contacts_t, rhs: Caring_set_contacts_t) -> Bool {
    if lhs.contacts != rhs.contacts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_sport_target_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_sport_target_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_target_cal"),
    2: .standard(proto: "m_target_dis"),
    3: .standard(proto: "m_target_step"),
  ]

  public var isInitialized: Bool {
    if self._mTargetCal == nil {return false}
    if self._mTargetDis == nil {return false}
    if self._mTargetStep == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mTargetCal) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mTargetDis) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mTargetStep) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mTargetCal {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mTargetDis {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mTargetStep {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_sport_target_t, rhs: Caring_set_sport_target_t) -> Bool {
    if lhs._mTargetCal != rhs._mTargetCal {return false}
    if lhs._mTargetDis != rhs._mTargetDis {return false}
    if lhs._mTargetStep != rhs._mTargetStep {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_sync_switch_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".sync_switch_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_switchs"),
  ]

  public var isInitialized: Bool {
    if self._mSwitchs == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._mSwitchs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mSwitchs {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_sync_switch_t, rhs: Caring_sync_switch_t) -> Bool {
    if lhs._mSwitchs != rhs._mSwitchs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_get_menu_sequence_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_menu_sequence_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_type"),
  ]

  public var isInitialized: Bool {
    if self._mType == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_get_menu_sequence_t, rhs: Caring_get_menu_sequence_t) -> Bool {
    if lhs._mType != rhs._mType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_4G_online_off_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_4G_online_off_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_online"),
    2: .standard(proto: "m_time_second"),
    3: .standard(proto: "client_id"),
  ]

  public var isInitialized: Bool {
    if self._mOnline == nil {return false}
    if self._mTimeSecond == nil {return false}
    if self._clientID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mOnline) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mTimeSecond) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._clientID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mOnline {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mTimeSecond {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._clientID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_4G_online_off_t, rhs: Caring_r_get_4G_online_off_t) -> Bool {
    if lhs._mOnline != rhs._mOnline {return false}
    if lhs._mTimeSecond != rhs._mTimeSecond {return false}
    if lhs._clientID != rhs._clientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_4G_online_or_not_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_4G_online_or_not_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_online"),
  ]

  public var isInitialized: Bool {
    if self._mOnline == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mOnline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mOnline {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_4G_online_or_not_t, rhs: Caring_r_get_4G_online_or_not_t) -> Bool {
    if lhs._mOnline != rhs._mOnline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_set_caring_reminder_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_set_caring_reminder_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fallReminder"),
  ]

  public var isInitialized: Bool {
    if self._fallReminder == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._fallReminder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fallReminder {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_set_caring_reminder_t, rhs: Caring_r_set_caring_reminder_t) -> Bool {
    if lhs._fallReminder != rhs._fallReminder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_bp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_bp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sbp"),
    2: .same(proto: "dbp"),
    3: .same(proto: "measureTime"),
  ]

  public var isInitialized: Bool {
    if self._sbp == nil {return false}
    if self._dbp == nil {return false}
    if self._measureTime == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._sbp) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._dbp) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._measureTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sbp {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._dbp {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._measureTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_bp, rhs: Caring_r_get_bp) -> Bool {
    if lhs._sbp != rhs._sbp {return false}
    if lhs._dbp != rhs._dbp {return false}
    if lhs._measureTime != rhs._measureTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_sync_health_data_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_sync_health_data_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_sync_type"),
    2: .standard(proto: "m_distance_today"),
  ]

  public var isInitialized: Bool {
    if self._mSyncType == nil {return false}
    if self._mDistanceToday == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mSyncType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mDistanceToday) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mSyncType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mDistanceToday {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_sync_health_data_t, rhs: Caring_set_sync_health_data_t) -> Bool {
    if lhs._mSyncType != rhs._mSyncType {return false}
    if lhs._mDistanceToday != rhs._mDistanceToday {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_transfer_phone_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_transfer_phone_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_phone"),
  ]

  public var isInitialized: Bool {
    if self._mPhone == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mPhone) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mPhone {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_transfer_phone_t, rhs: Caring_set_transfer_phone_t) -> Bool {
    if lhs._mPhone != rhs._mPhone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_check_dail_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_check_dail_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_type"),
    2: .standard(proto: "m_data_length"),
    3: .standard(proto: "m_crc_code"),
  ]

  public var isInitialized: Bool {
    if self._mType == nil {return false}
    if self._mDataLength == nil {return false}
    if self._mCrcCode == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mDataLength) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mCrcCode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mDataLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mCrcCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_check_dail_t, rhs: Caring_set_check_dail_t) -> Bool {
    if lhs._mType != rhs._mType {return false}
    if lhs._mDataLength != rhs._mDataLength {return false}
    if lhs._mCrcCode != rhs._mCrcCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_bin_data_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_bin_data_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_sn"),
    2: .standard(proto: "m_data"),
  ]

  public var isInitialized: Bool {
    if self._mSn == nil {return false}
    if self._mData == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mSn) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._mData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mSn {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_bin_data_t, rhs: Caring_set_bin_data_t) -> Bool {
    if lhs._mSn != rhs._mSn {return false}
    if lhs._mData != rhs._mData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_update_spo2_data_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_update_spo2_data_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_spo2_value"),
    2: .standard(proto: "m_seconds"),
  ]

  public var isInitialized: Bool {
    if self._mSpo2Value == nil {return false}
    if self._mSeconds == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mSpo2Value) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mSeconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mSpo2Value {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mSeconds {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_update_spo2_data_t, rhs: Caring_set_update_spo2_data_t) -> Bool {
    if lhs._mSpo2Value != rhs._mSpo2Value {return false}
    if lhs._mSeconds != rhs._mSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_sleep_detail_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_sleep_detail_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sleep_state"),
    2: .standard(proto: "sleep_time"),
  ]

  public var isInitialized: Bool {
    if self._sleepState == nil {return false}
    if self._sleepTime == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._sleepState) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._sleepTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sleepState {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._sleepTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_sleep_detail_t, rhs: Caring_r_sleep_detail_t) -> Bool {
    if lhs._sleepState != rhs._sleepState {return false}
    if lhs._sleepTime != rhs._sleepTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_spo2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_spo2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "spo2"),
    2: .same(proto: "measureTime"),
  ]

  public var isInitialized: Bool {
    if self._spo2 == nil {return false}
    if self._measureTime == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._spo2) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._measureTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._spo2 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._measureTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_spo2, rhs: Caring_r_get_spo2) -> Bool {
    if lhs._spo2 != rhs._spo2 {return false}
    if lhs._measureTime != rhs._measureTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_drink_slot_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_drink_slot_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_drink_slot"),
    2: .standard(proto: "m_start_time"),
    3: .standard(proto: "m_end_time"),
    4: .standard(proto: "m_nodisturb_start_time"),
    5: .standard(proto: "m_nodisturb_end_time"),
  ]

  public var isInitialized: Bool {
    if self._mDrinkSlot == nil {return false}
    if self._mStartTime == nil {return false}
    if self._mEndTime == nil {return false}
    if self._mNodisturbStartTime == nil {return false}
    if self._mNodisturbEndTime == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mDrinkSlot) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mStartTime) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mEndTime) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mNodisturbStartTime) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mNodisturbEndTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mDrinkSlot {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mStartTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mEndTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mNodisturbStartTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mNodisturbEndTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_drink_slot_t, rhs: Caring_set_drink_slot_t) -> Bool {
    if lhs._mDrinkSlot != rhs._mDrinkSlot {return false}
    if lhs._mStartTime != rhs._mStartTime {return false}
    if lhs._mEndTime != rhs._mEndTime {return false}
    if lhs._mNodisturbStartTime != rhs._mNodisturbStartTime {return false}
    if lhs._mNodisturbEndTime != rhs._mNodisturbEndTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_notdisturb_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_notdisturb_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_notdisturb_time_1"),
    2: .standard(proto: "m_notdisturb_time_2"),
  ]

  public var isInitialized: Bool {
    if self._mNotdisturbTime1 == nil {return false}
    if self._mNotdisturbTime2 == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._mNotdisturbTime1) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._mNotdisturbTime2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mNotdisturbTime1 {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._mNotdisturbTime2 {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_notdisturb_t, rhs: Caring_set_notdisturb_t) -> Bool {
    if lhs._mNotdisturbTime1 != rhs._mNotdisturbTime1 {return false}
    if lhs._mNotdisturbTime2 != rhs._mNotdisturbTime2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_bright_times_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_bright_times_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_bright_time"),
  ]

  public var isInitialized: Bool {
    if self._mBrightTime == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mBrightTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mBrightTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_bright_times_t, rhs: Caring_set_bright_times_t) -> Bool {
    if lhs._mBrightTime != rhs._mBrightTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_hr_value_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_hr_value_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_hr_value"),
    2: .standard(proto: "m_err_code"),
  ]

  public var isInitialized: Bool {
    if self._mHrValue == nil {return false}
    if self._mErrCode == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mHrValue) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mErrCode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mHrValue {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mErrCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_hr_value_t, rhs: Caring_r_get_hr_value_t) -> Bool {
    if lhs._mHrValue != rhs._mHrValue {return false}
    if lhs._mErrCode != rhs._mErrCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_notify_warning_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_notify_warning_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_notify_type"),
    2: .standard(proto: "m_title_len"),
    3: .standard(proto: "m_msg_len"),
    4: .standard(proto: "m_reserved"),
    5: .standard(proto: "m_title"),
    6: .standard(proto: "m_msg"),
    7: .standard(proto: "m_utc"),
  ]

  public var isInitialized: Bool {
    if self._mNotifyType == nil {return false}
    if self._mTitleLen == nil {return false}
    if self._mMsgLen == nil {return false}
    if self._mReserved == nil {return false}
    if self._mTitle == nil {return false}
    if self._mMsg == nil {return false}
    if self._mUtc == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mNotifyType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mTitleLen) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mMsgLen) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._mReserved) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._mTitle) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self._mMsg) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._mUtc) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mNotifyType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mTitleLen {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mMsgLen {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mReserved {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }
    if let v = self._mTitle {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }
    if let v = self._mMsg {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    }
    if let v = self._mUtc {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_notify_warning_t, rhs: Caring_set_notify_warning_t) -> Bool {
    if lhs._mNotifyType != rhs._mNotifyType {return false}
    if lhs._mTitleLen != rhs._mTitleLen {return false}
    if lhs._mMsgLen != rhs._mMsgLen {return false}
    if lhs._mReserved != rhs._mReserved {return false}
    if lhs._mTitle != rhs._mTitle {return false}
    if lhs._mMsg != rhs._mMsg {return false}
    if lhs._mUtc != rhs._mUtc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_sync_user_info_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".sync_user_info_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_userid"),
    2: .standard(proto: "m_gender"),
    3: .standard(proto: "m_age"),
    4: .standard(proto: "m_height"),
    5: .standard(proto: "m_weight"),
    6: .standard(proto: "m_wearstyle"),
  ]

  public var isInitialized: Bool {
    if self._mUserid == nil {return false}
    if self._mGender == nil {return false}
    if self._mAge == nil {return false}
    if self._mHeight == nil {return false}
    if self._mWeight == nil {return false}
    if self._mWearstyle == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mUserid) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mGender) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mAge) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mHeight) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mWeight) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._mWearstyle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mUserid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mGender {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mAge {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mHeight {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mWeight {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._mWearstyle {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_sync_user_info_t, rhs: Caring_sync_user_info_t) -> Bool {
    if lhs._mUserid != rhs._mUserid {return false}
    if lhs._mGender != rhs._mGender {return false}
    if lhs._mAge != rhs._mAge {return false}
    if lhs._mHeight != rhs._mHeight {return false}
    if lhs._mWeight != rhs._mWeight {return false}
    if lhs._mWearstyle != rhs._mWearstyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_power_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_power_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_err_code"),
    2: .standard(proto: "m_power"),
  ]

  public var isInitialized: Bool {
    if self._mErrCode == nil {return false}
    if self._mPower == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mErrCode) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mPower) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mErrCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mPower {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_power_t, rhs: Caring_r_get_power_t) -> Bool {
    if lhs._mErrCode != rhs._mErrCode {return false}
    if lhs._mPower != rhs._mPower {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_updata_fw_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_updata_fw_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_new_version"),
  ]

  public var isInitialized: Bool {
    if self._mNewVersion == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mNewVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mNewVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_updata_fw_t, rhs: Caring_set_updata_fw_t) -> Bool {
    if lhs._mNewVersion != rhs._mNewVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_weather_info_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_weather_info_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_lat"),
    2: .standard(proto: "m_lng"),
  ]

  public var isInitialized: Bool {
    if self._mLat == nil {return false}
    if self._mLng == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mLat) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mLng) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mLat {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mLng {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_weather_info_t, rhs: Caring_r_get_weather_info_t) -> Bool {
    if lhs._mLat != rhs._mLat {return false}
    if lhs._mLng != rhs._mLng {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_sport_status_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_sport_status_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_sport_mode"),
    2: .standard(proto: "m_sport_status"),
    3: .standard(proto: "m_sport_speed"),
    4: .standard(proto: "m_sport_distance"),
    5: .standard(proto: "m_sport_calorie"),
    6: .standard(proto: "m_sport_flag"),
    7: .standard(proto: "m_sport_duration"),
    8: .standard(proto: "m_sport_second"),
  ]

  public var isInitialized: Bool {
    if self._mSportMode == nil {return false}
    if self._mSportStatus == nil {return false}
    if self._mSportSpeed == nil {return false}
    if self._mSportDistance == nil {return false}
    if self._mSportCalorie == nil {return false}
    if self._mSportFlag == nil {return false}
    if self._mSportDuration == nil {return false}
    if self._mSportSecond == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mSportMode) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mSportStatus) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mSportSpeed) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self._mSportDistance) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mSportCalorie) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._mSportFlag) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._mSportDuration) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._mSportSecond) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mSportMode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mSportStatus {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mSportSpeed {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mSportDistance {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._mSportCalorie {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._mSportFlag {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._mSportDuration {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._mSportSecond {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_sport_status_t, rhs: Caring_set_sport_status_t) -> Bool {
    if lhs._mSportMode != rhs._mSportMode {return false}
    if lhs._mSportStatus != rhs._mSportStatus {return false}
    if lhs._mSportSpeed != rhs._mSportSpeed {return false}
    if lhs._mSportDistance != rhs._mSportDistance {return false}
    if lhs._mSportCalorie != rhs._mSportCalorie {return false}
    if lhs._mSportFlag != rhs._mSportFlag {return false}
    if lhs._mSportDuration != rhs._mSportDuration {return false}
    if lhs._mSportSecond != rhs._mSportSecond {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_sport_data_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_sport_data_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_sport_mode"),
    2: .standard(proto: "m_sport_status"),
    3: .standard(proto: "m_sport_step"),
    4: .standard(proto: "m_sport_calorie"),
    5: .standard(proto: "m_sport_heart"),
  ]

  public var isInitialized: Bool {
    if self._mSportMode == nil {return false}
    if self._mSportStatus == nil {return false}
    if self._mSportStep == nil {return false}
    if self._mSportCalorie == nil {return false}
    if self._mSportHeart == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mSportMode) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mSportStatus) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mSportStep) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mSportCalorie) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mSportHeart) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mSportMode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mSportStatus {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mSportStep {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mSportCalorie {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mSportHeart {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_sport_data_t, rhs: Caring_r_get_sport_data_t) -> Bool {
    if lhs._mSportMode != rhs._mSportMode {return false}
    if lhs._mSportStatus != rhs._mSportStatus {return false}
    if lhs._mSportStep != rhs._mSportStep {return false}
    if lhs._mSportCalorie != rhs._mSportCalorie {return false}
    if lhs._mSportHeart != rhs._mSportHeart {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_music_info_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_music_info_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_music_ctr_code"),
    2: .standard(proto: "m_music_volume"),
    3: .standard(proto: "m_music_title"),
  ]

  public var isInitialized: Bool {
    if self._mMusicCtrCode == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mMusicCtrCode) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mMusicVolume) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._mMusicTitle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mMusicCtrCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mMusicVolume {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mMusicTitle {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_music_info_t, rhs: Caring_set_music_info_t) -> Bool {
    if lhs._mMusicCtrCode != rhs._mMusicCtrCode {return false}
    if lhs._mMusicVolume != rhs._mMusicVolume {return false}
    if lhs._mMusicTitle != rhs._mMusicTitle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_mtu_size_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_mtu_size_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_err_code"),
    2: .standard(proto: "m_mtu"),
  ]

  public var isInitialized: Bool {
    if self._mErrCode == nil {return false}
    if self._mMtu == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mErrCode) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mMtu) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mErrCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mMtu {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_mtu_size_t, rhs: Caring_r_get_mtu_size_t) -> Bool {
    if lhs._mErrCode != rhs._mErrCode {return false}
    if lhs._mMtu != rhs._mMtu {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_watch_info_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_watch_info_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_err_code"),
    2: .same(proto: "id"),
  ]

  public var isInitialized: Bool {
    if self._mErrCode == nil {return false}
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mErrCode) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mErrCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_watch_info_t, rhs: Caring_r_get_watch_info_t) -> Bool {
    if lhs._mErrCode != rhs._mErrCode {return false}
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_rtimehr_dur_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_rtimehr_dur_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_hr_duration"),
  ]

  public var isInitialized: Bool {
    if self._mHrDuration == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mHrDuration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mHrDuration {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_rtimehr_dur_t, rhs: Caring_set_rtimehr_dur_t) -> Bool {
    if lhs._mHrDuration != rhs._mHrDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_rtimehr_value_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_rtimehr_value_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_hr_value"),
  ]

  public var isInitialized: Bool {
    if self._mHrValue == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mHrValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mHrValue {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_rtimehr_value_t, rhs: Caring_r_rtimehr_value_t) -> Bool {
    if lhs._mHrValue != rhs._mHrValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_error_code_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_error_code_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
  ]

  public var isInitialized: Bool {
    if self._err == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._err) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._err {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_error_code_t, rhs: Caring_r_error_code_t) -> Bool {
    if lhs._err != rhs._err {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_find_phone_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_find_phone_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_ring_status"),
  ]

  public var isInitialized: Bool {
    if self._mRingStatus == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mRingStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mRingStatus {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_find_phone_t, rhs: Caring_r_find_phone_t) -> Bool {
    if lhs._mRingStatus != rhs._mRingStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_disturb_en_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_disturb_en_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_disturb_en"),
  ]

  public var isInitialized: Bool {
    if self._mDisturbEn == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mDisturbEn) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mDisturbEn {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_disturb_en_t, rhs: Caring_r_get_disturb_en_t) -> Bool {
    if lhs._mDisturbEn != rhs._mDisturbEn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_step_count_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_step_count_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_step_count"),
    2: .standard(proto: "m_time_second"),
    3: .standard(proto: "m_step_calorie"),
    4: .standard(proto: "m_step_distance"),
    5: .standard(proto: "m_activeduration"),
  ]

  public var isInitialized: Bool {
    if self._mStepCount == nil {return false}
    if self._mTimeSecond == nil {return false}
    if self._mStepCalorie == nil {return false}
    if self._mStepDistance == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mStepCount) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mTimeSecond) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mStepCalorie) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mStepDistance) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mActiveduration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mStepCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mTimeSecond {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mStepCalorie {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mStepDistance {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mActiveduration {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_step_count_t, rhs: Caring_r_get_step_count_t) -> Bool {
    if lhs._mStepCount != rhs._mStepCount {return false}
    if lhs._mTimeSecond != rhs._mTimeSecond {return false}
    if lhs._mStepCalorie != rhs._mStepCalorie {return false}
    if lhs._mStepDistance != rhs._mStepDistance {return false}
    if lhs._mActiveduration != rhs._mActiveduration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_current_hr_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_current_hr_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_current_hr"),
    2: .standard(proto: "m_cur_sport_status"),
  ]

  public var isInitialized: Bool {
    if self._mCurrentHr == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mCurrentHr) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mCurSportStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mCurrentHr {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mCurSportStatus {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_current_hr_t, rhs: Caring_r_get_current_hr_t) -> Bool {
    if lhs._mCurrentHr != rhs._mCurrentHr {return false}
    if lhs._mCurSportStatus != rhs._mCurSportStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_set_light_leak_result_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_set_light_leak_result_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_check_result"),
  ]

  public var isInitialized: Bool {
    if self._mCheckResult == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mCheckResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mCheckResult {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_set_light_leak_result_t, rhs: Caring_r_set_light_leak_result_t) -> Bool {
    if lhs._mCheckResult != rhs._mCheckResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_log_info_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_log_info_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_log_length"),
    2: .standard(proto: "m_log_sn"),
    3: .standard(proto: "m_log_data"),
  ]

  public var isInitialized: Bool {
    if self._mLogLength == nil {return false}
    if self._mLogSn == nil {return false}
    if self._mLogData == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mLogLength) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mLogSn) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._mLogData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mLogLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mLogSn {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mLogData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_log_info_t, rhs: Caring_r_get_log_info_t) -> Bool {
    if lhs._mLogLength != rhs._mLogLength {return false}
    if lhs._mLogSn != rhs._mLogSn {return false}
    if lhs._mLogData != rhs._mLogData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_set_active_info_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_set_active_info_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_act_start_time"),
    2: .standard(proto: "m_act_end_time"),
  ]

  public var isInitialized: Bool {
    if self._mActStartTime == nil {return false}
    if self._mActEndTime == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mActStartTime) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mActEndTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mActStartTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mActEndTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_set_active_info_t, rhs: Caring_r_set_active_info_t) -> Bool {
    if lhs._mActStartTime != rhs._mActStartTime {return false}
    if lhs._mActEndTime != rhs._mActEndTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_active_record_data_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_active_record_data_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_count_num"),
    2: .standard(proto: "m_total_length"),
    3: .standard(proto: "m_active_start_second"),
    4: .standard(proto: "m_active_hr_count"),
    5: .standard(proto: "m_active_type"),
    6: .standard(proto: "m_active_step"),
    7: .standard(proto: "m_active_durations"),
    8: .standard(proto: "m_active_calories"),
    9: .standard(proto: "m_active_distance"),
    10: .standard(proto: "m_active_avg_hr"),
    11: .standard(proto: "m_active_max_hr"),
    12: .standard(proto: "m_burn_fat_mins"),
    13: .standard(proto: "m_aerobic_mins"),
    14: .standard(proto: "m_limit_mins"),
    15: .standard(proto: "m_is_effective"),
    16: .standard(proto: "m_magic_num"),
    17: .standard(proto: "m_sn"),
    18: .standard(proto: "m_hr_data"),
    19: .standard(proto: "m_active_speed"),
    20: .standard(proto: "m_active_swing"),
    21: .standard(proto: "m_active_min_hr"),
    22: .standard(proto: "m_active_skip_times"),
    23: .standard(proto: "m_active_gps_count"),
    24: .standard(proto: "m_total_gps_num"),
  ]

  fileprivate class _StorageClass {
    var _mCountNum: UInt32? = nil
    var _mTotalLength: UInt32? = nil
    var _mActiveStartSecond: UInt32? = nil
    var _mActiveHrCount: UInt32? = nil
    var _mActiveType: UInt32? = nil
    var _mActiveStep: UInt32? = nil
    var _mActiveDurations: UInt32? = nil
    var _mActiveCalories: UInt32? = nil
    var _mActiveDistance: UInt32? = nil
    var _mActiveAvgHr: UInt32? = nil
    var _mActiveMaxHr: UInt32? = nil
    var _mBurnFatMins: UInt32? = nil
    var _mAerobicMins: UInt32? = nil
    var _mLimitMins: UInt32? = nil
    var _mIsEffective: UInt32? = nil
    var _mMagicNum: UInt32? = nil
    var _mSn: UInt32? = nil
    var _mHrData: Data? = nil
    var _mActiveSpeed: UInt32? = nil
    var _mActiveSwing: UInt32? = nil
    var _mActiveMinHr: UInt32? = nil
    var _mActiveSkipTimes: UInt32? = nil
    var _mActiveGpsCount: UInt32? = nil
    var _mTotalGpsNum: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mCountNum = source._mCountNum
      _mTotalLength = source._mTotalLength
      _mActiveStartSecond = source._mActiveStartSecond
      _mActiveHrCount = source._mActiveHrCount
      _mActiveType = source._mActiveType
      _mActiveStep = source._mActiveStep
      _mActiveDurations = source._mActiveDurations
      _mActiveCalories = source._mActiveCalories
      _mActiveDistance = source._mActiveDistance
      _mActiveAvgHr = source._mActiveAvgHr
      _mActiveMaxHr = source._mActiveMaxHr
      _mBurnFatMins = source._mBurnFatMins
      _mAerobicMins = source._mAerobicMins
      _mLimitMins = source._mLimitMins
      _mIsEffective = source._mIsEffective
      _mMagicNum = source._mMagicNum
      _mSn = source._mSn
      _mHrData = source._mHrData
      _mActiveSpeed = source._mActiveSpeed
      _mActiveSwing = source._mActiveSwing
      _mActiveMinHr = source._mActiveMinHr
      _mActiveSkipTimes = source._mActiveSkipTimes
      _mActiveGpsCount = source._mActiveGpsCount
      _mTotalGpsNum = source._mTotalGpsNum
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._mCountNum == nil {return false}
      if _storage._mTotalLength == nil {return false}
      if _storage._mActiveStartSecond == nil {return false}
      if _storage._mActiveHrCount == nil {return false}
      if _storage._mActiveType == nil {return false}
      if _storage._mActiveStep == nil {return false}
      if _storage._mActiveDurations == nil {return false}
      if _storage._mActiveCalories == nil {return false}
      if _storage._mActiveDistance == nil {return false}
      if _storage._mActiveAvgHr == nil {return false}
      if _storage._mActiveMaxHr == nil {return false}
      if _storage._mBurnFatMins == nil {return false}
      if _storage._mAerobicMins == nil {return false}
      if _storage._mLimitMins == nil {return false}
      if _storage._mIsEffective == nil {return false}
      if _storage._mMagicNum == nil {return false}
      if _storage._mSn == nil {return false}
      if _storage._mHrData == nil {return false}
      if _storage._mActiveSpeed == nil {return false}
      if _storage._mActiveSwing == nil {return false}
      if _storage._mActiveMinHr == nil {return false}
      if _storage._mActiveSkipTimes == nil {return false}
      if _storage._mActiveGpsCount == nil {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._mCountNum) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._mTotalLength) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveStartSecond) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveHrCount) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveType) }()
        case 6: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveStep) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveDurations) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveCalories) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveDistance) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveAvgHr) }()
        case 11: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveMaxHr) }()
        case 12: try { try decoder.decodeSingularUInt32Field(value: &_storage._mBurnFatMins) }()
        case 13: try { try decoder.decodeSingularUInt32Field(value: &_storage._mAerobicMins) }()
        case 14: try { try decoder.decodeSingularUInt32Field(value: &_storage._mLimitMins) }()
        case 15: try { try decoder.decodeSingularUInt32Field(value: &_storage._mIsEffective) }()
        case 16: try { try decoder.decodeSingularUInt32Field(value: &_storage._mMagicNum) }()
        case 17: try { try decoder.decodeSingularUInt32Field(value: &_storage._mSn) }()
        case 18: try { try decoder.decodeSingularBytesField(value: &_storage._mHrData) }()
        case 19: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveSpeed) }()
        case 20: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveSwing) }()
        case 21: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveMinHr) }()
        case 22: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveSkipTimes) }()
        case 23: try { try decoder.decodeSingularUInt32Field(value: &_storage._mActiveGpsCount) }()
        case 24: try { try decoder.decodeSingularUInt32Field(value: &_storage._mTotalGpsNum) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mCountNum {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._mTotalLength {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._mActiveStartSecond {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._mActiveHrCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._mActiveType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._mActiveStep {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._mActiveDurations {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._mActiveCalories {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._mActiveDistance {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._mActiveAvgHr {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._mActiveMaxHr {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._mBurnFatMins {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._mAerobicMins {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._mLimitMins {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 14)
      }
      if let v = _storage._mIsEffective {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
      }
      if let v = _storage._mMagicNum {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 16)
      }
      if let v = _storage._mSn {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 17)
      }
      if let v = _storage._mHrData {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 18)
      }
      if let v = _storage._mActiveSpeed {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 19)
      }
      if let v = _storage._mActiveSwing {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 20)
      }
      if let v = _storage._mActiveMinHr {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 21)
      }
      if let v = _storage._mActiveSkipTimes {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 22)
      }
      if let v = _storage._mActiveGpsCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 23)
      }
      if let v = _storage._mTotalGpsNum {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 24)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_active_record_data_t, rhs: Caring_r_get_active_record_data_t) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mCountNum != rhs_storage._mCountNum {return false}
        if _storage._mTotalLength != rhs_storage._mTotalLength {return false}
        if _storage._mActiveStartSecond != rhs_storage._mActiveStartSecond {return false}
        if _storage._mActiveHrCount != rhs_storage._mActiveHrCount {return false}
        if _storage._mActiveType != rhs_storage._mActiveType {return false}
        if _storage._mActiveStep != rhs_storage._mActiveStep {return false}
        if _storage._mActiveDurations != rhs_storage._mActiveDurations {return false}
        if _storage._mActiveCalories != rhs_storage._mActiveCalories {return false}
        if _storage._mActiveDistance != rhs_storage._mActiveDistance {return false}
        if _storage._mActiveAvgHr != rhs_storage._mActiveAvgHr {return false}
        if _storage._mActiveMaxHr != rhs_storage._mActiveMaxHr {return false}
        if _storage._mBurnFatMins != rhs_storage._mBurnFatMins {return false}
        if _storage._mAerobicMins != rhs_storage._mAerobicMins {return false}
        if _storage._mLimitMins != rhs_storage._mLimitMins {return false}
        if _storage._mIsEffective != rhs_storage._mIsEffective {return false}
        if _storage._mMagicNum != rhs_storage._mMagicNum {return false}
        if _storage._mSn != rhs_storage._mSn {return false}
        if _storage._mHrData != rhs_storage._mHrData {return false}
        if _storage._mActiveSpeed != rhs_storage._mActiveSpeed {return false}
        if _storage._mActiveSwing != rhs_storage._mActiveSwing {return false}
        if _storage._mActiveMinHr != rhs_storage._mActiveMinHr {return false}
        if _storage._mActiveSkipTimes != rhs_storage._mActiveSkipTimes {return false}
        if _storage._mActiveGpsCount != rhs_storage._mActiveGpsCount {return false}
        if _storage._mTotalGpsNum != rhs_storage._mTotalGpsNum {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_ui_hrs_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_ui_hrs_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_ui_act_hr"),
    2: .standard(proto: "m_ui_max_hr"),
    3: .standard(proto: "m_ui_min_hr"),
  ]

  public var isInitialized: Bool {
    if self._mUiActHr == nil {return false}
    if self._mUiMaxHr == nil {return false}
    if self._mUiMinHr == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mUiActHr) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mUiMaxHr) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mUiMinHr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mUiActHr {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mUiMaxHr {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mUiMinHr {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_ui_hrs_t, rhs: Caring_r_get_ui_hrs_t) -> Bool {
    if lhs._mUiActHr != rhs._mUiActHr {return false}
    if lhs._mUiMaxHr != rhs._mUiMaxHr {return false}
    if lhs._mUiMinHr != rhs._mUiMinHr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_nfc_operate_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_nfc_operate_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_nfc_operate_code"),
    2: .standard(proto: "m_nfc_data"),
    3: .standard(proto: "m_nfc_err_code"),
    4: .standard(proto: "m_nfc_sub_operate_code"),
    5: .standard(proto: "m_nfc_city"),
  ]

  public var isInitialized: Bool {
    if self._mNfcOperateCode == nil {return false}
    if self._mNfcData == nil {return false}
    if self._mNfcErrCode == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mNfcOperateCode) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._mNfcData) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mNfcErrCode) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mNfcSubOperateCode) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mNfcCity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mNfcOperateCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mNfcData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._mNfcErrCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mNfcSubOperateCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mNfcCity {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_nfc_operate_t, rhs: Caring_set_nfc_operate_t) -> Bool {
    if lhs._mNfcOperateCode != rhs._mNfcOperateCode {return false}
    if lhs._mNfcData != rhs._mNfcData {return false}
    if lhs._mNfcErrCode != rhs._mNfcErrCode {return false}
    if lhs._mNfcSubOperateCode != rhs._mNfcSubOperateCode {return false}
    if lhs._mNfcCity != rhs._mNfcCity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_page_switch_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_page_switch_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_operate_type"),
    2: .standard(proto: "m_page_switch"),
  ]

  public var isInitialized: Bool {
    if self._mOperateType == nil {return false}
    if self._mPageSwitch == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mOperateType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mPageSwitch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mOperateType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mPageSwitch {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_page_switch_t, rhs: Caring_set_page_switch_t) -> Bool {
    if lhs._mOperateType != rhs._mOperateType {return false}
    if lhs._mPageSwitch != rhs._mPageSwitch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_check_gps_info_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_check_gps_info_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_check_type"),
    2: .standard(proto: "m_file_num"),
    3: .standard(proto: "m_second"),
    4: .standard(proto: "m_new_version"),
  ]

  public var isInitialized: Bool {
    if self._mCheckType == nil {return false}
    if self._mFileNum == nil {return false}
    if self._mSecond == nil {return false}
    if self._mNewVersion == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mCheckType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mFileNum) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mSecond) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mNewVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mCheckType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mFileNum {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mSecond {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mNewVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_check_gps_info_t, rhs: Caring_set_check_gps_info_t) -> Bool {
    if lhs._mCheckType != rhs._mCheckType {return false}
    if lhs._mFileNum != rhs._mFileNum {return false}
    if lhs._mSecond != rhs._mSecond {return false}
    if lhs._mNewVersion != rhs._mNewVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_update_gps_data_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_update_gps_data_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_file_name"),
    2: .standard(proto: "m_file_length"),
    3: .standard(proto: "m_sn"),
    4: .standard(proto: "m_data"),
  ]

  public var isInitialized: Bool {
    if self._mFileName == nil {return false}
    if self._mFileLength == nil {return false}
    if self._mSn == nil {return false}
    if self._mData == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mFileName) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mFileLength) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mSn) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._mData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mFileName {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mFileLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mSn {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_update_gps_data_t, rhs: Caring_set_update_gps_data_t) -> Bool {
    if lhs._mFileName != rhs._mFileName {return false}
    if lhs._mFileLength != rhs._mFileLength {return false}
    if lhs._mSn != rhs._mSn {return false}
    if lhs._mData != rhs._mData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_get_dial_config_data_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_dial_config_data_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_dial_id"),
    2: .standard(proto: "m_dial_width"),
    3: .standard(proto: "m_dial_height"),
    4: .standard(proto: "m_dial_form"),
    5: .standard(proto: "m_dial_max_size"),
  ]

  public var isInitialized: Bool {
    if self._mDialID == nil {return false}
    if self._mDialWidth == nil {return false}
    if self._mDialHeight == nil {return false}
    if self._mDialForm == nil {return false}
    if self._mDialMaxSize == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mDialID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mDialWidth) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mDialHeight) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._mDialForm) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._mDialMaxSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mDialID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mDialWidth {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mDialHeight {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mDialForm {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._mDialMaxSize {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_get_dial_config_data_t, rhs: Caring_get_dial_config_data_t) -> Bool {
    if lhs._mDialID != rhs._mDialID {return false}
    if lhs._mDialWidth != rhs._mDialWidth {return false}
    if lhs._mDialHeight != rhs._mDialHeight {return false}
    if lhs._mDialForm != rhs._mDialForm {return false}
    if lhs._mDialMaxSize != rhs._mDialMaxSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_warming_data_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_warming_data_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_type"),
    2: .standard(proto: "m_min"),
    3: .standard(proto: "m_max"),
  ]

  public var isInitialized: Bool {
    if self._mType == nil {return false}
    if self._mMin == nil {return false}
    if self._mMax == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mMin) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mMax) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mMin {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mMax {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_warming_data_t, rhs: Caring_set_warming_data_t) -> Bool {
    if lhs._mType != rhs._mType {return false}
    if lhs._mMin != rhs._mMin {return false}
    if lhs._mMax != rhs._mMax {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_set_menu_sequence_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_menu_sequence_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_type"),
    2: .standard(proto: "m_count"),
    3: .standard(proto: "m_data"),
  ]

  public var isInitialized: Bool {
    if self._mType == nil {return false}
    if self._mCount == nil {return false}
    if self._mData == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mCount) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._mData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_set_menu_sequence_t, rhs: Caring_set_menu_sequence_t) -> Bool {
    if lhs._mType != rhs._mType {return false}
    if lhs._mCount != rhs._mCount {return false}
    if lhs._mData != rhs._mData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_r_get_menu_sequence_t: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".r_get_menu_sequence_t"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_type"),
    2: .standard(proto: "m_support"),
    3: .standard(proto: "m_count"),
    4: .standard(proto: "m_data"),
  ]

  public var isInitialized: Bool {
    if self._mType == nil {return false}
    if self._mSupport == nil {return false}
    if self._mCount == nil {return false}
    if self._mData == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._mType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._mSupport) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._mCount) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._mData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._mSupport {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._mCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._mData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_r_get_menu_sequence_t, rhs: Caring_r_get_menu_sequence_t) -> Bool {
    if lhs._mType != rhs._mType {return false}
    if lhs._mSupport != rhs._mSupport {return false}
    if lhs._mCount != rhs._mCount {return false}
    if lhs._mData != rhs._mData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_hl_cmds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".hl_cmds"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "response"),
    3: .same(proto: "seconds"),
    45: .same(proto: "timezone"),
    60: .standard(proto: "client_id"),
    5: .standard(proto: "r_bind_device"),
    6: .standard(proto: "r_get_device_info"),
    7: .standard(proto: "sync_phone_info"),
    8: .standard(proto: "sync_user_info"),
    9: .standard(proto: "sync_switch"),
    10: .standard(proto: "set_hr_sample_slot"),
    11: .standard(proto: "set_watch_setting"),
    12: .standard(proto: "set_drink_slot"),
    13: .standard(proto: "set_alarms"),
    14: .standard(proto: "set_notdisturb"),
    15: .standard(proto: "set_country_info"),
    16: .standard(proto: "set_ui_style"),
    17: .standard(proto: "set_sport_target"),
    18: .standard(proto: "set_time_format"),
    19: .standard(proto: "set_metric_inch"),
    20: .standard(proto: "set_bright_times"),
    21: .standard(proto: "set_set_hr_warning"),
    22: .standard(proto: "r_get_hr_value"),
    23: .standard(proto: "set_notify_warn_info"),
    24: .standard(proto: "set_health_data_info"),
    25: .standard(proto: "r_get_power_value"),
    26: .standard(proto: "set_updata_fw"),
    27: .standard(proto: "set_weather_info"),
    28: .standard(proto: "set_reset_machine"),
    29: .standard(proto: "set_sport_status"),
    30: .standard(proto: "r_get_health_data"),
    31: .standard(proto: "set_music_info"),
    32: .standard(proto: "r_get_mtu_size"),
    33: .standard(proto: "set_bin_data"),
    34: .standard(proto: "set_check_dail"),
    35: .standard(proto: "r_find_phone"),
    36: .standard(proto: "set_hr_dur"),
    37: .standard(proto: "r_hr_value"),
    38: .standard(proto: "r_get_sprot_data"),
    39: .standard(proto: "r_get_disturb_en"),
    40: .standard(proto: "r_get_step_count"),
    41: .standard(proto: "r_get_current_hr"),
    42: .standard(proto: "r_set_light_result"),
    43: .standard(proto: "r_get_active_record"),
    44: .standard(proto: "r_set_active_info"),
    46: .standard(proto: "r_get_log_info"),
    47: .standard(proto: "r_get_ui_hrs"),
    48: .standard(proto: "r_error_code"),
    49: .standard(proto: "set_nfc_operate"),
    50: .standard(proto: "set_page_switch"),
    51: .standard(proto: "set_check_gps_info"),
    52: .standard(proto: "set_update_gps_data"),
    53: .standard(proto: "set_update_spo2_data"),
    54: .standard(proto: "get_dial_config_data"),
    55: .standard(proto: "set_warming_data"),
    56: .standard(proto: "set_menu_seq_data"),
    57: .standard(proto: "get_menu_seq_data"),
    58: .standard(proto: "r_get_menu_seq_data"),
    59: .standard(proto: "r_get_weather_info"),
    61: .standard(proto: "sync_contacts_info"),
    63: .standard(proto: "r_set_caring_reminder"),
    64: .standard(proto: "set_auth"),
    66: .standard(proto: "set_transfer_phone"),
    67: .standard(proto: "set_abnormal_warning"),
    68: .standard(proto: "r_get_4G_online_off"),
    69: .standard(proto: "r_get_4G_online_or_not"),
  ]

  fileprivate class _StorageClass {
    var _cmd: Caring_hl_cmds.cmd_t? = nil
    var _response: Bool? = nil
    var _seconds: UInt32? = nil
    var _timezone: Int32? = nil
    var _clientID: Data? = nil
    var _rBindDevice: Caring_r_bind_device_t? = nil
    var _rGetDeviceInfo: Caring_get_device_info_t? = nil
    var _syncPhoneInfo: Caring_set_device_info_t? = nil
    var _syncUserInfo: Caring_sync_user_info_t? = nil
    var _syncSwitch: Caring_sync_switch_t? = nil
    var _setHrSampleSlot: Caring_set_hr_sample_slot_t? = nil
    var _setWatchSetting: Caring_set_watch_setting_t? = nil
    var _setDrinkSlot: Caring_set_drink_slot_t? = nil
    var _setAlarms: Caring_set_alarms_t? = nil
    var _setNotdisturb: Caring_set_notdisturb_t? = nil
    var _setCountryInfo: Caring_set_country_info_t? = nil
    var _setUiStyle: Caring_set_ui_style_t? = nil
    var _setSportTarget: Caring_set_sport_target_t? = nil
    var _setTimeFormat: Caring_set_time_format_t? = nil
    var _setMetricInch: Caring_set_metric_inch_t? = nil
    var _setBrightTimes: Caring_set_bright_times_t? = nil
    var _setSetHrWarning: Caring_set_hr_warning_t? = nil
    var _rGetHrValue: Caring_r_get_hr_value_t? = nil
    var _setNotifyWarnInfo: Caring_set_notify_warning_t? = nil
    var _setHealthDataInfo: Caring_set_sync_health_data_t? = nil
    var _rGetPowerValue: Caring_r_get_power_t? = nil
    var _setUpdataFw: Caring_set_updata_fw_t? = nil
    var _setWeatherInfo: Caring_set_weather_info_t? = nil
    var _setResetMachine: Caring_set_reset_machine_t? = nil
    var _setSportStatus: Caring_set_sport_status_t? = nil
    var _rGetHealthData: Caring_r_get_health_data_t? = nil
    var _setMusicInfo: Caring_set_music_info_t? = nil
    var _rGetMtuSize: Caring_r_get_mtu_size_t? = nil
    var _setBinData: Caring_set_bin_data_t? = nil
    var _setCheckDail: Caring_set_check_dail_t? = nil
    var _rFindPhone: Caring_r_find_phone_t? = nil
    var _setHrDur: Caring_set_rtimehr_dur_t? = nil
    var _rHrValue: Caring_r_rtimehr_value_t? = nil
    var _rGetSprotData: Caring_r_get_sport_data_t? = nil
    var _rGetDisturbEn: Caring_r_get_disturb_en_t? = nil
    var _rGetStepCount: Caring_r_get_step_count_t? = nil
    var _rGetCurrentHr: Caring_r_get_current_hr_t? = nil
    var _rSetLightResult: Caring_r_set_light_leak_result_t? = nil
    var _rGetActiveRecord: Caring_r_get_active_record_data_t? = nil
    var _rSetActiveInfo: Caring_r_set_active_info_t? = nil
    var _rGetLogInfo: Caring_r_get_log_info_t? = nil
    var _rGetUiHrs: Caring_r_get_ui_hrs_t? = nil
    var _rErrorCode: Caring_r_error_code_t? = nil
    var _setNfcOperate: Caring_set_nfc_operate_t? = nil
    var _setPageSwitch: Caring_set_page_switch_t? = nil
    var _setCheckGpsInfo: Caring_set_check_gps_info_t? = nil
    var _setUpdateGpsData: Caring_set_update_gps_data_t? = nil
    var _setUpdateSpo2Data: Caring_set_update_spo2_data_t? = nil
    var _getDialConfigData: Caring_get_dial_config_data_t? = nil
    var _setWarmingData: Caring_set_warming_data_t? = nil
    var _setMenuSeqData: Caring_set_menu_sequence_t? = nil
    var _getMenuSeqData: Caring_get_menu_sequence_t? = nil
    var _rGetMenuSeqData: Caring_r_get_menu_sequence_t? = nil
    var _rGetWeatherInfo: Caring_r_get_weather_info_t? = nil
    var _syncContactsInfo: Caring_set_contacts_t? = nil
    var _rSetCaringReminder: Caring_r_set_caring_reminder_t? = nil
    var _setAuth: Caring_set_auth_t? = nil
    var _setTransferPhone: Caring_set_transfer_phone_t? = nil
    var _setAbnormalWarning: Caring_set_abnormal_warning_t? = nil
    var _rGet4GOnlineOff: Caring_r_get_4G_online_off_t? = nil
    var _rGet4GOnlineOrNot: Caring_r_get_4G_online_or_not_t? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cmd = source._cmd
      _response = source._response
      _seconds = source._seconds
      _timezone = source._timezone
      _clientID = source._clientID
      _rBindDevice = source._rBindDevice
      _rGetDeviceInfo = source._rGetDeviceInfo
      _syncPhoneInfo = source._syncPhoneInfo
      _syncUserInfo = source._syncUserInfo
      _syncSwitch = source._syncSwitch
      _setHrSampleSlot = source._setHrSampleSlot
      _setWatchSetting = source._setWatchSetting
      _setDrinkSlot = source._setDrinkSlot
      _setAlarms = source._setAlarms
      _setNotdisturb = source._setNotdisturb
      _setCountryInfo = source._setCountryInfo
      _setUiStyle = source._setUiStyle
      _setSportTarget = source._setSportTarget
      _setTimeFormat = source._setTimeFormat
      _setMetricInch = source._setMetricInch
      _setBrightTimes = source._setBrightTimes
      _setSetHrWarning = source._setSetHrWarning
      _rGetHrValue = source._rGetHrValue
      _setNotifyWarnInfo = source._setNotifyWarnInfo
      _setHealthDataInfo = source._setHealthDataInfo
      _rGetPowerValue = source._rGetPowerValue
      _setUpdataFw = source._setUpdataFw
      _setWeatherInfo = source._setWeatherInfo
      _setResetMachine = source._setResetMachine
      _setSportStatus = source._setSportStatus
      _rGetHealthData = source._rGetHealthData
      _setMusicInfo = source._setMusicInfo
      _rGetMtuSize = source._rGetMtuSize
      _setBinData = source._setBinData
      _setCheckDail = source._setCheckDail
      _rFindPhone = source._rFindPhone
      _setHrDur = source._setHrDur
      _rHrValue = source._rHrValue
      _rGetSprotData = source._rGetSprotData
      _rGetDisturbEn = source._rGetDisturbEn
      _rGetStepCount = source._rGetStepCount
      _rGetCurrentHr = source._rGetCurrentHr
      _rSetLightResult = source._rSetLightResult
      _rGetActiveRecord = source._rGetActiveRecord
      _rSetActiveInfo = source._rSetActiveInfo
      _rGetLogInfo = source._rGetLogInfo
      _rGetUiHrs = source._rGetUiHrs
      _rErrorCode = source._rErrorCode
      _setNfcOperate = source._setNfcOperate
      _setPageSwitch = source._setPageSwitch
      _setCheckGpsInfo = source._setCheckGpsInfo
      _setUpdateGpsData = source._setUpdateGpsData
      _setUpdateSpo2Data = source._setUpdateSpo2Data
      _getDialConfigData = source._getDialConfigData
      _setWarmingData = source._setWarmingData
      _setMenuSeqData = source._setMenuSeqData
      _getMenuSeqData = source._getMenuSeqData
      _rGetMenuSeqData = source._rGetMenuSeqData
      _rGetWeatherInfo = source._rGetWeatherInfo
      _syncContactsInfo = source._syncContactsInfo
      _rSetCaringReminder = source._rSetCaringReminder
      _setAuth = source._setAuth
      _setTransferPhone = source._setTransferPhone
      _setAbnormalWarning = source._setAbnormalWarning
      _rGet4GOnlineOff = source._rGet4GOnlineOff
      _rGet4GOnlineOrNot = source._rGet4GOnlineOrNot
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._cmd == nil {return false}
      if _storage._response == nil {return false}
      if _storage._seconds == nil {return false}
      if _storage._timezone == nil {return false}
      if let v = _storage._rBindDevice, !v.isInitialized {return false}
      if let v = _storage._rGetDeviceInfo, !v.isInitialized {return false}
      if let v = _storage._syncPhoneInfo, !v.isInitialized {return false}
      if let v = _storage._syncUserInfo, !v.isInitialized {return false}
      if let v = _storage._syncSwitch, !v.isInitialized {return false}
      if let v = _storage._setHrSampleSlot, !v.isInitialized {return false}
      if let v = _storage._setWatchSetting, !v.isInitialized {return false}
      if let v = _storage._setDrinkSlot, !v.isInitialized {return false}
      if let v = _storage._setAlarms, !v.isInitialized {return false}
      if let v = _storage._setNotdisturb, !v.isInitialized {return false}
      if let v = _storage._setCountryInfo, !v.isInitialized {return false}
      if let v = _storage._setUiStyle, !v.isInitialized {return false}
      if let v = _storage._setSportTarget, !v.isInitialized {return false}
      if let v = _storage._setTimeFormat, !v.isInitialized {return false}
      if let v = _storage._setMetricInch, !v.isInitialized {return false}
      if let v = _storage._setBrightTimes, !v.isInitialized {return false}
      if let v = _storage._setSetHrWarning, !v.isInitialized {return false}
      if let v = _storage._rGetHrValue, !v.isInitialized {return false}
      if let v = _storage._setNotifyWarnInfo, !v.isInitialized {return false}
      if let v = _storage._setHealthDataInfo, !v.isInitialized {return false}
      if let v = _storage._rGetPowerValue, !v.isInitialized {return false}
      if let v = _storage._setUpdataFw, !v.isInitialized {return false}
      if let v = _storage._setWeatherInfo, !v.isInitialized {return false}
      if let v = _storage._setResetMachine, !v.isInitialized {return false}
      if let v = _storage._setSportStatus, !v.isInitialized {return false}
      if let v = _storage._rGetHealthData, !v.isInitialized {return false}
      if let v = _storage._setMusicInfo, !v.isInitialized {return false}
      if let v = _storage._rGetMtuSize, !v.isInitialized {return false}
      if let v = _storage._setBinData, !v.isInitialized {return false}
      if let v = _storage._setCheckDail, !v.isInitialized {return false}
      if let v = _storage._rFindPhone, !v.isInitialized {return false}
      if let v = _storage._setHrDur, !v.isInitialized {return false}
      if let v = _storage._rHrValue, !v.isInitialized {return false}
      if let v = _storage._rGetSprotData, !v.isInitialized {return false}
      if let v = _storage._rGetDisturbEn, !v.isInitialized {return false}
      if let v = _storage._rGetStepCount, !v.isInitialized {return false}
      if let v = _storage._rGetCurrentHr, !v.isInitialized {return false}
      if let v = _storage._rSetLightResult, !v.isInitialized {return false}
      if let v = _storage._rGetActiveRecord, !v.isInitialized {return false}
      if let v = _storage._rSetActiveInfo, !v.isInitialized {return false}
      if let v = _storage._rGetLogInfo, !v.isInitialized {return false}
      if let v = _storage._rGetUiHrs, !v.isInitialized {return false}
      if let v = _storage._rErrorCode, !v.isInitialized {return false}
      if let v = _storage._setNfcOperate, !v.isInitialized {return false}
      if let v = _storage._setPageSwitch, !v.isInitialized {return false}
      if let v = _storage._setCheckGpsInfo, !v.isInitialized {return false}
      if let v = _storage._setUpdateGpsData, !v.isInitialized {return false}
      if let v = _storage._setUpdateSpo2Data, !v.isInitialized {return false}
      if let v = _storage._getDialConfigData, !v.isInitialized {return false}
      if let v = _storage._setWarmingData, !v.isInitialized {return false}
      if let v = _storage._setMenuSeqData, !v.isInitialized {return false}
      if let v = _storage._getMenuSeqData, !v.isInitialized {return false}
      if let v = _storage._rGetMenuSeqData, !v.isInitialized {return false}
      if let v = _storage._rGetWeatherInfo, !v.isInitialized {return false}
      if let v = _storage._syncContactsInfo, !v.isInitialized {return false}
      if let v = _storage._rSetCaringReminder, !v.isInitialized {return false}
      if let v = _storage._setAuth, !v.isInitialized {return false}
      if let v = _storage._setTransferPhone, !v.isInitialized {return false}
      if let v = _storage._setAbnormalWarning, !v.isInitialized {return false}
      if let v = _storage._rGet4GOnlineOff, !v.isInitialized {return false}
      if let v = _storage._rGet4GOnlineOrNot, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._cmd) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._response) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._seconds) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._rBindDevice) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._rGetDeviceInfo) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._syncPhoneInfo) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._syncUserInfo) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._syncSwitch) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._setHrSampleSlot) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._setWatchSetting) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._setDrinkSlot) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._setAlarms) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._setNotdisturb) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._setCountryInfo) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._setUiStyle) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._setSportTarget) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._setTimeFormat) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._setMetricInch) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._setBrightTimes) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._setSetHrWarning) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._rGetHrValue) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._setNotifyWarnInfo) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._setHealthDataInfo) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._rGetPowerValue) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._setUpdataFw) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._setWeatherInfo) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._setResetMachine) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._setSportStatus) }()
        case 30: try { try decoder.decodeSingularMessageField(value: &_storage._rGetHealthData) }()
        case 31: try { try decoder.decodeSingularMessageField(value: &_storage._setMusicInfo) }()
        case 32: try { try decoder.decodeSingularMessageField(value: &_storage._rGetMtuSize) }()
        case 33: try { try decoder.decodeSingularMessageField(value: &_storage._setBinData) }()
        case 34: try { try decoder.decodeSingularMessageField(value: &_storage._setCheckDail) }()
        case 35: try { try decoder.decodeSingularMessageField(value: &_storage._rFindPhone) }()
        case 36: try { try decoder.decodeSingularMessageField(value: &_storage._setHrDur) }()
        case 37: try { try decoder.decodeSingularMessageField(value: &_storage._rHrValue) }()
        case 38: try { try decoder.decodeSingularMessageField(value: &_storage._rGetSprotData) }()
        case 39: try { try decoder.decodeSingularMessageField(value: &_storage._rGetDisturbEn) }()
        case 40: try { try decoder.decodeSingularMessageField(value: &_storage._rGetStepCount) }()
        case 41: try { try decoder.decodeSingularMessageField(value: &_storage._rGetCurrentHr) }()
        case 42: try { try decoder.decodeSingularMessageField(value: &_storage._rSetLightResult) }()
        case 43: try { try decoder.decodeSingularMessageField(value: &_storage._rGetActiveRecord) }()
        case 44: try { try decoder.decodeSingularMessageField(value: &_storage._rSetActiveInfo) }()
        case 45: try { try decoder.decodeSingularInt32Field(value: &_storage._timezone) }()
        case 46: try { try decoder.decodeSingularMessageField(value: &_storage._rGetLogInfo) }()
        case 47: try { try decoder.decodeSingularMessageField(value: &_storage._rGetUiHrs) }()
        case 48: try { try decoder.decodeSingularMessageField(value: &_storage._rErrorCode) }()
        case 49: try { try decoder.decodeSingularMessageField(value: &_storage._setNfcOperate) }()
        case 50: try { try decoder.decodeSingularMessageField(value: &_storage._setPageSwitch) }()
        case 51: try { try decoder.decodeSingularMessageField(value: &_storage._setCheckGpsInfo) }()
        case 52: try { try decoder.decodeSingularMessageField(value: &_storage._setUpdateGpsData) }()
        case 53: try { try decoder.decodeSingularMessageField(value: &_storage._setUpdateSpo2Data) }()
        case 54: try { try decoder.decodeSingularMessageField(value: &_storage._getDialConfigData) }()
        case 55: try { try decoder.decodeSingularMessageField(value: &_storage._setWarmingData) }()
        case 56: try { try decoder.decodeSingularMessageField(value: &_storage._setMenuSeqData) }()
        case 57: try { try decoder.decodeSingularMessageField(value: &_storage._getMenuSeqData) }()
        case 58: try { try decoder.decodeSingularMessageField(value: &_storage._rGetMenuSeqData) }()
        case 59: try { try decoder.decodeSingularMessageField(value: &_storage._rGetWeatherInfo) }()
        case 60: try { try decoder.decodeSingularBytesField(value: &_storage._clientID) }()
        case 61: try { try decoder.decodeSingularMessageField(value: &_storage._syncContactsInfo) }()
        case 63: try { try decoder.decodeSingularMessageField(value: &_storage._rSetCaringReminder) }()
        case 64: try { try decoder.decodeSingularMessageField(value: &_storage._setAuth) }()
        case 66: try { try decoder.decodeSingularMessageField(value: &_storage._setTransferPhone) }()
        case 67: try { try decoder.decodeSingularMessageField(value: &_storage._setAbnormalWarning) }()
        case 68: try { try decoder.decodeSingularMessageField(value: &_storage._rGet4GOnlineOff) }()
        case 69: try { try decoder.decodeSingularMessageField(value: &_storage._rGet4GOnlineOrNot) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cmd {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      }
      if let v = _storage._seconds {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._rBindDevice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._rGetDeviceInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._syncPhoneInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._syncUserInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._syncSwitch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._setHrSampleSlot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._setWatchSetting {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._setDrinkSlot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._setAlarms {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._setNotdisturb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._setCountryInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._setUiStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._setSportTarget {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._setTimeFormat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._setMetricInch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._setBrightTimes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._setSetHrWarning {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._rGetHrValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._setNotifyWarnInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._setHealthDataInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if let v = _storage._rGetPowerValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
      if let v = _storage._setUpdataFw {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._setWeatherInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if let v = _storage._setResetMachine {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      }
      if let v = _storage._setSportStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      }
      if let v = _storage._rGetHealthData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if let v = _storage._setMusicInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
      if let v = _storage._rGetMtuSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      }
      if let v = _storage._setBinData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      }
      if let v = _storage._setCheckDail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
      }
      if let v = _storage._rFindPhone {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
      }
      if let v = _storage._setHrDur {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      }
      if let v = _storage._rHrValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
      }
      if let v = _storage._rGetSprotData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      }
      if let v = _storage._rGetDisturbEn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
      }
      if let v = _storage._rGetStepCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      }
      if let v = _storage._rGetCurrentHr {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      }
      if let v = _storage._rSetLightResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 42)
      }
      if let v = _storage._rGetActiveRecord {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
      }
      if let v = _storage._rSetActiveInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
      }
      if let v = _storage._timezone {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 45)
      }
      if let v = _storage._rGetLogInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 46)
      }
      if let v = _storage._rGetUiHrs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
      }
      if let v = _storage._rErrorCode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 48)
      }
      if let v = _storage._setNfcOperate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 49)
      }
      if let v = _storage._setPageSwitch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
      }
      if let v = _storage._setCheckGpsInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      }
      if let v = _storage._setUpdateGpsData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 52)
      }
      if let v = _storage._setUpdateSpo2Data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
      }
      if let v = _storage._getDialConfigData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
      }
      if let v = _storage._setWarmingData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 55)
      }
      if let v = _storage._setMenuSeqData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
      }
      if let v = _storage._getMenuSeqData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      }
      if let v = _storage._rGetMenuSeqData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 58)
      }
      if let v = _storage._rGetWeatherInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 59)
      }
      if let v = _storage._clientID {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 60)
      }
      if let v = _storage._syncContactsInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
      }
      if let v = _storage._rSetCaringReminder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 63)
      }
      if let v = _storage._setAuth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 64)
      }
      if let v = _storage._setTransferPhone {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 66)
      }
      if let v = _storage._setAbnormalWarning {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 67)
      }
      if let v = _storage._rGet4GOnlineOff {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 68)
      }
      if let v = _storage._rGet4GOnlineOrNot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 69)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Caring_hl_cmds, rhs: Caring_hl_cmds) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cmd != rhs_storage._cmd {return false}
        if _storage._response != rhs_storage._response {return false}
        if _storage._seconds != rhs_storage._seconds {return false}
        if _storage._timezone != rhs_storage._timezone {return false}
        if _storage._clientID != rhs_storage._clientID {return false}
        if _storage._rBindDevice != rhs_storage._rBindDevice {return false}
        if _storage._rGetDeviceInfo != rhs_storage._rGetDeviceInfo {return false}
        if _storage._syncPhoneInfo != rhs_storage._syncPhoneInfo {return false}
        if _storage._syncUserInfo != rhs_storage._syncUserInfo {return false}
        if _storage._syncSwitch != rhs_storage._syncSwitch {return false}
        if _storage._setHrSampleSlot != rhs_storage._setHrSampleSlot {return false}
        if _storage._setWatchSetting != rhs_storage._setWatchSetting {return false}
        if _storage._setDrinkSlot != rhs_storage._setDrinkSlot {return false}
        if _storage._setAlarms != rhs_storage._setAlarms {return false}
        if _storage._setNotdisturb != rhs_storage._setNotdisturb {return false}
        if _storage._setCountryInfo != rhs_storage._setCountryInfo {return false}
        if _storage._setUiStyle != rhs_storage._setUiStyle {return false}
        if _storage._setSportTarget != rhs_storage._setSportTarget {return false}
        if _storage._setTimeFormat != rhs_storage._setTimeFormat {return false}
        if _storage._setMetricInch != rhs_storage._setMetricInch {return false}
        if _storage._setBrightTimes != rhs_storage._setBrightTimes {return false}
        if _storage._setSetHrWarning != rhs_storage._setSetHrWarning {return false}
        if _storage._rGetHrValue != rhs_storage._rGetHrValue {return false}
        if _storage._setNotifyWarnInfo != rhs_storage._setNotifyWarnInfo {return false}
        if _storage._setHealthDataInfo != rhs_storage._setHealthDataInfo {return false}
        if _storage._rGetPowerValue != rhs_storage._rGetPowerValue {return false}
        if _storage._setUpdataFw != rhs_storage._setUpdataFw {return false}
        if _storage._setWeatherInfo != rhs_storage._setWeatherInfo {return false}
        if _storage._setResetMachine != rhs_storage._setResetMachine {return false}
        if _storage._setSportStatus != rhs_storage._setSportStatus {return false}
        if _storage._rGetHealthData != rhs_storage._rGetHealthData {return false}
        if _storage._setMusicInfo != rhs_storage._setMusicInfo {return false}
        if _storage._rGetMtuSize != rhs_storage._rGetMtuSize {return false}
        if _storage._setBinData != rhs_storage._setBinData {return false}
        if _storage._setCheckDail != rhs_storage._setCheckDail {return false}
        if _storage._rFindPhone != rhs_storage._rFindPhone {return false}
        if _storage._setHrDur != rhs_storage._setHrDur {return false}
        if _storage._rHrValue != rhs_storage._rHrValue {return false}
        if _storage._rGetSprotData != rhs_storage._rGetSprotData {return false}
        if _storage._rGetDisturbEn != rhs_storage._rGetDisturbEn {return false}
        if _storage._rGetStepCount != rhs_storage._rGetStepCount {return false}
        if _storage._rGetCurrentHr != rhs_storage._rGetCurrentHr {return false}
        if _storage._rSetLightResult != rhs_storage._rSetLightResult {return false}
        if _storage._rGetActiveRecord != rhs_storage._rGetActiveRecord {return false}
        if _storage._rSetActiveInfo != rhs_storage._rSetActiveInfo {return false}
        if _storage._rGetLogInfo != rhs_storage._rGetLogInfo {return false}
        if _storage._rGetUiHrs != rhs_storage._rGetUiHrs {return false}
        if _storage._rErrorCode != rhs_storage._rErrorCode {return false}
        if _storage._setNfcOperate != rhs_storage._setNfcOperate {return false}
        if _storage._setPageSwitch != rhs_storage._setPageSwitch {return false}
        if _storage._setCheckGpsInfo != rhs_storage._setCheckGpsInfo {return false}
        if _storage._setUpdateGpsData != rhs_storage._setUpdateGpsData {return false}
        if _storage._setUpdateSpo2Data != rhs_storage._setUpdateSpo2Data {return false}
        if _storage._getDialConfigData != rhs_storage._getDialConfigData {return false}
        if _storage._setWarmingData != rhs_storage._setWarmingData {return false}
        if _storage._setMenuSeqData != rhs_storage._setMenuSeqData {return false}
        if _storage._getMenuSeqData != rhs_storage._getMenuSeqData {return false}
        if _storage._rGetMenuSeqData != rhs_storage._rGetMenuSeqData {return false}
        if _storage._rGetWeatherInfo != rhs_storage._rGetWeatherInfo {return false}
        if _storage._syncContactsInfo != rhs_storage._syncContactsInfo {return false}
        if _storage._rSetCaringReminder != rhs_storage._rSetCaringReminder {return false}
        if _storage._setAuth != rhs_storage._setAuth {return false}
        if _storage._setTransferPhone != rhs_storage._setTransferPhone {return false}
        if _storage._setAbnormalWarning != rhs_storage._setAbnormalWarning {return false}
        if _storage._rGet4GOnlineOff != rhs_storage._rGet4GOnlineOff {return false}
        if _storage._rGet4GOnlineOrNot != rhs_storage._rGet4GOnlineOrNot {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Caring_hl_cmds.cmd_t: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CMD_BIND_DEVICE"),
    2: .same(proto: "CMD_GET_DEVICE_INFO"),
    3: .same(proto: "CMD_SET_AUTH_INFO"),
    4: .same(proto: "CMD_SYNC_USER_INFO"),
    5: .same(proto: "CMD_SYNC_SWITCH"),
    6: .same(proto: "CMD_SET_HR_SAMPLE_SLOT"),
    7: .same(proto: "CMD_SET_WATCH_SETTING"),
    8: .same(proto: "CMD_SET_DRINK_SLOT"),
    9: .same(proto: "CMD_SET_ALARMS"),
    10: .same(proto: "CMD_SET_NOTDISTURB"),
    11: .same(proto: "CMD_SET_COUNTRY_INFO"),
    12: .same(proto: "CMD_SET_UI_STYLE"),
    13: .same(proto: "CMD_SET_SPORT_TARGET"),
    14: .same(proto: "CMD_SET_TIME_FORMAT"),
    15: .same(proto: "CMD_SET_METRIC_INCH"),
    16: .same(proto: "CMD_SET_BRIGHT_TIMES"),
    17: .same(proto: "CMD_SET_HR_WARNING"),
    18: .same(proto: "CMD_SET_ABNORMAL_WARNING"),
    19: .same(proto: "CMD_SET_NOTIFY_WARN"),
    20: .same(proto: "CMD_SET_SYNC_HEALTH_DATA"),
    21: .same(proto: "CMD_GET_POWER_VALUE"),
    22: .same(proto: "CMD_SET_UPDATA_FW"),
    23: .same(proto: "CMD_SET_TAKE_PIC"),
    24: .same(proto: "CMD_SET_FIND_PHONE"),
    25: .same(proto: "CMD_SET_FIND_DEV"),
    26: .same(proto: "CMD_SET_WEATHER_INFO"),
    27: .same(proto: "CMD_SET_RESET_MACHINE"),
    28: .same(proto: "CMD_SET_SPORT_STATUS"),
    29: .same(proto: "CMD_GET_HEALTH_DATA"),
    30: .same(proto: "CMD_SET_MUSIC_INFO"),
    31: .same(proto: "CMD_GET_SYNC_MTU"),
    32: .same(proto: "CMD_SET_BIN_DATA_UPDATE"),
    33: .same(proto: "CMD_FACTORY_TEST_MODE"),
    34: .same(proto: "CMD_SEND_CHECK_DAIL"),
    35: .same(proto: "CMD_GET_REALTIME_HR"),
    36: .same(proto: "CMD_SYNC_REALTIME_HR"),
    37: .same(proto: "CMD_HAND_UP_PHONE"),
    38: .same(proto: "CMD_DISTURB_SWITCH"),
    39: .same(proto: "CMD_CTR_APP_SPORTS"),
    40: .same(proto: "CMD_SYNC_STEP_COUNT"),
    41: .same(proto: "CMD_CHECK_SPORT_STATUS"),
    42: .same(proto: "CMD_GET_CURRENT_SPORT_HR"),
    43: .same(proto: "CMD_SET_MAKE_TEST_DATA"),
    44: .same(proto: "CMD_SET_LIGHT_LEAK_RESULT"),
    45: .same(proto: "CMD_GET_ACTIVE_RECORD_DATA"),
    46: .same(proto: "CMD_SET_ACTIVE_RECORD_DATA"),
    47: .same(proto: "CMD_SET_LOG_INFO_DATA"),
    48: .same(proto: "CMD_GET_LOG_INFO_DATA"),
    49: .same(proto: "CMD_GET_UI_HRS_VALUE"),
    50: .same(proto: "CMD_SET_ALL_CONFIG_PARAM"),
    51: .same(proto: "CMD_SET_NFC_OPERATE_CODE"),
    52: .same(proto: "CMD_SET_PAGE_SWITCH"),
    53: .same(proto: "CMD_SET_CHECK_GPS_INFO"),
    54: .same(proto: "CMD_SET_UPDATE_GPS_DATA"),
    55: .same(proto: "CMD_GET_UPDATE_SPO2_DATA"),
    56: .same(proto: "CMD_GET_DIAL_CONFIG_DATA"),
    57: .same(proto: "CMD_SET_WARMING_DATA"),
    58: .same(proto: "CMD_SET_MENU_SEQUENCE_DATA"),
    59: .same(proto: "CMD_SYNC_CONTACTS"),
    60: .same(proto: "CMD_GET_WATCHINFO"),
    61: .same(proto: "CMD_SET_TRANSFER_PHONE"),
    62: .same(proto: "CMD_GET_4G_ONLINE"),
    63: .same(proto: "CMD_SET_4G_ONLIND"),
    64: .same(proto: "CMD_SET_TRANSFER"),
    65: .same(proto: "CMD_ABNORMAL_WARINING"),
    68: .same(proto: "CMD_ONLINE_NOTIFY"),
    69: .same(proto: "CMD_ONLINE_OR_NOT"),
    70: .same(proto: "CMD_4G_IS_IT_ONLINE"),
    71: .same(proto: "CMD_SET_WATCHINFO"),
  ]
}
